AutoGen Definitions dummy;
class = {
  cp-id     = 'class_s_i4735';
  cp-name   = 'SI4735';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a818c60896490631e4311452c99ff361f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SI4735';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1179';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Construct a new SI4735::SI4735.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 46 

\ilinebr\ilinebr This class has a set of functions that can help you to build your receiver based on Si47XX IC family.
\ilinebr\ilinebr This library uses the IÂ²C communication protocol and implements most of the functions offered by Si47XX (BROADCAST AM / FM / SW / LW RADIO RECEIVER) IC family from Silicon Labs.
\ilinebr\ilinebr Currently you have more than 120 functions implemented to control the Si47XX devices. These functions are listed and documented here.
\ilinebr\ilinebr Some methods were implemented using inline resource. Inline methods are implemented in SI4735.h

IMPORTANT: According to Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 207, "For write operations, the system controller next
sends a data byte on SDIO, which is captured by the device on rising edges of SCLK. The device acknowledges
each data byte by driving SDIO low for one cycle on the next falling edge of SCLK.
The system controller may write up to 8 data bytes in a single 2-wire transaction.
The first byte is a command, and the next seven bytes are arguments. Writing more than 8 bytes results
in unpredictable device behavior". If you extend this library, remember the 8 byte restriction.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gadc6014674bd4d1ee3aab56c605926db1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reset';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1180';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reset the SI473X.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 298 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0);
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga8eddbfb3e62786aa4843d4bcd25da2b9';
        sec-mem-ref-line = '225';
        sec-mem-ref-name = 'getDeviceI2CAddress';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '579';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'waitToSend';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1181';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Wait for the si473x is ready (Clear to Send (CTS) status bit have to be 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 315 

\ilinebr\ilinebr This function should be used before sending any command to a SI47XX device.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 63, 128
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7751b076ce0bcb62eade4f92cd8d93a6';
        sec-mem-ref-line = '3405';
        sec-mem-ref-name = 'downloadPatchFromEeprom';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaaae187575b9868ff427c063c3a6cca2a';
        sec-mem-ref-line = '1005';
        sec-mem-ref-name = 'getAutomaticGainControl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gab4c50abd500f55427a4d1d2273b45e3a';
        sec-mem-ref-line = '1518';
        sec-mem-ref-name = 'getCommandResponse';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gabf59183da13c72384093fc238c3114cf';
        sec-mem-ref-line = '1115';
        sec-mem-ref-name = 'getCurrentReceivedSignalQuality';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga2fbc7e2187a7c645879623100dbc8502';
        sec-mem-ref-line = '481';
        sec-mem-ref-name = 'getFirmware';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf361734168c913803e7e2dfbf4fe0c55';
        sec-mem-ref-line = '83';
        sec-mem-ref-name = 'getInterruptStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gace60b9db8033c689247dc1370be367b6';
        sec-mem-ref-line = '1564';
        sec-mem-ref-name = 'getProperty';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2048';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5507f4d98f389247320eb19b16395a27';
        sec-mem-ref-line = '3031';
        sec-mem-ref-name = 'getSsbAgcStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5c0f4036a7fbbd11a26f1f6f4579d3cd';
        sec-mem-ref-line = '956';
        sec-mem-ref-name = 'getStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gafaabd6c73b7ad7c20ae959d5b75c1e71';
        sec-mem-ref-line = '3144';
        sec-mem-ref-name = 'patchPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gabed83f2c503dc3b35ca115ef6b08d552';
        sec-mem-ref-line = '3589';
        sec-mem-ref-name = 'patchPowerUpNBFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '459';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3103';
        sec-mem-ref-name = 'queryLibraryId';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3280b98b8331f00b4d0158ef1b076533';
        sec-mem-ref-line = '1183';
        sec-mem-ref-name = 'seekStation';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3d2342264b36bd524ccbaf898e4d219b';
        sec-mem-ref-line = '1496';
        sec-mem-ref-name = 'sendCommand';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga4d65660ec2b60d7486165ed8a7a92015';
        sec-mem-ref-line = '1464';
        sec-mem-ref-name = 'sendProperty';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga27c22f5671ce3229e925e5fbe93ba0a6';
        sec-mem-ref-line = '1053';
        sec-mem-ref-name = 'setAutomaticGainControl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga8755743a36d2d4662c8db918d02ee4e1';
        sec-mem-ref-line = '894';
        sec-mem-ref-name = 'setBandwidth';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga63d205f2d3169ba877a2bd2ee28d224f';
        sec-mem-ref-line = '688';
        sec-mem-ref-name = 'setFrequency';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5c8c57c727fd102f0eb3d59ec995692f';
        sec-mem-ref-line = '3691';
        sec-mem-ref-name = 'setFrequencyNBFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5e5018897af1edc1ca8507af3d3bfc5e';
        sec-mem-ref-line = '158';
        sec-mem-ref-name = 'setGpio';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga0d615c1fcfeb570effc97e8b7e959106';
        sec-mem-ref-line = '119';
        sec-mem-ref-name = 'setGpioCtl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gad9718a85c79a311c26997bbda20f2351';
        sec-mem-ref-line = '1958';
        sec-mem-ref-name = 'setRdsConfig';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaddfe8c89101b4859eca31ad68ad9de2e';
        sec-mem-ref-line = '2004';
        sec-mem-ref-name = 'setRdsIntSource';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga2da03a7257b7ca821f984bfa7fef97fa';
        sec-mem-ref-line = '3058';
        sec-mem-ref-name = 'setSsbAgcOverrite';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga55cf9a091d314a1aa21552f2254f756f';
        sec-mem-ref-line = '2760';
        sec-mem-ref-name = 'setSSBBfo';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga0fcfd8e487c594707b3f2aaa71a86d68';
        sec-mem-ref-line = '3160';
        sec-mem-ref-name = 'ssbPowerUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga0d615c1fcfeb570effc97e8b7e959106';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGpioCtl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO1OEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO2OEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO3OEN';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1183';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enables output for GPO1, 2, and 3.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 101 

\ilinebr\ilinebr GPO1, 2, and 3 can be configured for output (Hi-Z or active drive) by setting the GPO1OEN, GPO2OEN, and GPO3OEN bit.
\ilinebr\ilinebr The state (high or low) of GPO1, 2, and 3 is set with the GPIO_SET command.
\ilinebr\ilinebr To avoid excessive current consumption due to oscillation, GPO pins should not be left in a high impedance state.

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> GPIO Output Enable \ilinebr </th>    <th class="markdownTableHeadNone"> value 0 \ilinebr </th>    <th class="markdownTableHeadNone"> value 1 \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO1OEN \ilinebr </td>    <td class="markdownTableBodyNone"> Output Disabled (Hi-Z) (default) \ilinebr </td>    <td class="markdownTableBodyNone"> Output Enabled \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> GPO2OEN \ilinebr </td>    <td class="markdownTableBodyNone"> Output Disabled (Hi-Z) (default) \ilinebr </td>    <td class="markdownTableBodyNone"> Output Enabled \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO3OEN \ilinebr </td>    <td class="markdownTableBodyNone"> Output Disabled (Hi-Z) (default) \ilinebr </td>    <td class="markdownTableBodyNone"> Output Enabled \ilinebr </td>  </tr></table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 82 and 144

@param GPO1OEN
@param GPO2OEN
@param GPO3OEN
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga5e5018897af1edc1ca8507af3d3bfc5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGpio';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO1LEVEL';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO2LEVEL';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO3LEVEL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1184';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the output level (high or low) for GPO1, 2, and 3.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 140 

\ilinebr\ilinebr GPO1, 2, and 3 can be configured for output by setting the GPO1OEN, GPO2OEN, and GPO3OEN bit in the GPIO_CTL command.
\ilinebr\ilinebr To avoid excessive current consumption due to oscillation, GPO pins should not be left in a high impedance state.
\ilinebr\ilinebr To avoid excessive current consumption due to oscillation, GPO pins should not be left in a high impedance state.

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> GPIO Output Enable \ilinebr </th>    <th class="markdownTableHeadNone"> value 0 \ilinebr </th>    <th class="markdownTableHeadNone"> value 1 \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO1LEVEL \ilinebr </td>    <td class="markdownTableBodyNone"> Output low (default) \ilinebr </td>    <td class="markdownTableBodyNone"> Output high \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> GPO2LEVEL \ilinebr </td>    <td class="markdownTableBodyNone"> Output low (default) \ilinebr </td>    <td class="markdownTableBodyNone"> Output high \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO3LEVEL \ilinebr </td>    <td class="markdownTableBodyNone"> Output low (default) \ilinebr </td>    <td class="markdownTableBodyNone"> Output high \ilinebr </td>  </tr></table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 83 and 145

@param GPO1LEVEL
@param GPO2LEVEL
@param GPO3LEVEL
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga6806bca795400959f36e8202e36cd94c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGpioIen';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'STCIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RSQIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ERRIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'CTSIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'STCREP';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RSQREP';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1185';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures the sources for the GPO2/INT interrupt pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 179 

\ilinebr\ilinebr Valid sources are the lower 8 bits of the STATUS byte, including CTS, ERR, RSQINT, and STCINT bits.
\ilinebr\ilinebr The corresponding bit is set before the interrupt occurs. The CTS bit (and optional interrupt) is set when it is safe to send the next command.
\ilinebr\ilinebr The CTS interrupt enable (CTSIEN) can be set with this property and the POWER_UP command.
\ilinebr\ilinebr The state of the CTSIEN bit set during the POWER_UP command can be read by reading this property and modified by writing this property.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 146

@param STCIEN Seek/Tune Complete Interrupt Enable (0 or 1).
@param RSQIEN RSQ Interrupt Enable (0 or 1).
@param ERRIEN ERR Interrupt Enable (0 or 1).
@param CTSIEN CTS Interrupt Enable (0 or 1).
@param STCREP STC Interrupt Repeat (0 or 1).
@param RSQREP RSQ Interrupt Repeat(0 or 1).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga944ed704e2175a6cf660ad65ca5bbad5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'resetPin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'defaultFunction';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1187';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the Si473X device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 610 

\ilinebr\ilinebr Use this setup if you are not using interrupt resource.
\ilinebr\ilinebr If the audio mode parameter is not entered, analog mode will be considered.
\ilinebr\ilinebr You can use any Arduino digital pin. Be sure you are using less than 3.6V on Si47XX RST pin.

@param uint8_t resetPin Digital Arduino Pin used to RESET command.
@param uint8_t defaultFunction. 0 =  FM mode; 1 = AM
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1gaf8d0ff88ec989d714ab63da39f3897b4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'resetPin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ctsIntEnable';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'defaultFunction';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'audioMode';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
SI473X_ANALOG_AUDIO
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'clockType';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
XOSCEN_CRYSTAL
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpo2Enable';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1188';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the Si473X device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 563 

\ilinebr\ilinebr Use this function to start the device up with the parameters shown below.
\ilinebr\ilinebr If the audio mode parameter is not entered, analog mode will be considered.
\ilinebr\ilinebr You can use any Arduino digital pin. Be sure you are using less than 3.6V on Si47XX RST pin.

ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
           Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

@param resetPin Digital Arduino Pin used to RESET de Si47XX device.
@param ctsIntEnable CTS Interrupt Enable.
@param defaultFunction is the mode you want the receiver starts.
@param audioMode default SI473X_ANALOG_AUDIO (Analog Audio). Use SI473X_ANALOG_AUDIO or SI473X_DIGITAL_AUDIO.
@param clockType 0 = Use external RCLK (crystal oscillator disabled); 1 = Use crystal oscillator
@param gpo2Enable GPO2OE (GPO2 Output) 1 = Enable; 0 Disable (defult)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga2fbc7e2187a7c645879623100dbc8502';
        sec-mem-ref-line = '481';
        sec-mem-ref-name = 'getFirmware';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadc6014674bd4d1ee3aab56c605926db1';
        sec-mem-ref-line = '302';
        sec-mem-ref-name = 'reset';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga54a3a0f412aa6318df0046d478bd134f';
        sec-mem-ref-line = '2850';
        sec-mem-ref-name = 'setHardwareAudioMute';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga56d6eebe36f8178efc080e6e134e0b9b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRefClock';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'refclk';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1190';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the frequency of the REFCLK from the output of the prescaler.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The REFCLK range is 31130 to 34406 Hz (32768 Â±5% Hz) in 1 Hz steps, or 0 (to disable AFC). For example, an RCLK of 13 MHz would require a prescaler value of 400 to divide it to 32500 Hz REFCLK.
\ilinebr\ilinebr The reference clock frequency property would then need to be set to 32500 Hz.
\ilinebr\ilinebr RCLK frequencies between 31130 Hz and 40 MHz are supported, however, there are gaps in frequency coverage for prescaler values ranging from 1 to 10, or frequencies up to 311300 Hz. See table below.

Table REFCLK Prescaler
<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Prescaler \ilinebr </th>    <th class="markdownTableHeadNone"> RCLK Low (Hz) \ilinebr </th>    <th class="markdownTableHeadNone"> RCLK High (Hz) \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 1 \ilinebr </td>    <td class="markdownTableBodyNone"> 31130 \ilinebr </td>    <td class="markdownTableBodyNone"> 34406 \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 2 \ilinebr </td>    <td class="markdownTableBodyNone"> 62260 \ilinebr </td>    <td class="markdownTableBodyNone"> 68812 \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> 93390 \ilinebr </td>    <td class="markdownTableBodyNone"> 103218 \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 4 \ilinebr </td>    <td class="markdownTableBodyNone"> 124520 \ilinebr </td>    <td class="markdownTableBodyNone"> 137624 \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 5 \ilinebr </td>    <td class="markdownTableBodyNone"> 155650 \ilinebr </td>    <td class="markdownTableBodyNone"> 172030 \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 6 \ilinebr </td>    <td class="markdownTableBodyNone"> 186780 \ilinebr </td>    <td class="markdownTableBodyNone"> 206436 \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 7 \ilinebr </td>    <td class="markdownTableBodyNone"> 217910 \ilinebr </td>    <td class="markdownTableBodyNone"> 240842 \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 8 \ilinebr </td>    <td class="markdownTableBodyNone"> 249040 \ilinebr </td>    <td class="markdownTableBodyNone"> 275248 \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 9 \ilinebr </td>    <td class="markdownTableBodyNone"> 280170 \ilinebr </td>    <td class="markdownTableBodyNone"> 309654 \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 10 \ilinebr </td>    <td class="markdownTableBodyNone"> 311300 \ilinebr </td>    <td class="markdownTableBodyNone"> 344060 \ilinebr </td>  </tr></table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 34 and 35

@param refclk The allowed REFCLK frequency range is between 31130 and 34406 Hz (32768 Â±5%), or 0 (to disable AFC).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1gadafdd29bf1d22e43199abc4c2ac7b231';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRefClockPrescaler';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'prescale';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'rclk_sel';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1191';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the number used by the prescaler to divide the external RCLK down to the internal REFCLK.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The range may be between 1 and 4095 in 1 unit steps.
\ilinebr\ilinebr For example, an RCLK of 13 MHz would require a prescaler value of 400 to divide it to 32500 Hz. The reference clock frequency property would then need to be set to 32500 Hz.
\ilinebr\ilinebr ATTENTION by default, this function assumes you are using the RCLK pin as clock source.
\ilinebr\ilinebr Example: The code below shows the setup for an active 4.9152MHz crystal
@code 
  rx.setRefClock(32768);
  rx.setRefClockPrescaler(150); // will work with 4915200Hz active crystal => 4.9152MHz => (32768 x 150)
  rx.setup(RESET_PIN, 0, POWER_UP_AM, SI473X_ANALOG_AUDIO, XOSCEN_RCLK);
@endcode
\ilinebr\ilinebr Example: The code below shows the setup for an active 13MHz crystal
@code 
  rx.setRefClock(32500);
  rx.setRefClockPrescaler(400); // 32500 x 400 = 13000000 (13MHz)
  rx.setup(RESET_PIN, 0, POWER_UP_AM, SI473X_ANALOG_AUDIO, XOSCEN_RCLK);
@endcode
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 34 and 35

@param prescale  Prescaler for Reference Clock value; Between 1 and 4095 in 1 unit steps. Default is 1.
@param rclk_sel  0 = RCLK pin is clock source (default); 1 = DCLK pin is clock source
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1gace60b9db8033c689247dc1370be367b6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getProperty';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'propertyValue';
        sec-mem-param-defname = 'propertyNumber';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1193';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets a given property from the SI47XX.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1551 

\ilinebr\ilinebr This method is used to get a given property from SI47XX
\ilinebr\ilinebr You might need to extract set of bits information from the returned value to know the real value

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55, 69, 124 and  134.
@see sendProperty, setProperty, sendCommand, getCommandResponse

@param propertyNumber property number (example: RX_VOLUME)

@return property value  (the content of the property)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1ga27549ef05fa62f60e4ac205c16b8f764';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setProperty';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'propertyNumber';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1209';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets a given SI47XX device property.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1198 

\ilinebr\ilinebr Sets the Si47XX device with a given attribute.
\ilinebr\ilinebr You might need to use the bit operations or some bit field structure to set right the values.
\ilinebr\ilinebr Used this function instead of the sendProperty.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55, 69, 124 and  134.
@see getProperty, sendProperty
@param propertyNumber
@param param  pamameter value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1ga3d2342264b36bd524ccbaf898e4d219b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sendCommand';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1214';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sends a given command to the SI47XX devices.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function can be useful when you want to execute a SI47XX device command and it was not implemented by this library.
\ilinebr\ilinebr In this case you have to check the  AN332-Si47XX PROGRAMMING GUIDE to know how the command works.
\ilinebr\ilinebr Also, you need to work with bit operators to compose the parameters of the command [ &(and), Ë(xor), |(or) etc ].

@see getCommandResponse, setProperty

@param cmd command number (see AN332-Si47XX PROGRAMMING GUIDE)
@param parameter_size Parameter size in bytes. Tell the number of argument used by the command.
@param parameter unsigned byte array with the arguments of the command
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1gab4c50abd500f55427a4d1d2273b45e3a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCommandResponse';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'num_of_bytes';
        sec-mem-param-defname = 'response_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'response';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1215';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns with the command response.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 After a command is executed by the device, you can get the result (response) of the command by calling this method.

@see sendCommand, setProperty

@param response_size  num of bytes returned by the command.
@param response  byte array where the response will be stored.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1gaf0ce36e251cbd826d4dee7687c1bc31a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusResponse';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1216';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the first byte response.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 In this context status is the first response byte for any SI47XX command. See si47x_status structure.
\ilinebr\ilinebr This function can be useful to check, for example, the success or failure of a command.

@see si47x_status

@return si47x_status
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga8bc001cb28dc8fbd88ba0fa7024eca39';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'CTSIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO2OEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'PATCH';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'XOSCEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'FUNC';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OPMODE';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1218';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Power Up parameters for si473X.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 335 

\ilinebr\ilinebr Use this method to chenge the defaul behavior of the Si473X. Use it before PowerUp()
\ilinebr\ilinebr About the parameter XOSCEN:
\ilinebr\ilinebr 0 = Use external RCLK (crystal oscillator disabled);
\ilinebr\ilinebr 1 = Use crystal oscillator (RCLK and GPO3/DCLK with external 32.768 kHz crystal and OPMODE = 01010000).

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 65 and 129

@param uint8_t CTSIEN sets Interrupt anabled or disabled (1 = anabled and 0 = disabled )
@param uint8_t GPO2OEN sets GP02 Si473X pin enabled (1 = anabled and 0 = disabled )
@param uint8_t PATCH  Used for firmware patch updates. Use it always 0 here.
@param uint8_t XOSCEN sets external Crystal enabled or disabled. 0 = Use external RCLK (crystal oscillator disabled); 1 = Use crystal oscillator
@param uint8_t FUNC sets the receiver function have to be used [0 = FM Receive; 1 = AM (LW/MW/SW) and SSB (if SSB patch apllied)]
@param uint8_t OPMODE set the kind of audio mode you want to use.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga3e228da65641f4dcf4253262e19bde9b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'radioPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1219';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Powerup the Si47XX.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 384 

\ilinebr\ilinebr Before call this function call the setPowerUp to set up the parameters.

\ilinebr\ilinebr Parameters you have to set up with setPowerUp

<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Parameter \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> CTSIEN \ilinebr </td>    <td class="markdownTableBodyNone"> Interrupt anabled or disabled \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> GPO2OEN \ilinebr </td>    <td class="markdownTableBodyNone"> GPO2 Output Enable or disabled \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> PATCH \ilinebr </td>    <td class="markdownTableBodyNone"> Boot normally or patch \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> XOSCEN \ilinebr </td>    <td class="markdownTableBodyNone"> 0 (XOSCEN_RCLK) = external active crystal oscillator. 1 (XOSCEN_CRYSTAL) = passive crystal oscillator; \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> FUNC \ilinebr </td>    <td class="markdownTableBodyNone"> defaultFunction = 0 = FM Receive; 1 = AM (LW/MW/SW) Receiver \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> OPMODE \ilinebr </td>    <td class="markdownTableBodyNone"> SI473X_ANALOG_AUDIO (B00000101) or SI473X_DIGITAL_AUDIO (B00001011) \ilinebr </td>  </tr></table>

ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
           Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

@see setMaxDelaySetFrequency()
@see MAX_DELAY_AFTER_POWERUP
@see XOSCEN_CRYSTAL
@see XOSCEN_RCLK
@see  SI4735::setPowerUp()
@see  Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64, 129
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga54a3a0f412aa6318df0046d478bd134f';
        sec-mem-ref-line = '2850';
        sec-mem-ref-name = 'setHardwareAudioMute';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga412f51386c47a17cf04fd0a3c3078726';
        sec-mem-ref-line = '444';
        sec-mem-ref-name = 'analogPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga753390952a1f2c2a98343979f1f3daa0';
        sec-mem-ref-line = '765';
        sec-mem-ref-name = 'setAM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '790';
        sec-mem-ref-name = 'setFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga505445484e643ae95a2a9300eac9c4c1';
        sec-mem-ref-line = '3632';
        sec-mem-ref-name = 'setNBFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e907ddf560a0c8286fa55768701b3da';
        sec-mem-ref-line = '2950';
        sec-mem-ref-name = 'setSSB';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '579';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga412f51386c47a17cf04fd0a3c3078726';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'analogPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1220';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
You have to call setPowerUp method before.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function is still available only for legacy reasons.
         If you are using this function, please, replace it by radioPowerup().
 \xrefitem deprecated 1.@see  SI4735::setPowerUp()
@see  Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64, 129
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1gaa554b3390fb6c5a4d6661b96afae73ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'powerDown';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1221';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Moves the device from powerup to powerdown mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 452 

\ilinebr\ilinebr After Power Down command, only the Power Up command is accepted.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 67, 132
@see radioPowerUp()
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga54a3a0f412aa6318df0046d478bd134f';
        sec-mem-ref-line = '2850';
        sec-mem-ref-name = 'setHardwareAudioMute';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3103';
        sec-mem-ref-name = 'queryLibraryId';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga753390952a1f2c2a98343979f1f3daa0';
        sec-mem-ref-line = '765';
        sec-mem-ref-name = 'setAM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '790';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga63d205f2d3169ba877a2bd2ee28d224f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'freq';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1223';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the frequency to the corrent function of the Si4735 (FM, AM or SSB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 677 

\ilinebr\ilinebr You have to call setup or setPowerUp before call setFrequency.

@see maxDelaySetFrequency()
@see MAX_DELAY_AFTER_SET_FREQUENCY
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 70, 135
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 13

@param uint16_t  freq is the frequency to change. For example, FM => 10390 = 103.9 MHz; AM => 810 = 810 kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga5c0f4036a7fbbd11a26f1f6f4579d3cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatus';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'INTACK';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'CANCEL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1225';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current status  of the Si4735 (AM or FM)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 949 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 (FM) and 139 (AM)

@param uint8_t INTACK Seek/Tune Interrupt Clear. If set, clears the seek/tune complete interrupt status indicator;
@param uint8_t CANCEL Cancel seek. If set, aborts a seek currently in progress;
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7e88bb573604d465536c13554d5c61f8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1227';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current frequency of the Si4735 (AM or FM)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 928 

\ilinebr\ilinebr The method status do it an more. See getStatus below.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 (FM) and 139 (AM)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga3cf856c44fcfffb3d81b22b1d09b881f';
        sec-mem-ref-line = '2770';
        sec-mem-ref-name = 'getStatus';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gad194137a6a712a599e3c26e5b6357594';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getSignalQualityInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1241';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Signal Quality Interrupt status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
STATUS RESPONSE
Set of methods to get current status information. Call them after getStatus or getFrequency or seekStation
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 63

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 63
@return RDSINT status
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga97dc44d9927ea58730a18fb6baa6867f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRadioDataSystemInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1252';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Radio Data System (RDS) Interrupt status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 63
@return RDSINT status
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga2cc659bddc5efc7695f2a6031c2edd4b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getTuneCompleteTriggered';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1263';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Tune Complete status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Seek/Tune Complete Interrupt; 1 = Tune complete has been triggered.
@return STCINT status
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga69723840497ed693d6f9a4e840ab07c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusError';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1274';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Status Error.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the Error flag (true or false) of status of the least Tune or Seek
@return Error flag
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gafcb38f53b6eb71cadcefa0bb472ca943';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusCTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1285';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Error flag Clear to Send.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1281 

@return CTS
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gab8a51de592fd40fdd872039b3c70716f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getACFIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1293';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the AFC rails (AFC Rail Indicator).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1289 

@return true
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga19e96565a2dec7ec68469f45c8d3e084';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getBandLimit';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1306';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if a seek hit the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1300 

\ilinebr\ilinebr (WRAP = 0 in FM_START_SEEK) or wrapped to the original frequency(WRAP = 1).

@return BLTF
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gafb19da8a05320d7f38cca8325725edfd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusValid';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1320';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the channel status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1313 

\ilinebr\ilinebr Returns true if the channel is currently valid as determined by the seek/tune properties (0x1403, 0x1404, 0x1108)

@return true
@return false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaeeefd12b49dbc764e0f45fe208441482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getReceivedSignalStrengthIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1331';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the value of  Received Signal Strength Indicator (dBÎ¼V).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1327 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gac0bd4daaa321ef8956dca4d1e4e5cd3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusSNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1344';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the SNR metric when tune is complete (dB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1338 

\ilinebr\ilinebr Returns the value  of the SNR metric when tune is complete (dB).

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga0f9b5438a6f92c8f2e538ee640f353ab';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusMULT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1357';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Status the M U L T.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1351 

\ilinebr\ilinebr Returns the value containing the multipath metric when tune is complete.

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga5a10cea82279f48a13d40298cf79e6ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getAntennaTuningCapacitor';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1371';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Antenna Tuning Capacitor value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns the current antenna tuning capacitor value. The tuning capacitance is 95 fF x READANTCAP + 7 pF.
\ilinebr\ilinebr ON AM or SSB mode, the MULT attribute stores the high byte of READANTCAP and the attribute READANTCAP by itself stores the low byte.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 74,74, 140 and 141.
@return uint8_t capacitance
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaaae187575b9868ff427c063c3a6cca2a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getAutomaticGainControl';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1385';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries Automatic Gain Control STATUS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 997 

\ilinebr\ilinebr After call this method, you can call isAgcEnabled to know the AGC status and getAgcGainIndex to know the gain index value.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 80; for AM page 142.
@see AN332 REV 0.8 Universal Programming Guide Amendment for SI4735-D60 SSB and NBFM patches; page 18.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga6e1e0e48d71e09debb07fc6dbe884829';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmMaxGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1391';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Avc Am Max Gain to maximum gain (0x7800)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gaf2f9f04bd7f05a882c39621db162c027';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmMinGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1401';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Avc Am Max Gain to minimal gain (0x1000)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga4333e267458eb9b00a9319f81255c0f1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmDefaultGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1411';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Avc Am Max Gain to default gain (0x2A80)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga611982795f2e45990c195c3ff09adb96';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmMaxGain';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gain';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
90
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1417';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the maximum gain for automatic volume control.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets the gain for automatic volume control.

\iline 1086 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 152
@see setAvcAmMaxGain()

@param uint8_t gain  Select a value between 12 and 90.  Defaul value 48dB.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga27dd7dfd46583eb5be91cfc9461807ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentAvcAmMaxGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1425';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the current Avc Am Max Gain.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1421 

@return uint8_t Current AVC gain index value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga05bbe1546d61d7ca3591824445084e70';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmSoftMuteMaxAttenuation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'smattn';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1441';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Am Soft Mute Max Attenuation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1432 

\ilinebr\ilinebr This function can be useful to disable Soft Mute. The value 0 disable soft mute.
\ilinebr\ilinebr Specified in units of dB. Default maximum attenuation is 8 dB. It works for AM and SSB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 158.

@param smattn Maximum attenuation to apply when in soft mute
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga7f9f0eb9946d629e2e6d7e7901af86b9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbSoftMuteMaxAttenuation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'smattn';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1455';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SSB Soft Mute Max Attenuation object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1448 

\ilinebr\ilinebr Sets maximum attenuation during soft mute (dB). Set to 0 to disable soft mute.
\ilinebr\ilinebr Specified in units of dB. Default maximum attenuation is 8 dB.
\ilinebr\ilinebr You can use setAmSoftMuteMaxAttenuation instead. Same AM property values.
@param smattn Maximum attenuation to apply when in soft mute.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gaa42de6f58ebc0d9bc2693477b5fe7734';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbIfAgcReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
140
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1467';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the number of milliseconds the low IF peak detector.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1462 

\ilinebr\ilinebr Sets the number of milliseconds the low IF peak detector must not be exceeded before increasing the gain. Default value is 140 (approximately 40 dB / s).
@param param number of milliseconds ( from 4 to 248; step 4); default value 0x008C (140).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga2852abc7a2469362f1c1fe64758693a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbIfAgcAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1479';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the IF AGC attack rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1474 

\ilinebr\ilinebr Large values provide slower attack, and smaller values provide faster attack
@param param number of milliseconds ( from 4 to 248; step 4); default value 4.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaea08b7e553212cbe01bf6f4ec9e02de7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isAgcEnabled';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1490';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if the AGC is enabled.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1486 

@return true if the AGC is enabled
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4eceaf5745e87fcca6cf31c04c5635bd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getAgcGainIndex';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1501';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current AGC gain index.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1497 

@return uint8_t The current AGC gain index.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga27c22f5671ce3229e925e5fbe93ba0a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAutomaticGainControl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AGCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AGCIDX';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1506';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Automatic Gain Control setup.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1040 

\ilinebr\ilinebr If FM, overrides AGC setting by disabling the AGC and forcing the LNA to have a certain gain that ranges between 0
(minimum attenuation) and 26 (maximum attenuation).
\ilinebr\ilinebr If AM/SSB, Overrides the AGC setting by disabling the AGC and forcing the gain index that ranges between 0
(minimum attenuation) and 37+ATTN_BACKUP (maximum attenuation).

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 81; for AM page 143

@param uint8_t AGCDIS This param selects whether the AGC is enabled or disabled (0 = AGC enabled; 1 = AGC disabled);
@param uint8_t AGCIDX AGC Index (0 = Minimum attenuation (max gain); 1 â 36 = Intermediate attenuation);
               if >greater than 36 - Maximum attenuation (min gain) ).
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga2389f02cd293155c245c992607b57834';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAGC';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AGCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AGCIDX';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1525';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Automatic Gain Control setup (alternative name for setAutomaticGainControl )
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1511 

\ilinebr\ilinebr If FM, overrides AGC setting by disabling the AGC and forcing the LNA to have a certain gain that ranges between 0
(minimum attenuation) and 26 (maximum attenuation).
\ilinebr\ilinebr If AM/SSB, Overrides the AGC setting by disabling the AGC and forcing the gain index that ranges between 0
(minimum attenuation) and 37+ATTN_BACKUP (maximum attenuation).

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 81; for AM page 143
@see setAutomaticGainControl

@param uint8_t AGCDIS This param selects whether the AGC is enabled or disabled (0 = AGC enabled; 1 = AGC disabled);
@param uint8_t AGCIDX AGC Index (0 = Minimum attenuation (max gain); 1 â 36 = Intermediate attenuation);
               if >greater than 36 - Maximum attenuation (min gain) ).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga2da03a7257b7ca821f984bfa7fef97fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbAgcOverrite';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SSBAGCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SSBAGCNDX';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'reserved';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1527';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Automatic Gain Control setup.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Overrides the SSB AGC setting by disabling the AGC and forcing the gain index that ranges between 0 (minimum attenuation) and 37+ATTN_BACKUP (maximum attenuation).

@param uint8_t SSBAGCDIS This param selects whether the AGC is enabled or disabled (0 = AGC enabled; 1 = AGC disabled);
@param uint8_t SSBAGCNDX If 1, this byte forces the AGC gain index. if 0,  Minimum attenuation (max gain)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gabf59183da13c72384093fc238c3114cf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentReceivedSignalQuality';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'INTACK';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1529';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries the status of the Received Signal Quality (RSQ) of the current channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1104 

\ilinebr\ilinebr This method sould be called berore call getCurrentRSSI(), getCurrentSNR() etc.
Command FM_RSQ_STATUS

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 75 and 141

@param INTACK Interrupt Acknowledge.
       0 = Interrupt status preserved;
       1 = Clears RSQINT, BLENDINT, SNRHINT, SNRLINT, RSSIHINT, RSSILINT, MULTHINT, MULTLINT.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7393fa4f9d7811c8d0c0f48283ef6435';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentReceivedSignalQuality';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1530';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries the status of the Received Signal Quality (RSQ) of the current channel (FM_RSQ_STATUS)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1159 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 75 and 141

@param INTACK Interrupt Acknowledge.
       0 = Interrupt status preserved;
       1 = Clears RSQINT, BLENDINT, SNRHINT, SNRLINT, RSSIHINT, RSSILINT, MULTHINT, MULTLINT.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7393fa4f9d7811c8d0c0f48283ef6435';
        sec-mem-ref-line = '1167';
        sec-mem-ref-name = 'getCurrentReceivedSignalQuality';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7393fa4f9d7811c8d0c0f48283ef6435';
        sec-mem-ref-line = '1167';
        sec-mem-ref-name = 'getCurrentReceivedSignalQuality';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4f5abf562ec00767a3b84f74eba5ac4d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentRSSI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1540';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the current receive signal strength (0â127 dBÎ¼V)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1536 

@return uint8_t a value between 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gadb3fe55583dafeac7439a303b637d162';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1551';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current SNR metric (0â127 dB).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1547 

@return uint8_t SNR value in dB (0-127)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga0c9ae82012cdc97c4080b84e37fa1820';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentRssiDetectLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1562';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if RSSI detected is LOW.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1558 

@return true if RSSI is low
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gadf11a66236392ca107b5d52a8747f838';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentRssiDetectHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1573';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if RSSI detected is high.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1569 

@return true if RSSI detected is high
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga1296592571c85b89ed59a4ee2324bd52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSnrDetectLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1584';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if SNR detect is low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1580 

@return true if SNR detected is low
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaec3c71a3252dd6660e5bceebc0d1f988';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSnrDetectHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1595';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if SNR detect is high.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1591 

@return true  if SNR detect is high
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga5ce1abf8c9d53c027f6b0870efedda1b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentValidChannel';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1606';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if the current channel is valid.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1602 

@return true if the current channel is valid
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaffe5cee9daf44677802a94f96d893c94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentAfcRailIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1617';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AFC Rail Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1613 

@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga76e8485292878c1294e5910601f4575f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSoftMuteIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1630';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Soft Mute Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1624 

\ilinebr\ilinebr Indicates soft mute is engaged.

@return true  if soft mute indicates is engaged.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gacaafab62dd411dc9b79f9fb96e8c8832';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentStereoBlend';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1643';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the value of the amount of stereo blend in % (100 = full stereo, 0 = full mono).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1639 

@return uint8_t value (0 to 100)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga127fa3d2f9b7d57169bbef95703fb4c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentPilot';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1656';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks the current pilot.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1650 

\ilinebr\ilinebr Indicates stereo pilot presence.

@return true if stereo pilot presence has detected
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6d521bb5c7ef7811e57c7128cb2106b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentMultipath';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1669';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current Multipath.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1663 

\ilinebr\ilinebr Contains the current multipath metric. (0 = no multipath; 100 = full multipath)

@return uint8_t value (0 to 100)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga2b3bfeca3b545f5741b1ed70a1dba077';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSignedFrequencyOffset';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1680';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Signed frequency offset (kHz).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1676 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gad194a5c915620c6a1b8b3d6d7ed645d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentMultipathDetectLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1692';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Multipath Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1687 

@return true
@return false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga82d0865cf348deb0c9f81a2f12222fb0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentMultipathDetectHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1704';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Current Multipath Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1699 

@return true
@return false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga16107a2f2e51cce5a7e2b1b303425118';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentBlendDetectInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1716';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Current Blend Detect Interrupt.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1711 

@return true
@return false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gab26fbd99452daaf18875ff1c3c35d081';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwarePN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1733';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware Part Number.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1729 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gac2f451cb7320b66d8e08698dcacd50d0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareFWMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1744';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware F W M A J O R.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1740 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga74b68fcd5718520fc0683977dfc18fc8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareFWMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1755';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware F W M I N O R.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1751 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga58b99a8d5ec2199cb5f2105675aa7a56';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwarePATCHH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1766';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware P A T C H  HIGH.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1762 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gac10b3cd3875985e2c129fea14e2bc47a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwarePATCHL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1777';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware P A T C H  LOW.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1773 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gab57870d69969e73265e9cffe2a73d868';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareCMPMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1788';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Firmware C M P M A J O R object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1784 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga883645d266a612ce07d71fdb2cd81e5f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareCMPMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1799';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 -  Returns the Component Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns the Component Minor Revision (ASCII) (RESP7)

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gacd363d9111e4a57cf2e1167634bc1b5f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareCHIPREV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1810';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP8 -  Returns the Chip Revision (ASCII)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1806 

@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga3b7543657dfd36da962267bb8692b796';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolume';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'volume';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1815';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets volume level (0  to 63)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1826 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 62, 123, 170, 173 and 204

@param uint8_t volume (domain: 0 - 63)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gacf79be50a01fe91abd498e5d42d83317';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getVolume';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1816';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current volume level.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1858 

@see setVolume()

@return volume (domain: 0 - 63)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga23d49ab35895b76e0898405fac086c09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'volumeDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1817';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set sound volume level Down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1886 

@see setVolume()
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga11be65552224d4ad3e41d83a5ff1172b';
        sec-mem-ref-line = '1841';
        sec-mem-ref-name = 'setVolumeDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga5e3e8cf04ca99c6be2dbe15d72b4efa3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'volumeUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1818';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set sound volume level Up.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1872 

@see setVolume()
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gae0e23a0a2cbc24ee16b03866ee587102';
        sec-mem-ref-line = '1834';
        sec-mem-ref-name = 'setVolumeUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga430b86ccfd4d6c89da9202a538e0cfc9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentVolume';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1826';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Current Volume.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns the current volume level.
@return uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gae0e23a0a2cbc24ee16b03866ee587102';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolumeUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1834';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Volume Up.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Same volumeUp()
@see volumeUp
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5e3e8cf04ca99c6be2dbe15d72b4efa3';
        sec-mem-ref-line = '1876';
        sec-mem-ref-name = 'volumeUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga11be65552224d4ad3e41d83a5ff1172b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolumeDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1841';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Volume Down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Same volumeDown()
@return voi
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga23d49ab35895b76e0898405fac086c09';
        sec-mem-ref-line = '1890';
        sec-mem-ref-name = 'volumeDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gac6a538cefcb4beb5bd77a721f8dab019';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAudioMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'audioMode';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1861';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Audio Mode. See table below.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 If you want to change the audio mode, call this function before call setAM(), setFM() or setSSB().
\ilinebr\ilinebr Sets the Si47XX device to use ANALOG or DIGITAL audio output. The table below shows the valid values.
\ilinebr\ilinebr This function will only take effect after calling setAM(), setFM() or setSSB().


<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Macro \ilinebr </th>    <th class="markdownTableHeadNone"> Value (Binary) \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> SI473X_ANALOG_AUDIO \ilinebr </td>    <td class="markdownTableBodyNone"> 0b00000101 \ilinebr </td>    <td class="markdownTableBodyNone"> Analog Audio Inputs \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> SI473X_DIGITAL_AUDIO1 \ilinebr </td>    <td class="markdownTableBodyNone"> 0b00001011 \ilinebr </td>    <td class="markdownTableBodyNone"> Digital audio output (DCLK, LOUT/DFS, ROUT/DIO) \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> SI473X_DIGITAL_AUDIO2 \ilinebr </td>    <td class="markdownTableBodyNone"> 0b10110000 \ilinebr </td>    <td class="markdownTableBodyNone"> Digital audio outputs (DCLK, DFS, DIO) \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> SI473X_DIGITAL_AUDIO3 \ilinebr </td>    <td class="markdownTableBodyNone"> 0b10110101 \ilinebr </td>    <td class="markdownTableBodyNone"> Analog and digital audio outputs (LOUT/ROUT and DCLK, DFS,DIO) \ilinebr </td>  </tr></table>

@see setAM(), setFM(), setSSB().
@param audioMode One of the values options above
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga63302217aaa006f6683dacd410b48e40';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmDelayNB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1873';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the delay before applying impulse blanking.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Delay in micro-seconds before applying impulse blanking to the original samples. Default value is 172.

@param value Delay in micro-seconds
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gaea652d358b4b586b6d5964ceb8eb7c81';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'digitalOutputFormat';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OSIZE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OMONO';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OMODE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OFALL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1878';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures the digital audio output format.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1773 

\ilinebr\ilinebr Options: DCLK edge, data format, force mono, and sample precision.

ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
           Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

@see Si47XX PROGRAMINGGUIDE; AN332 (REV 1.0); page 195.
@see Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; AN383; rev 0.8; page 6;

@param uint8_t OSIZE Dgital Output Audio Sample Precision (0=16 bits, 1=20 bits, 2=24 bits, 3=8bits).
@param uint8_t OMONO Digital Output Mono Mode (0=Use mono/stereo blend ).
@param uint8_t OMODE Digital Output Mode (0=I2S, 6 = Left-justified, 8 = MSB at second DCLK after DFS pulse, 12 = MSB at first DCLK after DFS pulse).
@param uint8_t OFALL Digital Output DCLK Edge (0 = use DCLK rising edge, 1 = use DCLK falling edge)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga1a404ca11fb32b457be2d7cfe484dd03';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'digitalOutputSampleRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DOSR';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1879';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enables digital audio output and configures digital audio output sample rate in samples per second (sps).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 When DOSR[15:0] is 0, digital audio output is disabled. The over-sampling rate must be set in order to
\ilinebr\ilinebr satisfy a minimum DCLK of 1 MHz. To enable digital audio output, program DOSR[15:0] with the sample rate
\ilinebr\ilinebr in samples per second. The system controller must establish DCLK and DFS prior to enabling the digital
\ilinebr\ilinebr audio output else the device will not respond and will require reset. The sample rate must be set to 0
\ilinebr\ilinebr before the DCLK/DFS is removed. FM_TUNE_FREQ command must be sent after the POWER_UP command to start
\ilinebr\ilinebr the internal clocking before setting this property.

ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
           Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

@see Si47XX PROGRAMINGGUIDE; AN332 (REV 1.0); page 196.
@see Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES; AN383; rev 0.8; page 6

@param uint16_t DOSR Digital Output Sample Rate(32â48 ksps .0 to disable digital audio output).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga12d4e173d096b1568e4209a63534d4f6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAudioMute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'off';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1881';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the audio on or off.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Useful to mute the audio output of the SI47XX device. This function does not work to reduce the pop in the speaker at start the system up.
\ilinebr\ilinebr If you want to remove the loud click or pop in the speaker at start, power down and power up commands, use setHardwareAudioMute with a external mute circuit.

@see See Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 62, 123, 171
@see setHardwareAudioMute

@param value if true, mute the audio; if false unmute the audio.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga753390952a1f2c2a98343979f1f3daa0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1883';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to AM function. It means: LW MW and SW.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 1.

\iline 759 

\ilinebr\ilinebr Define the band range you want to use for the AM mode.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 129.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '459';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga43c5ea36995a3897820e0170d94c81f4';
        sec-mem-ref-line = '820';
        sec-mem-ref-name = 'setAM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gacd89e7b8adefcbc4e89f802acb915906';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1884';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to FM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 2.

\iline 786 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 64.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae4683e9a9fc7a633305b18dae54fbd83';
        sec-mem-ref-line = '1755';
        sec-mem-ref-name = 'disableFmDebug';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '459';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga673bc4b17d564bb6e7f3e9a61d35fbb3';
        sec-mem-ref-line = '858';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga43c5ea36995a3897820e0170d94c81f4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'intialFreq';
        sec-mem-param-defname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1885';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to AM (LW/MW/SW) function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 804 

\ilinebr\ilinebr The example below sets the band from 550kHz to 1750kHz on AM mode. The band will start on 810kHz and step is 10kHz.

@code 
si4735.setAM(520, 1750, 810, 10);
@endcode

@see setFM()
@see setSSB()

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency
@param step step used to go to the next channel
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga753390952a1f2c2a98343979f1f3daa0';
        sec-mem-ref-line = '765';
        sec-mem-ref-name = 'setAM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga673bc4b17d564bb6e7f3e9a61d35fbb3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1886';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to FM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 838 

\ilinebr\ilinebr Defines the band range you want to use for the FM mode.

\ilinebr\ilinebr The example below sets the band from 64MHz to 108MHzkHz on FM mode. The band will start on 103.9MHz and step is 100kHz.
On FM mode, the step 10 means 100kHz. If you want a 1MHz step, use 100.

@code 
si4735.setFM(6400, 10800, 10390, 10);
@endcode

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 70
@see setFM()
@see setFrequencyStep()

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency (default frequency)
@param step step used to go to the next channel
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '790';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga305b3c87d5151d3fede17d725c04d95a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFMDeEmphasis';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1895';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the FM Receive de-emphasis to 50 or 75 Î¼s.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 valid parameters are 1 = 50 Î¼s. Usedin Europe, Australia, Japan; 2 = 75 Î¼s. Used in USA (default)

@param parameter 1 or 2 (default 1 - USA)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gac5459a1eaf33567d2990e15f314f0ce0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmSoftMuteMaxAttenuation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'smattn';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1911';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Fm Soft Mute Max Attenuation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1902 

\ilinebr\ilinebr This function can be useful to disable Soft Mute on FM mode. The value 0 disable soft mute.
\ilinebr\ilinebr Specified in units of dB. Default maximum attenuation is 8 dB. It works for AM and SSB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 97.

@param smattn Maximum attenuation to apply when in soft mute
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a2cf6f7649225c8233904ddce0c003245';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1921';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Threshold.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Sets the threshold for detecting impulses in dB above the noise floor. The CTS bit (and optional interrupt) is set when it is safe to send the next command.
@param parameter (from 0 to 90. default is 10)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1acdbbbd538024585f3feb71f729ed89c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlank';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_rate';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
64
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_interval';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
55
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_irr_filter';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
300
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1938';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Sets Noise blanking rate in 100 Hz units
\ilinebr\ilinebr Sets the Interval in micro-seconds that original samples are replaced by sample-hold clean samples.
\ilinebr\ilinebr Sets the bandwidth of the noise floor estimator.

\ilinebr\ilinebr ATTENTION: It works on SI474X. It may not work on SI473X devices.

@param nb_rate Noise blanking rate in 100 Hz units. Default value is 64.
@param nb_interval Interval in micro-seconds that original samples are replaced by interpolated clean samples. Default value is 55 Î¼s.
@param nb_irr_filter Sets the bandwidth of the noise floor estimator. Default value is 300.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a08ece9c3ffa2b1fe116eb2cf92ecc77c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankInterval';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1950';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Interval.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Interval in micro-seconds that original samples are replaced by interpolated clean samples.
@param parameter ( from 8 to 48. default value is 24)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a5eb6db8b26000b6698ee2bee179d8738';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1961';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Noise blanking rate in 100 Hz units.

@param parameter ( from 1 to 64. default value is 64)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a850c0499b315196b8b141317d02c984c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankDelay';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1971';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Delay.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Delay in micro-seconds before applying impulse blanking to the original samples.
@param parameter ( from 125 to 219. default value is 170)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a8dbb2b88feefc4051be02ed7988f6f3a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlank_IIR_Filter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1981';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the FmNoiseBlank IIR Filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Sets the bandwidth of the noise floor estimator.
@param parameter (from 300 to 1600. default value is 300)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6451f3fdb5dc6cc11b99d9258da3ff25';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMDeEmphasis';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1993';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AM Receive de-emphasis to 50 or disable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 valid parameters are 1 = 50 Î¼s. Usedin urope, Australia, Japan; 2 = 75 Î¼s. Used in USA (default)

@param parameter 1 = enable or 0 = disable
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga1868c4cdd8a5fa9e846cd637f97f082e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteSlop';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2009';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AM attenuation slope during soft mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Configures attenuation slope during soft mute in dB attenuation per dB SNR below the soft mute SNR threshold.
\ilinebr\ilinebr Soft mute attenuation is the minimum of SMSLOPEx(SMTHRâSNR) and SMATTN.
\ilinebr\ilinebr The default slope is 1 dB/dB for AMRX component 5.0 or later and 2 dB/dB for AMRX component 3.0 or earlier.

@see setAmSoftMuteMaxAttenuation
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0);
@param parameter  the valid values are 1â5 (default 1).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga48f023f4073dcaad41bfa4ef3cee7a4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2023';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the attack and decay rates when entering or leaving soft mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The value specified is multiplied by 4.35 dB/s to come up with the actual attack rate
\ilinebr\ilinebr The default rate is 278 dB/s.
@see setAmSoftMuteMaxAttenuation
@see Si47XX PRORAMMING GUIDE; AN332 (REV 1.0);
@param parameter  The valid values are 1-255  ( Default is ~64 - [64 x 4.35 = 278] )
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga64928266b152a979104491398a6058d4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteSnrThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2037';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SNR threshold to engage soft mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Whenever the SNR for a tuned frequency drops below this threshold the AM reception will go in soft mute,
\ilinebr\ilinebr provided soft mute max attenuation property is non-zero. The default value is 8dB
@see setAmSoftMuteMxAttenuation
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0);
@param parameter  0-63 (default is 8)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga39c2f0b6a140fe46638b950faba5afaa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2050';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the soft mute release rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Smaller values provide slower release and larger values provide faster release. The default is 8192 (approximately 8000 dB/s).
@see setAmSoftMuteMxAttenuation
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0);
@param parameter  1â32767
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaa4d5fa1c73073d5cfc47838d6b832ba5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2063';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the soft mute attack rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Smaller values provide slower attack and larger values provide faster attack.
@see setAmSoftMuteMxAttenuation
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0);
@param parameter  1â32767 (The default is 8192 (approximately 8000 dB/s)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga726d1ce5273fe294e8896f841d6e6ba0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmAgcAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2076';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC attack rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Large values provide slower attack, and smaller values provide faster attack..
@see setAmAgcAttackRate
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.2); page 167
@param parameter Range: 4â248 (The default is 0x04)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gab86a3d99cff06dc0c5a0f0d6db9ede7b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmAgcReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2089';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC release rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Larger values provide slower release, and smaller values provide faster release.
@see setAmAgcReleaseRate
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.2); page 168
@param parameter Range: 4â248 (The default is 0x8C)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga211bb7fb7b339e005e8a0ae2e2813b79';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbAgcAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2102';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC attack rate on SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Large values provide slower attack, and smaller values provide faster attack..
@see setSsbAgcAttackRate
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 29
@param parameter Range: 4â248 (The default is 0x04)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga65ae2ed5be90932da9b26073f87a8bda';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbAgcReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2115';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC Release rate on SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Larger values provide slower release, and smaller values provide faster release.
@see setSsbAgcAttackRate
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 29
@param parameter Range: 4â248 (The default is 0x18)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga46d1dae32aae4da7ad9fabfdb36440cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMFrontEndAgcControl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'MIN_GAIN_INDEX';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ATTN_BACKUP';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2134';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Adjusts the AM AGC for external front-end attenuator and external front-end cascode LNA.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This property contains two fields: MIN_GAIN_INDEX and ATTN_BACKUP.
\ilinebr\ilinebr MIN_GAIN_INDEX impacts sensitivity and U/D performance. Lower values improve sensitivity, but degrade
\ilinebr\ilinebr far away blocker U/D performance.
\ilinebr\ilinebr Higher values degrade sensitivity, but improve U/D. With MIN_GAIN_INDEX=19 and Si4743 EVB reference
\ilinebr\ilinebr design, the Si474x provides sensitivity of 28dBuV typical and U/D exceeding 55dB on far away blockers.
\ilinebr\ilinebr With MIN_GAIN_INDEX=24, the Si474x provides sensitivity of 34dBuV typical and U/D approaching 70dB on
\ilinebr\ilinebr far away blockers.
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0); page 168
@param MIN_GAIN_INDEX Values below 19 have minimal sensitivity improvement; Higher values degrade sensitivity, but improve U/D.
@param ATTN_BACKUP ???
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a20b9ef7d2f0fba55eaf20f48781846b5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmNoiseBlank';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_rate';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
64
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_interval';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
55
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_irr_filter';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
300
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2158';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Am Noise Blank.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2145 

\ilinebr\ilinebr Sets Noise blanking rate in 100 Hz units
\ilinebr\ilinebr Sets the Interval in micro-seconds that original samples are replaced by sample-hold clean samples.
\ilinebr\ilinebr Sets the bandwidth of the noise floor estimator.

\ilinebr\ilinebr ATTENTION: It works on SI474X. It may not work on SI473X devices.

@param nb_rate Noise blanking rate in 100 Hz units. Default value is 64.
@param nb_interval Interval in micro-seconds that original samples are replaced by interpolated clean samples. Default value is 55 Î¼s.
@param nb_irr_filter Sets the bandwidth of the noise floor estimator. Default value is 300.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1ae7ca2ffa6ad68ca69e4f35a3c40bbc3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isCurrentTuneFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2170';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4714f08989f020110620781ae968b01b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isCurrentTuneAM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2182';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the current function is AM (AM_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2178 

@return true if the current function is AM (AM_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6913873c511adb357fa7c02f2a8386d7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isCurrentTuneSSB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2194';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the current function is SSB (SSB_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2190 

@return true if the current function is SSB (SSB_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga8755743a36d2d4662c8db918d02ee4e1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setBandwidth';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AMCHFLT';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AMPLFLT';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2199';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects the bandwidth of the channel filter for AM reception.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 878 

\ilinebr\ilinebr The choices are 6, 4, 3, 2, 2.5, 1.8, or 1 (kHz). The default bandwidth is 2 kHz. It works only in AM / SSB (LW/MW/SW)

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 125, 151, 277, 181.

@param AMCHFLT the choices are:   0 = 6 kHz Bandwidth
                                  1 = 4 kHz Bandwidth
                                  2 = 3 kHz Bandwidth
                                  3 = 2 kHz Bandwidth
                                  4 = 1 kHz Bandwidth
                                  5 = 1.8 kHz Bandwidth
                                  6 = 2.5 kHz Bandwidth, gradual roll off
                                  7â15 = Reserved (Do not use).
@param AMPLFLT Enables the AM Power Line Noise Rejection Filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1af28a854a8997ba7a195b6365b20fda95';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBandwidth';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'filter_value';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2214';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Bandwith on FM mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Selects bandwidth of channel filter applied at the demodulation stage. Default is automatic which means the device automatically selects proper channel filter. <BR>
\ilinebr\ilinebr | Filter  | Description |
\ilinebr\ilinebr | ----&mdash; | ----------&mdash;|
\ilinebr\ilinebr |    0    | Automatically select proper channel filter (Default) |
\ilinebr\ilinebr |    1    | Force wide (110 kHz) channel filter |
\ilinebr\ilinebr |    2    | Force narrow (84 kHz) channel filter |
\ilinebr\ilinebr |    3    | Force narrower (60 kHz) channel filter |
\ilinebr\ilinebr |    4    | Force narrowest (40 kHz) channel filter |

@param filter_value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7bb16741b03d8f1fb14348dce14c1a6b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getTuneFrequecyFast';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2225';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the FAST tuning status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2221 

@retrn uint8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga51d816112d974f10306d9d001667395a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setTuneFrequencyFast';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'FAST';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2237';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the FAST Tuning.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 If set, excutes fast and invalidated tune. Theune status will not be accurate

@param FAST
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga96d83cfe35e5fb5db4719d604871e8cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getTuneFrequecyFreeze';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2248';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the FREEZE status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2244 

@return unt8_t
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6a322615f2d80290ce9f5b2297c36af3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setTuneFrequencyFreze';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'FREEZE';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2260';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Freeze Metrics During Alternate Frequency Jum.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Only on FM mode

@param FREEZE
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaaceadaaf0835e3db124d1b36f2aebd3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setTuneFrequencyAntennaCapacitor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'capacitor';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2265';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects the tuning capacitor value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 630 

\ilinebr\ilinebr On FM mode, the Antenna Tuning Capacitor is valid only when using TXO/LPI pin as the antenna input.
This selects the value of the antenna tuning capacitor manually, or automatically if set to zero.
The valid range is 0 to 191. Automatic capacitor tuning is recommended.
For example, if the varactor is set to a value of 5 manually, when read back the value will be 1.
\ilinebr\ilinebr on AM mode, If the value is set to anything other than 0, the tuning capacitance is manually set as 95 fF x ANTCAP + 7 pF.
ANTCAP manual range is 1â6143. Automatic capacitor tuning is recommended. In SW mode, ANTCAPH[15:8] (high byte) needs to be set to 0 and ANTCAPL[7:0] (low byte) needs to be set to 1.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 71 and 136

@param capacitor If zero, the tuning capacitor value is selected automatically.
                 If the value is set to anything other than 0:
                 AM - the tuning capacitance is manually set as 95 fF x ANTCAP + 7 pF.
                      ANTCAP manual range is 1â6143;
                 FM - the valid range is 0 to 191.
                 According to Silicon Labs, automatic capacitor tuning is recommended (value 0).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gac0fcfd64dcf30b11d4dc219d9f7fc5d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'frequencyUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2267';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Increments the current frequency on current band/function by using the current step.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 722 

@see setFrequencyStep()
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga7940c833a294a018e4f5a7c7b7d8443d';
        sec-mem-ref-line = '2276';
        sec-mem-ref-name = 'setFrequencyUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga93fff524a6f900ac91eb1222ce73f9ba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'frequencyDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2268';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Decrements the current frequency on current band/function by using the current step.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 739 

@see setFrequencyStep()
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga9da28931ba73cad3e27be4bb610c5ddf';
        sec-mem-ref-line = '2284';
        sec-mem-ref-name = 'setFrequencyDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7940c833a294a018e4f5a7c7b7d8443d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2276';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the FrequencyUp.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Same frequencyUp
@see frequencyUp
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac0fcfd64dcf30b11d4dc219d9f7fc5d9';
        sec-mem-ref-line = '726';
        sec-mem-ref-name = 'frequencyUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga9da28931ba73cad3e27be4bb610c5ddf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2284';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Frequency Down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 same frequencyDown
@see frequencyDown
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga93fff524a6f900ac91eb1222ce73f9ba';
        sec-mem-ref-line = '743';
        sec-mem-ref-name = 'frequencyDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga2fbc7e2187a7c645879623100dbc8502';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmware';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2286';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets firmware information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The firmware information will be stored in firmwareInfo member variable

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 66, 131
@see firmwareInfo
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '579';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga3280b98b8331f00b4d0158ef1b076533';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SEEKUP';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'WRAP';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2288';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Look for a station (Automatic tune)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Starts a seek process for a channel that meets the RSSI and SNR criteria for AM.
\ilinebr\ilinebr <strong>This function does not work on SSB mode</strong>.
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55, 72, 125 and 137

@param SEEKUP Seek Up/Down. Determines the direction of the search, either UP = 1, or DOWN = 0.
@param Wrap/Halt. Determines whether the seek should Wrap = 1, or Halt = 0 when it hits the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaed67e2cee4e20551f3d522eea45fb7f5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMaxSeekTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'time_in_ms';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2300';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the maximum time in milliseconds for seeking. The default value is 8000ms (8s).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Depending on the bandwidth, your reception conditions or step configuration, the seek process can take a long time.
\ilinebr\ilinebr This function sets a time limit for seeking process and back the control to the system if the time runs out.

@addindex Seek

@param time_in_ms time in milliseconds.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ad656f75a444c174797f6e7a8bf6e6ee2';
        sec-mem-ref-line = '1085';
        sec-mem-ref-name = 'maxSeekTime';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaad5211e3fff28141473442f59008e415';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2313';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search for the next station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Seek a station up. Stop when a station is found or the frequency has reached the upper limit
@see seekStation, seekStationProgress, setSeekAmLimits setSeekFmLimits
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 124, 137, 139, 278
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga1eeaa09670cdbdc7ddd724c940d2506b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2326';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search the previous station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Seek a station Down. Stop when a station is found or the frequency has reached the lower limit
@see seekStation, seekStationProgress, setSeekAmLimits, setSeekFmLimits
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 124, 137, 139, 278
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gab91e6e91f8273104ff970e9a808c4d2f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekNextStation';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2331';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search for the next station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Like seekStationUp this function goes to a next station.
\ilinebr\ilinebr The main difference is the method used to look for a station.

@see seekStation, seekStationUp, seekStationDown, seekPreviousStation, seekStationProgress
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gad32c990d0c9184bb405f11560c4dae7e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekPreviousStation';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2332';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search the previous station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Like seekStationDown this function goes to a previous station.
\ilinebr\ilinebr The main difference is the method used to look for a station.
@see seekStation, seekStationUp, seekStationDown, seekPreviousStation, seekStationProgress
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga80b69a4edfacf274a8a8033e860453ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationProgress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(uint16_t f)
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'showFunc';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'up_down';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2334';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seeks a station up or down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Seek up or down a station and call a function defined by the developer to show the frequency.
\ilinebr\ilinebr The first parameter of this function is a name of your function that you have to implement to show the current frequency.
\ilinebr\ilinebr If you do not want to show the seeking progress,  you can set NULL instead the name of the function.
\ilinebr\ilinebr The code below shows an example using ta function the shows the current frequency on he Serial Monitor. You might want to implement a function that shows the frequency on your display device.
\ilinebr\ilinebr Also, you have to declare the frequency parameter that will be used by the function to show the frequency value.
\ilinebr\ilinebr <strong>This function does not work on SSB mode</strong>.
@code 
void showFrequency( uint16_t freq ) {
   Serial.print(freq);
   Serial.println("MHz ");
}

void loop() {

 receiver.seekStationProgress(showFrequency,1); // Seek Up
 .
 .
 .
 receiver.seekStationProgress(showFrequency,0); // Seek Down

}
@endcode

@see seekStation, seekStationUp, seekStationDown, getStatus, setMaxSeekTime
@param showFunc  function that you have to implement to show the frequency during the seeking process. Set NULL if you do not want to show the progress.
@param up_down   set up_down = 1 for seeking station up; set up_down = 0 for seeking station down
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga38f7c7610e05fc67bef6fbb4791e1728';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationProgress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(uint16_t f)
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'showFunc';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool(*)()
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stopSeking';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'up_down';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2335';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seeks a station up or down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Seek up or down a station and call a function defined by the developer to show the frequency and stop seeking process by the user.
\ilinebr\ilinebr The first parameter of this function is a name of your function that you have to implement to show the current frequency.
\ilinebr\ilinebr The second parameter is the name function that will check stop seeking action. Thus function should return true or false and should read a button, encoder or some status to make decision to stop or keep seeking.
\ilinebr\ilinebr If you do not want to show the seeking progress,  you can set NULL instead the name of the function.
\ilinebr\ilinebr If you do not want stop seeking checking, you can set NULL instead the name of a function.
\ilinebr\ilinebr The code below shows an example using ta function the shows the current frequency on he Serial Monitor. You might want to implement a function that shows the frequency on your display device.
\ilinebr\ilinebr Also, you have to declare the frequency parameter that will be used by the function to show the frequency value.
\ilinebr\ilinebr <strong>This function does not work on SSB mode</strong>.
@code 
void showFrequency( uint16_t freq ) {
   Serial.print(freq);
   Serial.println("MHz ");
}

void loop() {

 receiver.seekStationProgress(showFrequency, checkStopSeeking, 1); // Seek Up
 .
 .
 .
 receiver.seekStationProgress(showFrequency, checkStopSeeking, 0); // Seek Down

}
@endcode

@see seekStation, seekStationUp, seekStationDown, getStatus, setMaxSeekTime
@param showFunc  function that you have to implement to show the frequency during the seeking process. Set NULL if you do not want to show the progress.
@param stopSeeking functionthat you have to implement if you want to control the stop seeking action. Useful if you want abort the seek process.
@param up_down   set up_down = 1 for seeking station up; set up_down = 0 for seeking station down
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6b901d5cd729364dbda6e5b811dc9ec2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmLimits';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'bottom';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'top';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2338';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the bottom frequency and top frequency of the AM band for seek. Default is 520 to 1710.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1362 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 127, 161, and 162

@param uint16_t bottom - the bottom of the AM (MW/SW) mode for seek
@param uint16_t    top - the top of the AM (MW/SW) mode for seek
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6f8218c0bbdcb75ea54bc8af2a60dcc6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmSpacing';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'spacing';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2339';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects frequency spacingfor AM seek. Default is 10 kHz spacing.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1394 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 163, 229 and 283

@param uint16_t spacing - step in kHz
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga8107cc84409dcdad0c931368734ece3e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmSrnThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2348';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Seek Am Srn Threshold object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 2.@see setSeekAmSNRThreshold
@param value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga82f15d07f6c9d1ae963b66f57e0f43f9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmSNRThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2358';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SNR threshold for a valid AM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2353 

\ilinebr\ilinebr If the value is zero then SNR threshold is not considered when doing a seek. Default value is 5 dB.
@see Si47XX PROGRAMMING GUIDE;  (REV 1.0); page 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gae206ce900e59c6e5ff3ad5ea8cb72a12';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmRssiThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2360';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the RSSI threshold for a valid AM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1422 

\ilinebr\ilinebr If the value is zero then RSSI threshold is not considered when doing a seek. Default value is 25 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaf66b9851297e6884d70a7e40dd1367c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmLimits';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'bottom';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'top';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2363';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the bottom frequency and top frequency of the FM band for seek. Default is 8750 to 10790.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1378 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 100 and  101

@param uint16_t bottom - the bottom of the FM(VHF) mode for seek
@param uint16_t    top - the top of the FM(VHF) mode for seek
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6269e74b72ec1a1c3630b2800bad66b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmSpacing';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'spacing';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2364';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects frequency spacingfor FM seek. Default is 100 kHz (value 10) spacing. There are only 3 valid values: 5, 10, and 20.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Although the guide does not mention it, the value 1 (10 kHz) seems to work better
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 101

@param uint16_t spacing - step in kHz
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4ed12cebaf51a7379fc06623991b2d51';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmSrnThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2373';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Seek Fm Srn Threshold object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 3.@see setSeekFmSNRThreshold
@param value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga8fe968baf9aac540e2d234141b564650';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmSNRThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2385';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SNR threshold for a valid FM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2378 

\ilinebr\ilinebr SNR Threshold which determines if a valid channel has been found during Seek/Tune. Specified in units of dB in 1 dB steps (0â127). Default is 3 dB
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 102

@param value between 0 and 127.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga97c3887e96fe32426e974c0b2cb33bad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmRssiThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2387';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the RSSI threshold for a valid FM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1436 

\ilinebr\ilinebr RSSI threshold which determines if a valid channel has been found during seek/tune. Specified in units of dBÎ¼V in 1 dBÎ¼V steps (0â127). Default is 20 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 102
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gac598865516ca09db7dbfa6a84da7f179';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2389';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for stereo blend (Full stereo above threshold, blend below threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1600 

\ilinebr\ilinebr To force stereo, set this to 0. To force mono, set this to 127.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 90.

@param parameter  valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gadf4c5ec4473fd8486dd2ec7a19a10d24';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2390';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for mono blend (Full mono below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1616 

\ilinebr\ilinebr To force stereo set this to 0. To force mono set this to 127. Default value is 30 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 56.

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gab063630466dccea3becc11d60d122904';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendRssiStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2391';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for stereo blend. (Full stereo above threshold, blend below threshold.)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1632 

\ilinebr\ilinebr To force stereo, set this to 0. To force mono, set this to 127. Default value is 49 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59.

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga1b134a94138b3bf993a5d3eb5f8ed5c6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBLendRssiMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2392';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for mono blend (Full mono below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1648 

\ilinebr\ilinebr To force stereo, set this to 0. To force mono, set this to 127. Default value is 30 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59.

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga1d1a5eed976370d99827ba55d08b9293';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendSnrStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2393';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SNR threshold for stereo blend (Full stereo above threshold, blend below threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1664 

\ilinebr\ilinebr To force stereo, set this to 0. To force mono, set this to 127. Default value is 27 dB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59.

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gae2c30536e59f6691d990a2b9cf21f07e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBLendSnrMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2394';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SNR threshold for mono blend (Full mono below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1680 

\ilinebr\ilinebr To force stereo, set this to 0. To force mono, set this to 127. Default value is 14 dB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59.

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga0ed776a193fb2fcff783d4a82ff714e5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendMultiPathStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2395';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets multipath threshold for stereo blend (Full stereo below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1696 

\ilinebr\ilinebr To force stereo, set this to 100. To force mono, set this to 0. Default value is 20.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 60.

@param parameter valid values: 0 to 100
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gacc9fd27b38f49f167facfcc4f6216c5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendMultiPathMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2396';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Multipath threshold for mono blend (Full mono above threshold, blend below threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1712 

\ilinebr\ilinebr To force stereo, set to 100. To force mono, set to 0. The default is 60.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 60.

@param parameter valid values: 0 to 100
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga52c7b7b1f0ed9121b0e64516b2bd2a55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmStereoOn';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2397';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turn Off Stereo operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 4.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga59ce1008944ff9a51b6c5baeb3a3e2cb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmStereoOff';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2398';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turn Off Stereo operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 3.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RdsInit';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2400';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the control member variables for RDS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
RDS implementation 
   

\iline 1909 

\ilinebr\ilinebr This method is called by setRdsConfig()

@see setRdsConfig()
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1gadede134b96fd5650b87673ce413babb2';
        sec-mem-ref-line = '1168';
        sec-mem-ref-name = 'clearRdsBuffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1gac65c552004f5e5e646638e37a5a68213';
        sec-mem-ref-line = '1142';
        sec-mem-ref-name = 'clearRdsBuffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1gaed0988165057aa2880f41b88ac236cd7';
        sec-mem-ref-line = '1155';
        sec-mem-ref-name = 'clearRdsBuffer2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga255346df9690b34c305187065466acdb';
        sec-mem-ref-line = '2407';
        sec-mem-ref-name = 'clearRdsBuffer';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gad9718a85c79a311c26997bbda20f2351';
        sec-mem-ref-line = '1958';
        sec-mem-ref-name = 'setRdsConfig';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga255346df9690b34c305187065466acdb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2407';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the control member variables for RDS. It is an alias to RdsInit  (a better name to RdsInit)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This method is called by setRdsConfig()
@see setRdsConfig()
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1915';
        sec-mem-ref-name = 'RdsInit';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaddfe8c89101b4859eca31ad68ad9de2e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRdsIntSource';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSRECV';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSSYNCLOST';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSSYNCFOUND';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSNEWBLOCKA';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSNEWBLOCKB';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2408';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures interrupt related to RDS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1992 

\ilinebr\ilinebr Use this method if want to use interrupt

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 103

@param RDSRECV If set, generate RDSINT when RDS FIFO has at least FM_RDS_INT_FIFO_COUNT entries.
@param RDSSYNCLOST If set, generate RDSINT when RDS loses synchronization.
@param RDSSYNCFOUND set, generate RDSINT when RDS gains synchronization.
@param RDSNEWBLOCKA If set, generate an interrupt when Block A data is found or subsequently changed
@param RDSNEWBLOCKB If set, generate an interrupt when Block B data is found or subsequently changed
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga350a2033671a7620d4b9290a2347e185';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStatus';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'INTACK';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'MTFIFO';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'STATUSONLY';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2409';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS status. Store the status in currentRdsStatus member. RDS COMMAND FM_RDS_STATUS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2038 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55 and 77

@param INTACK Interrupt Acknowledge; 0 = RDSINT status preserved. 1 = Clears RDSINT.
@param MTFIFO 0 = If FIFO not empty, read and remove oldest FIFO entry; 1 = Clear RDS Receive FIFO.
@param STATUSONLY Determines if data should be removed from the RDS FIFO. 
                  0 = Data in BLOCKA, BLOCKB, BLOCKC, BLOCKD, and BLE contain the oldest data in the RDS FIFO.
                  1 = Data in BLOCKA will contain the last valid block A data received for the cur- rent station. Data in BLOCKB will contain the last valid block B data received for the current station. Data in BLE will describe the bit errors for the data in BLOCKA and BLOCKB.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1gadede134b96fd5650b87673ce413babb2';
        sec-mem-ref-line = '1168';
        sec-mem-ref-name = 'clearRdsBuffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1gac65c552004f5e5e646638e37a5a68213';
        sec-mem-ref-line = '1142';
        sec-mem-ref-name = 'clearRdsBuffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1gaed0988165057aa2880f41b88ac236cd7';
        sec-mem-ref-line = '1155';
        sec-mem-ref-name = 'clearRdsBuffer2B';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga59122f18fd887bbcb888ecf785871635';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsBeginQuery';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2419';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Retrieves the current RDS data to be utilized by other RDS functions.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Just another way to call getRdsStatus. Both do the same thing.
\ilinebr\ilinebr This function must be called before calling any RDS function.
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55 and 77
@see getRdsStatus
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga94cce3834f85fc127e8c2dab3a03e875';
        sec-mem-ref-line = '2574';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac1f149a2778baa8f6c933482526830a4';
        sec-mem-ref-line = '2430';
        sec-mem-ref-name = 'getRdsAllData';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga6e8405ea5846fab586080a7be696178e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsReceived';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2427';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Received FIFO.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 if FIFO is 1, it means the minimum number of groups was filled
@return true if minimum number of groups was filled.
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac1f149a2778baa8f6c933482526830a4';
        sec-mem-ref-line = '2430';
        sec-mem-ref-name = 'getRdsAllData';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf1e67b201799a9e8d7208a32a65656b5';
        sec-mem-ref-line = '2100';
        sec-mem-ref-name = 'getRdsPI';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2260';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2295';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gac283a8a89cc885c2740c65a7128ff7ef';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsSyncLost';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2438';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Sync Lost object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 returns true (1) if Lost RDS synchronization is detected.
@return true if Lost RDS synchronization detected.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga78e906f12771490771c624be1777784d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsSyncFound';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2449';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Sync Found.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 return true if found RDS synchronization
@return true if found RDS synchronization
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga561a052a8c737302368274c774d8c129';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsNewBlockA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2461';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds New Block A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2456 

\ilinebr\ilinebr Returns true if valid Block A data has been received.
@return true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf1e67b201799a9e8d7208a32a65656b5';
        sec-mem-ref-line = '2100';
        sec-mem-ref-name = 'getRdsPI';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaff740d85cc04c257f53c7e910bd45fcf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsNewBlockB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2472';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds New Block B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns true if valid Block B data has been received.
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga6e899b37cbc3dcd0ab969724e4008f0f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsSync';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2483';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Sync.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns true if RDS currently synchronized.
@return true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac1f149a2778baa8f6c933482526830a4';
        sec-mem-ref-line = '2430';
        sec-mem-ref-name = 'getRdsAllData';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga8db437efc42a81466d8daf4dcc35c50c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getGroupLost';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2494';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Group Lost.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns true if one or more RDS groups discarded due to FIFO overrun.
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga819c370ff03c52a527fbc85f9877f526';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNumRdsFifoUsed';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2505';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Num Rds Fifo Used.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the number of RDS FIFO used
@return uint8_t Total RDS FIFO used
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gad1c4f5e8f21d008361c8613c94eca0c0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFifoCount';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2516';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the minimum number of RDS groups stored in the RDS FIFO before RDSRECV is set.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the number of RDS FIFO used
@param value from 0 to 25. Default value is 0.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gadbc1132450ca79ed53e8e8cc0d2fe1d1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getEndIndicatorGroupA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2527';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check if 0xD or 0xA special characters were received for group A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see resetEndIndicatorGroupA
@return true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a4b777d713357d2595e8617a63a32adbe';
        sec-mem-ref-line = '1077';
        sec-mem-ref-name = 'rdsEndGroupA';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga339af59bbaefd8d60ba9b26e742bc01e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resetEndIndicatorGroupA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2537';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Resets 0xD or 0xA special characters condition (makes it false)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see getEndIndicatorGroupA
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a4b777d713357d2595e8617a63a32adbe';
        sec-mem-ref-line = '1077';
        sec-mem-ref-name = 'rdsEndGroupA';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga1cd6e6388fbb853cc24d3e0dc0df1eb6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getEndIndicatorGroupB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2548';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check if 0xD or 0xA special characters were received for group B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see resetEndIndicatorGroupB
@return true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a07ac2f7392dceae88cf87cf34d9960d1';
        sec-mem-ref-line = '1078';
        sec-mem-ref-name = 'rdsEndGroupB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga11a5d5eb070466b488e5adec650e625e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resetEndIndicatorGroupB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2558';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Resets 0xD or 0xA special characters condition (makes it false)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see getEndIndicatorGroupB
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a07ac2f7392dceae88cf87cf34d9960d1';
        sec-mem-ref-line = '1078';
        sec-mem-ref-name = 'rdsEndGroupB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga94cce3834f85fc127e8c2dab3a03e875';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2574';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets RDS Status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2566 

\ilinebr\ilinebr Same result of calling getRdsStatus(0,0,0).
\ilinebr\ilinebr Please, call getRdsStatus(uint8_t INTACK, uint8_t MTFIFO, uint8_t STATUSONLY) instead getRdsStatus()
if you want other behaviour.

@see SI4735::getRdsStatus(uint8_t INTACK, uint8_t MTFIFO, uint8_t STATUSONLY)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga94cce3834f85fc127e8c2dab3a03e875';
        sec-mem-ref-line = '2574';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga94cce3834f85fc127e8c2dab3a03e875';
        sec-mem-ref-line = '2574';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga59122f18fd887bbcb888ecf785871635';
        sec-mem-ref-line = '2419';
        sec-mem-ref-name = 'rdsBeginQuery';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga13cd4540eff45acbc4252875edda75ed';
        sec-mem-ref-line = '2585';
        sec-mem-ref-name = 'rdsClearFifo';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga358ae7318679b5a47b04d1f672bf3257';
        sec-mem-ref-line = '2596';
        sec-mem-ref-name = 'rdsClearInterrupt';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga13cd4540eff45acbc4252875edda75ed';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsClearFifo';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2585';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Empty FIFO.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Clear RDS Receive FIFO.
@see getRdsStatus
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga94cce3834f85fc127e8c2dab3a03e875';
        sec-mem-ref-line = '2574';
        sec-mem-ref-name = 'getRdsStatus';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga358ae7318679b5a47b04d1f672bf3257';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsClearInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2596';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clears RDSINT.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 INTACK Interrupt Acknowledge; 0 = RDSINT status preserved. 1 = Clears RDSINT.
@see getRdsStatus
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga94cce3834f85fc127e8c2dab3a03e875';
        sec-mem-ref-line = '2574';
        sec-mem-ref-name = 'getRdsStatus';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gad9718a85c79a311c26997bbda20f2351';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRdsConfig';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHA';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHB';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHC';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHD';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2601';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RDS property.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1927 

\ilinebr\ilinebr Configures RDS settings to enable RDS processing (RDSEN) and set RDS block error thresholds. 
\ilinebr\ilinebr When a RDS Group is received, all block errors must be less than or equal the associated block 
error threshold for the group to be stored in the RDS FIFO. 
\ilinebr\ilinebr IMPORTANT: 
All block errors must be less than or equal the associated block error threshold 
for the group to be stored in the RDS FIFO. 
<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0 \ilinebr </td>    <td class="markdownTableBodyNone"> No errors \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 1 \ilinebr </td>    <td class="markdownTableBodyNone"> 1â2 bit errors detected and corrected \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 2 \ilinebr </td>    <td class="markdownTableBodyNone"> 3â5 bit errors detected and corrected \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 3 \ilinebr </td>    <td class="markdownTableBodyNone"> Uncorrectable \ilinebr </td>  </tr></table>

\ilinebr\ilinebr Recommended Block Error Threshold options:
<table class="markdownTable">
  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Exemples \ilinebr </th>    <th class="markdownTableHeadNone"> Description \ilinebr </th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 2,2,2,2 \ilinebr </td>    <td class="markdownTableBodyNone"> No group stored if any errors are uncorrected \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 3,3,3,3 \ilinebr </td>    <td class="markdownTableBodyNone"> Group stored regardless of errors \ilinebr </td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0,0,0,0 \ilinebr </td>    <td class="markdownTableBodyNone"> No group stored containing corrected or uncorrected errors \ilinebr </td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 3,2,3,3 \ilinebr </td>    <td class="markdownTableBodyNone"> Group stored with corrected errors on B, regardless of errors on A, C, or D \ilinebr </td>  </tr></table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 104

@param uint8_t RDSEN RDS Processing Enable; 1 = RDS processing enabled.
@param uint8_t BLETHA Block Error Threshold BLOCKA.   <br>
@param uint8_t BLETHB Block Error Threshold BLOCKB.  <br>
@param uint8_t BLETHC Block Error Threshold BLOCKC.  <br>
@param uint8_t BLETHD Block Error Threshold BLOCKD. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1915';
        sec-mem-ref-name = 'RdsInit';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaf1e67b201799a9e8d7208a32a65656b5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsPI';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2602';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the programa type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2092 

\ilinebr\ilinebr Read the Block A content

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 77 and 78

@return BLOCKAL
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga561a052a8c737302368274c774d8c129';
        sec-mem-ref-line = '2461';
        sec-mem-ref-name = 'getRdsNewBlockA';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e8405ea5846fab586080a7be696178e';
        sec-mem-ref-line = '2427';
        sec-mem-ref-name = 'getRdsReceived';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaa35366e5cded7b864f7268a7e4a8dbe9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsGroupType';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2603';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Group Type (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2112 

@return BLOCKBL 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga05f76a0a0ebda813483f1df24e890904';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsFlagAB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2604';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the current Text Flag A/B  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2129 

@return uint8_t current Text Flag A/B  <br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaf9b6cb614d1b01b11bb23c19e6deb8b9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsVersionCode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2605';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the version code (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2167 

@returns  0=A or 1=B
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gac28fa3818d4f900c4f4ba6be10c1405b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsProgramType';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2606';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Program Type (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2184 

@see https://en.wikipedia.org/wiki/Radio_Data_System

@return program type (an integer betwenn 0 and 31)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gab1ed04a109330e7e9206483c7cdf5ef9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsTextSegmentAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2607';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the address of the text segment.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2146 

\ilinebr\ilinebr 2A - Each text segment in version 2A groups consists of four characters. A messages of this group can be 
have up to 64 characters. 
\ilinebr\ilinebr 2B - In version 2B groups, each text segment consists of only two characters. When the current RDS status is
     using this version, the maximum message length will be 32 characters.

@return uint8_t the address of the text segment.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga71cbaa3e0c103db7cee5969d162bec5d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2609';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS Text when the message is of the Group Type 2 version A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2232 

@return char*  The string (char array) with the content (Text) received from group 2A 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadb0a3c39aeacba0faf39aadd9465021f';
        sec-mem-ref-line = '2220';
        sec-mem-ref-name = 'getNext4Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a0b40791484c47c0bf90d8dc255a20269';
        sec-mem-ref-line = '1068';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a1c7ec3559a78c5ef1bda49cb0abdf1de';
        sec-mem-ref-line = '1073';
        sec-mem-ref-name = 'rdsTextAdress2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga12d917629b78fffebac5ecf8f2936921';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText0A';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2610';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the station name and other messages.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 6.\iline 2255 

@return char* should return a string with the station name. 
        However, some stations send other kind of messages
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1gadede134b96fd5650b87673ce413babb2';
        sec-mem-ref-line = '1168';
        sec-mem-ref-name = 'clearRdsBuffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gab1f4f137139b40fe386ca51586999e50';
        sec-mem-ref-line = '2207';
        sec-mem-ref-name = 'getNext2Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e8405ea5846fab586080a7be696178e';
        sec-mem-ref-line = '2427';
        sec-mem-ref-name = 'getRdsReceived';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ac24a8bbd39628c2981208cb452165a0e';
        sec-mem-ref-line = '1070';
        sec-mem-ref-name = 'rds_buffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a11477d1eb13efb348395a4984b67f392';
        sec-mem-ref-line = '1075';
        sec-mem-ref-name = 'rdsTextAdress0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac1f149a2778baa8f6c933482526830a4';
        sec-mem-ref-line = '2430';
        sec-mem-ref-name = 'getRdsAllData';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gaca1e5684a4d331411fa10d72926bf39b';
        sec-mem-ref-line = '2623';
        sec-mem-ref-name = 'getRdsStationName';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gae54d0f5562ca7615c3b90bee00c29ab4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText2A';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2611';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Text processed for the 2A group.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2291 

@return char* string with the Text of the group A2  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadb0a3c39aeacba0faf39aadd9465021f';
        sec-mem-ref-line = '2220';
        sec-mem-ref-name = 'getNext4Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e8405ea5846fab586080a7be696178e';
        sec-mem-ref-line = '2427';
        sec-mem-ref-name = 'getRdsReceived';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a0b40791484c47c0bf90d8dc255a20269';
        sec-mem-ref-line = '1068';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a1c7ec3559a78c5ef1bda49cb0abdf1de';
        sec-mem-ref-line = '1073';
        sec-mem-ref-name = 'rdsTextAdress2A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac1f149a2778baa8f6c933482526830a4';
        sec-mem-ref-line = '2430';
        sec-mem-ref-name = 'getRdsAllData';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gabce6da2400060fd8adceb4fe3287667d';
        sec-mem-ref-line = '2633';
        sec-mem-ref-name = 'getRdsProgramInformation';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText2B';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2612';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Text processed for the 2B group.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2324 

@return char* string with the Text of the group AB  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gab1f4f137139b40fe386ca51586999e50';
        sec-mem-ref-line = '2207';
        sec-mem-ref-name = 'getNext2Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a7aa607f80e97d45ac7a80cdcbdeb09f9';
        sec-mem-ref-line = '1069';
        sec-mem-ref-name = 'rds_buffer2B';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1adecc2478d73cd7d18e1f88fd70d1488d';
        sec-mem-ref-line = '1074';
        sec-mem-ref-name = 'rdsTextAdress2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac1f149a2778baa8f6c933482526830a4';
        sec-mem-ref-line = '2430';
        sec-mem-ref-name = 'getRdsAllData';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga81f852104170f7477fe96ff314e52273';
        sec-mem-ref-line = '2642';
        sec-mem-ref-name = 'getRdsStationInformation';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gac1f149a2778baa8f6c933482526830a4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsAllData';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stationName';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stationInformation';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'programInformation';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char **
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'utcTime';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2613';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets Station Name, Station Information, Program Information and utcTime.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function populates four char pointer variable parameters with Station Name, Station Information, Programa Information and UTC time.
\ilinebr\ilinebr You must call  setRDS(true), setRdsFifo(true) before calling getRdsAllData(...)
\ilinebr\ilinebr ATTENTION: You don't need to call any additional function to obtain the RDS information; simply follow the steps outlined below. 
\ilinebr\ilinebr ATTENTION: If no data is found for the given parameter, it is assigned a NULL value. Prior to using the pointers variable, make sure to check if it is null.
\ilinebr\ilinebr the right way to call this function is shown below.
@code {.cpp}

void setup() {
  rx.setup(RESET_PIN, FM_FUNCTION);
  rx.setFM(8400, 10800, currentFrequency, 10);
  delay(500);
  rx.setRdsConfig(3, 3, 3, 3, 3);
  rx.setFifoCount(1);
}

char *utcTime;
char *stationName;
char *programInfo;
char *stationInfo;

void showStationName() {
  if (stationName != NULL) {
    // do something
   }
 }

void showStationInfo() {
  if (stationInfo != NULL) {
    // do something
   }
 }

void showProgramaInfo() {
 if (programInfo != NULL) {
   // do something
 }
}

void showUtcTime() {
  if (rdsTime != NULL) {
    // do something
  }
}

void loop() {
  .
  .
  .
  if (rx.isCurrentTuneFM()) {
    // The char pointers above will be populate by the call below. So, the char pointers need to be passed by reference (pointer to pointer).
    if (rx.getRdsAllData(&stationName, &stationInfo , &programInfo, &rdsTime) ) {
        showProgramaInfo(programInfo); // you need check if programInfo is null in showProgramaInfo
        showStationName(stationName); // you need check if stationName is null in showStationName
        showStationInfo(stationInfo); // you need check if stationInfo is null in showStationInfo
        showUtcTime(rdsTime); // // you need check if rdsTime is null in showUtcTime
    }
  }
  .
  .
  .
  delay(5);
}
@endcode
\ilinebr\ilinebr ATTENTION: the parameters below are point to point to array of char.
@param stationName (reference)  - if NOT NULL,  point to Name of the Station (char array -  9 bytes)
@param stationInformation (reference)  - if NOT NULL, point to Station information (char array - 33 bytes)
@param programInformation (reference)  - if NOT NULL, point to program information (char array - 65 nytes)
@param utcTime  (reference)  - if NOT NULL, point to char array containing the current UTC time (format HH:MM:SS +HH:MM)
@return True if found at least one valid data
@see setRDS, setRdsFifo, getRdsAllData
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e8405ea5846fab586080a7be696178e';
        sec-mem-ref-line = '2427';
        sec-mem-ref-name = 'getRdsReceived';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e899b37cbc3dcd0ab969724e4008f0f';
        sec-mem-ref-line = '2483';
        sec-mem-ref-name = 'getRdsSync';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2260';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2295';
        sec-mem-ref-name = 'getRdsText2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2328';
        sec-mem-ref-name = 'getRdsText2B';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa8436bb156f3ac8321c65941be42fdba';
        sec-mem-ref-line = '2454';
        sec-mem-ref-name = 'getRdsTime';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga59122f18fd887bbcb888ecf785871635';
        sec-mem-ref-line = '2419';
        sec-mem-ref-name = 'rdsBeginQuery';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaca1e5684a4d331411fa10d72926bf39b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStationName';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2623';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Station Name.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Alias for getRdsText0A
\ilinebr\ilinebr ATTENTION: You must call getRdsReady before calling this function.
@return char* should return a string with the station name. However, some stations send other kind of messages
@see getRdsText0A
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2260';
        sec-mem-ref-name = 'getRdsText0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gabce6da2400060fd8adceb4fe3287667d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsProgramInformation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2633';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Program Information (RT - Radio Text)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Process the program information data. Same getRdsText2A(). It is a alias for getRdsText2A.
\ilinebr\ilinebr ATTENTION: You must call getRdsReady before calling this function.
@return char array with the program information (63 bytes)
@see getRdsText2A
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2295';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga81f852104170f7477fe96ff314e52273';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStationInformation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2642';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Station Information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 ATTENTION: You must call getRdsReady before calling this function.
@return char array with the Text of Station Information (33 bytes)
@see getRdsReady
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2328';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gab86c659a9fff0e24f4f66af2eda147c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mjdConverter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'mjd';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'year';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'month';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'day';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2644';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Converts the MJD number to integers Year, month and day.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
      () 
\ilinebr\ilinebr Calculates day, month and year based on MJD
\ilinebr\ilinebr This MJD algorithm is an adaptation of the javascript code found at http://www.csgnetwork.com/julianmodifdateconv.html
@param mjd   mjd number 
@param year  year variable reference 
@param month month variable reference 
@param day day variable reference 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaa8436bb156f3ac8321c65941be42fdba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2645';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS time and date when the Group type is 4.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns theUTC Time and offset (to convert it to local time)
\ilinebr\ilinebr return examples: 
\ilinebr\ilinebr 12:31 +03:00 
\ilinebr\ilinebr 21:59 -02:30

@return  point to char array. Format:  +/-hh:mm (offset)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1af722be88a23730082909000dba8002ae';
        sec-mem-ref-line = '1071';
        sec-mem-ref-name = 'rds_time';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac1f149a2778baa8f6c933482526830a4';
        sec-mem-ref-line = '2430';
        sec-mem-ref-name = 'getRdsAllData';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga5579fd16c75370bf36b1633fc00ec033';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsDateTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2646';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS the Time and Date when the Group type is 4.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Returns the Date, UTC Time and offset (to convert it to local time)
\ilinebr\ilinebr return examples: 
\ilinebr\ilinebr 2021-07-29 12:31 +03:00 
\ilinebr\ilinebr 1964-05-09 21:59 -02:30

@return array of char yy-mm-dd hh:mm +/-hh:mm offset
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1af722be88a23730082909000dba8002ae';
        sec-mem-ref-line = '1071';
        sec-mem-ref-name = 'rds_time';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga8f7e3991593d58cd59ddcaf3cbb37196';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsDateTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'year';
        sec-mem-param-defname = 'rYear';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'month';
        sec-mem-param-defname = 'rMonth';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'day';
        sec-mem-param-defname = 'rDay';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'hour';
        sec-mem-param-defname = 'rHour';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'minute';
        sec-mem-param-defname = 'rMinute';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2647';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Decodes the RDS time to LOCAL Julian Day and time.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This method gets the RDS date time massage and converts it from MJD to JD and UTC time to local time
\ilinebr\ilinebr The Date and Time service may not work correctly depending on the FM station that provides the service. 
\ilinebr\ilinebr I have noticed that some FM stations do not use the service properly in my location.  <br>
\ilinebr\ilinebr Example:
@code 
     uint16_t year, month, day, hour, minute;
     .
     .
     si4735.getRdsStatus();
     si4735.getRdsDateTime(&year, &month, &day, &hour, &minute);
     .
     .        
@endcode
@param rYear  year variable reference 
@param rMonth month variable reference 
@param rDay day variable reference 
@param rHour local hour variable reference 
@param rMinute local minute variable reference 
@return true, it the RDS Date and time were processed 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gab1f4f137139b40fe386ca51586999e50';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNext2Block';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'c';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2649';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Process data received from group 2B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2203 

@param c  char array reference to the "group 2B" text 
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2260';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2328';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gadb0a3c39aeacba0faf39aadd9465021f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNext4Block';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'c';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2650';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Process data received from group 2A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2216 

@param c  char array reference to the "group  2A" text 
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga71cbaa3e0c103db7cee5969d162bec5d';
        sec-mem-ref-line = '2236';
        sec-mem-ref-name = 'getRdsText';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2295';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga55cf9a091d314a1aa21552f2254f756f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBBfo';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'offset';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2652';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SSB Beat Frequency Offset (BFO).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2754 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 5 and 23

@param offset 16-bit signed value (unit in Hz). The valid range is -16383 to +16383 Hz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga9224e7d4ef14c887da96dbefd2dcefd3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBConfig';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AUDIOBW';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SBCUTFLT';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVC_DIVIDER';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVCEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SMUTESEL';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DSP_AFCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2653';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SSB receiver mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2789 

\ilinebr\ilinebr You can use this method for:
\ilinebr\ilinebr 1) Enable or disable AFC track to carrier function for receiving normal AM signals;
\ilinebr\ilinebr 2) Set the audio bandwidth;
\ilinebr\ilinebr 3) Set the side band cutoff filter;
\ilinebr\ilinebr 4) Set soft-mute based on RSSI or SNR;
\ilinebr\ilinebr 5) Enable or disbable automatic volume control (AVC) function.

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param AUDIOBW SSB Audio bandwidth; 0 = 1.2kHz (default); 1=2.2kHz; 2=3kHz; 3=4kHz; 4=500Hz; 5=1kHz.
@param SBCUTFLT SSB side band cutoff filter for band passand low pass filter
                if 0, the band pass filter to cutoff both the unwanted side band and high frequency
                 component > 2kHz of the wanted side band (default).
@param AVC_DIVIDER set 0 for SSB mode; set 3 for SYNC mode.
@param AVCEN SSB Automatic Volume Control (AVC) enable; 0=disable; 1=enable (default).
@param SMUTESEL SSB Soft-mute Based on RSSI or SNR.
@param DSP_AFCDIS DSP AFC Disable or enable; 0=SYNC MODE, AFC enable; 1=SSB MODE, AFC disable.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga7c48f2af416b1f89dbedbfbe9a637620';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'intialFreq';
        sec-mem-param-defname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'usblsb';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2654';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Tunes the SSB (LSB or USB) receiver to a frequency between 150 and 30 MHz.
\ilinebr\ilinebr Via VFO you have 1kHz steps.
\ilinebr\ilinebr Via BFO you have 8Hz steps.

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 13 and 14
@see setAM()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency
@param step step used to go to the next channel
@param usblsb SSB Upper Side Band (USB) and Lower Side Band (LSB) Selection;
              value 2 (banary 10) = USB;
              value 1 (banary 01) = LSB.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga3e907ddf560a0c8286fa55768701b3da';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'usblsb';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2655';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the radio to AM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2937 

 \xrefitem todo 7.

\ilinebr\ilinebr Set the radio to SSB (LW/MW/SW) function.

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 13 and 14
@see setAM()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)

@param usblsb upper or lower side band;  1 = LSB; 2 = USB
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga6b2ad4d027463262350134490d16bf32';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBAudioBandwidth';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AUDIOBW';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2656';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Audio Bandwidth for SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2906 

\ilinebr\ilinebr 0 = 1.2 kHz low-pass filter  (default).
\ilinebr\ilinebr 1 = 2.2 kHz low-pass filter.
\ilinebr\ilinebr 2 = 3.0 kHz low-pass filter.
\ilinebr\ilinebr 3 = 4.0 kHz low-pass filter.
\ilinebr\ilinebr 4 = 500 Hz band-pass filter for receiving CW signal, i.e. [250 Hz, 750 Hz] with center
frequency at 500 Hz when USB is selected or [-250 Hz, -750 1Hz] with center frequency at -500Hz
when LSB is selected* .
\ilinebr\ilinebr 5 = 1 kHz band-pass filter for receiving CW signal, i.e. [500 Hz, 1500 Hz] with center
frequency at 1 kHz when USB is selected or [-500 Hz, -1500 1 Hz] with center frequency
    at -1kHz when LSB is selected.
\ilinebr\ilinebr Other values = reserved.

\ilinebr\ilinebr If audio bandwidth selected is about 2 kHz or below, it is recommended to set SBCUTFLT[3:0] to 0
to enable the band pass filter for better high- cut performance on the wanted side band. Otherwise, set it to 1.

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param AUDIOBW the valid values are 0, 1, 2, 3, 4 or 5; see description above
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gacacf1dac4c0ec170d1da629dd1fd30cb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBAutomaticVolumeControl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVCEN';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2657';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SSB Automatic Volume Control (AVC) for SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2858 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param AVCEN 0 = Disable AVC; 1 = Enable AVC (default).
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga7554815b6d83128c5b15206e69c51f9f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBSidebandCutoffFilter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SBCUTFLT';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2658';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SBB Sideband Cutoff Filter for band pass and low pass filters.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2888 

\ilinebr\ilinebr 0 = Band pass filter to cutoff both the unwanted side band and high frequency components > 2.0 kHz of the wanted side band. (default)
\ilinebr\ilinebr 1 = Low pass filter to cutoff the unwanted side band.
Other values = not allowed.
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param SBCUTFLT 0 or 1; see above
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gae9d50b24642784943fefedbac944a8e8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSBBSidebandCutoffFilter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SBCUTFLT';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2666';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 4.@see setSSBSidebandCutoffFilter
@param SBCUTFLT
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gafc5e87c50a1eba6de9504c114cc1cb70';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBAvcDivider';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVC_DIVIDER';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2668';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets AVC Divider.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2873 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param AVC_DIVIDER  SSB mode, set divider = 0; SYNC mode, set divider = 3; Other values = not allowed.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga6cde26a5abf759a628012d1457d85c72';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBDspAfc';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DSP_AFCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2669';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets DSP AFC disable or enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2828 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param DSP_AFCDIS 0 = SYNC mode, AFC enable; 1 = SSB mode, AFC disable
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga91251dfc2ff9488aaef3aa1a528097d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBSoftMute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SMUTESEL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2670';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SSB Soft-mute Based on RSSI or SNR Selection:
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2843 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param SMUTESEL  0 = Soft-mute based on RSSI (default); 1 = Soft-mute based on SNR.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '3005';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1ga505445484e643ae95a2a9300eac9c4c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setNBFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2672';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the radio to FM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 3621 

 \xrefitem todo 8.

\ilinebr\ilinebr Set the radio to NBFM function.

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 32 and 14
@see setAM(), setSSB(), setFM()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga22adda493bc8278a376c1ba6f6ea4668';
        sec-mem-ref-line = '3663';
        sec-mem-ref-name = 'setNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1ga22adda493bc8278a376c1ba6f6ea4668';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setNBFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2673';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Tunes the SSB (LSB or USB) receiver to a frequency between 64 and 108 MHz.

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE;
@see setAM(), setFM(), setSSB()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency
@param step step used to go to the next channel
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga505445484e643ae95a2a9300eac9c4c1';
        sec-mem-ref-line = '3632';
        sec-mem-ref-name = 'setNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1gabed83f2c503dc3b35ca115ef6b08d552';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patchPowerUpNBFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2674';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This method can be used to prepare the device to apply NBFM patch.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 3579 

\ilinebr\ilinebr Call queryLibraryId before call this method. Powerup the device by issuing the POWER_UP
command with FUNC = 0 (FM Receiver).

@see setMaxDelaySetFrequency()
@see MAX_DELAY_AFTER_POWERUP
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 215-220 and
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES; page 32.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadd298b10c6c7e760e7233b50500773c3';
        sec-mem-ref-line = '3608';
        sec-mem-ref-name = 'loadPatchNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1gadd298b10c6c7e760e7233b50500773c3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'loadPatchNBFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2675';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Loads a given NBFM patch content.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Configures the Si4735-D60/SI4732-A10 device to work with NBFM.

@param patch_content        point to patch content array
@param patch_content_size   size of patch content
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gabed83f2c503dc3b35ca115ef6b08d552';
        sec-mem-ref-line = '3589';
        sec-mem-ref-name = 'patchPowerUpNBFM';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3103';
        sec-mem-ref-name = 'queryLibraryId';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1ga5c8c57c727fd102f0eb3d59ec995692f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyNBFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'freq';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2676';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the frequency to the corrent function of the Si4735 on NBFM mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 You have to call setup or setPowerUp before call setFrequency.

@see maxDelaySetFrequency()
@see MAX_DELAY_AFTER_SET_FREQUENCY
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 70, 135
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 39

@param uint16_t  freq is the frequency to change. For example, FM => 10390 = 103.9 MHz; AM => 810 = 810 kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gadfc2c82524918224cf19fec5b7fcf6d1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_firmware_query_library
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'queryLibraryId';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2678';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Query the library information of the Si47XX device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
SI47XX PATCH RESOURCES
    

\iline 3084 

\ilinebr\ilinebr Used to confirm if the patch is compatible with the internal device library revision.

\ilinebr\ilinebr You have to call this function if you are applying a patch on SI47XX (SI4735-D60/SI4732-A10).
\ilinebr\ilinebr The first command that is sent to the device is the POWER_UP command to confirm
that the patch is compatible with the internal device library revision.
\ilinebr\ilinebr The device moves into the powerup mode, returns the reply, and moves into the
powerdown mode.
\ilinebr\ilinebr The POWER_UP command is sent to the device again to configure
the mode of the device and additionally is used to start the patching process.
\ilinebr\ilinebr When applying the patch, the PATCH bit in ARG1 of the POWER_UP command must be
set to 1 to begin the patching process. [AN332 (REV 1.0) page 219].

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 215-220.
@see struct si47x_firmware_query_library

@return a struct si47x_firmware_query_library (see it in SI4735.h)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '459';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga03bfe4b1e5ec84b7a933309095215f38';
        sec-mem-ref-line = '3375';
        sec-mem-ref-name = 'loadCompressedPatch';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga591bbfe4dbd39a6de29a37935a6abee5';
        sec-mem-ref-line = '3347';
        sec-mem-ref-name = 'loadPatch';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadd298b10c6c7e760e7233b50500773c3';
        sec-mem-ref-line = '3608';
        sec-mem-ref-name = 'loadPatchNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gafaabd6c73b7ad7c20ae959d5b75c1e71';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patchPowerUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2679';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This method can be used to prepare the device to apply SSBRX patch.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 3134 

\ilinebr\ilinebr Call queryLibraryId before call this method. Powerup the device by issuing the POWER_UP
command with FUNC = 1 (AM/SW/LW Receive).

@see setMaxDelaySetFrequency()
@see MAX_DELAY_AFTER_POWERUP
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 215-220 and
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES; page 7.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga03bfe4b1e5ec84b7a933309095215f38';
        sec-mem-ref-line = '3375';
        sec-mem-ref-name = 'loadCompressedPatch';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga591bbfe4dbd39a6de29a37935a6abee5';
        sec-mem-ref-line = '3347';
        sec-mem-ref-name = 'loadPatch';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gafd1343bd8b4f0c290ef81c418222036c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'downloadPatch';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2680';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Transfers the content of a patch stored in a array of bytes to the SI4735 device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 3181 

\ilinebr\ilinebr You must mount an array as shown below and know the size of that array as well.

\ilinebr\ilinebr Patches for the SI4735 are distributed in binary
  form and are transferred to the internal RAM of the device by the host MCU (in this case, Arduino boards).
  Since the RAM is volatile memory, the patch stored on the device gets lost when you turn off
  the system. Consequently, the content of the patch has to be transferred to the device every
  time the device is powered up.

\ilinebr\ilinebr The disadvantage of this approach is the amount of memory used by the patch content.
 This may limit the use of other radio functions you want implemented in Arduino.

\ilinebr\ilinebr Example of content:
 @code 
 const PROGMEM uint8_t ssb_patch_content_full[] =
  { // SSB patch for whole SSBRX full download
      0x15, 0x00, 0x0F, 0xE0, 0xF2, 0x73, 0x76, 0x2F,
      0x16, 0x6F, 0x26, 0x1E, 0x00, 0x4B, 0x2C, 0x58,
      0x16, 0xA3, 0x74, 0x0F, 0xE0, 0x4C, 0x36, 0xE4,
         .
         .
         .
      0x16, 0x3B, 0x1D, 0x4A, 0xEC, 0x36, 0x28, 0xB7,
      0x16, 0x00, 0x3A, 0x47, 0x37, 0x00, 0x00, 0x00,
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x29};

 const int size_content_full = sizeof ssb_patch_content_full;
 @endcode

@see Si47XX PROGRAMMING GUIDE; ;AN332 (REV 1.0) pages 64 and 215-220.

@param ssb_patch_content point to array of bytes content patch.
@param ssb_patch_content_size array size (number of bytes). The maximum size allowed for a patch is 15856 bytes

 @return false if an error is found.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gaf1b8947db928728ada66ef3edaa79e76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'downloadCompressedPatch';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd_0x15';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const int16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd_0x15_size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2681';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Deal with compressed SSB patch.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 It works like the downloadPatch method but requires less memory to store the patch.
\ilinebr\ilinebr Transfers the content of a patch stored in a compressed array of bytes to the SI4735 device.
\ilinebr\ilinebr In the patch_init.h and patch_full.h files, the first byte of each line begins with either a 0x15 or 0x16 value
\ilinebr\ilinebr To shrink the original patch size stored on the master MCU (Arduino), the first byte
\ilinebr\ilinebr is omitted and a new array is added to indicate which lines begin with the value 0x15.
\ilinebr\ilinebr For the other lines, the downloadCompressedPatch method will insert the value 0x16.
\ilinebr\ilinebr The value 0x16 occurs on most lines in the patch. This approach will save about 1K of memory.
\ilinebr\ilinebr The example code below shows how to use compressed SSB patch.
@code 
  #include <patch_ssb_compressed.h> // SSB patch for whole SSBRX initialization string
  const uint16_t size_content = sizeof ssb_patch_content; // See ssb_patch_content.h
  const uint16_t cmd_0x15_size = sizeof cmd_0x15;         // Array of lines where the 0x15 command occurs in the patch content.

  void loadSSB()
  {
    .
    .
    rx.setI2CFastModeCustom(500000);
    rx.queryLibraryId();
    rx.patchPowerUp();
    delay(50);
    rx.downloadCompressedPatch(ssb_patch_content, size_content, cmd_0x15, cmd_0x15_size);
    rx.setSSBConfig(bandwidthSSB[bwIdxSSB].idx, 1, 0, 1, 0, 1);
    rx.setI2CStandardMode();
    .
    .
  }
@endcode
@see  downloadPatch
@see  patch_ssb_compressed.h, patch_init.h, patch_full.h
@see  SI47XX_03_ALL_IN_ONE_NEW_INTERFACE_V15.ino
@see  SI47XX_09_NOKIA_5110/ALL_IN_ONE_7_BUTTONS/ALL_IN_ONE_7_BUTTONS.ino
@param ssb_patch_content         point to array of bytes content patch.
@param ssb_patch_content_size    array size (number of bytes). The maximum size allowed for a patch is 15856 bytes
@param cmd_0x15                  Array of lines where the first byte of each patch content line is 0x15
@param cmd_0x15_size             Array size
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga591bbfe4dbd39a6de29a37935a6abee5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'loadPatch';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_audiobw';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2682';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Loads a given SSB patch content.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Configures the Si4735-D60/SI4732-A10 device to work with SSB.

@param ssb_patch_content        point to patch content array
@param ssb_patch_content_size   size of patch content
@param ssb_audiobw              SSB Audio bandwidth; 0 = 1.2kHz (default); 1=2.2kHz; 2=3kHz; 3=4kHz; 4=500Hz; 5=1kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gafaabd6c73b7ad7c20ae959d5b75c1e71';
        sec-mem-ref-line = '3144';
        sec-mem-ref-name = 'patchPowerUp';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3103';
        sec-mem-ref-name = 'queryLibraryId';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga03bfe4b1e5ec84b7a933309095215f38';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'loadCompressedPatch';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd_0x15';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const int16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd_0x15_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_audiobw';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2683';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Loads the SSB compressed patch content.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Configures the Si4735-D60/SI4732-A10 device to work with SSB.

@param ssb_patch_content        point to patch content array
@param ssb_patch_content_size   size of patch content
@param cmd_0x15                  Array of lines where the first byte of each patch content line is 0x15
@param cmd_0x15_size             Array size
@param ssb_audiobw              SSB Audio bandwidth; 0 = 1.2kHz (default); 1=2.2kHz; 2=3kHz; 3=4kHz; 4=500Hz; 5=1kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gafaabd6c73b7ad7c20ae959d5b75c1e71';
        sec-mem-ref-line = '3144';
        sec-mem-ref-name = 'patchPowerUp';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3103';
        sec-mem-ref-name = 'queryLibraryId';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga7751b076ce0bcb62eade4f92cd8d93a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si4735_eeprom_patch_header
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'downloadPatchFromEeprom';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'eeprom_i2c_address';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2684';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Transfers the content of a patch stored in an eeprom to the SI4735 device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 To used this method, you will need an eeprom with the patch content stored into it.
\ilinebr\ilinebr This content have to be generated by the sketch <a href="https://github.com/pu2clr/SI4735/tree/master/examples/TOOLS/SI47XX_09_SAVE_SSB_PATCH_EEPROM" >SI47XX_09_SAVE_SSB_PATCH_EEPROM</a> on folder TOOLS.

@see SI47XX_09_SAVE_SSB_PATCH_EEPROM
@see si4735_eeprom_patch_header
@ref https://github.com/pu2clr/SI4735/tree/master/examples/TOOLS/SI47XX_09_SAVE_SSB_PATCH_EEPROM

@param eeprom_i2c_address
@return false if an error is found.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga0fcfd8e487c594707b3f2aaa71a86d68';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ssbPowerUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2685';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This function can be useful for debug and test.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gacfbec075648206fbe25834d998ed9e64';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMaxDelayPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ms';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2697';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Max Delay Power Up.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Sets the delay needed in ms after a powerup command (default is 10ms).
\ilinebr\ilinebr Some crystal oscillator might need more time to become stable (500 ms is the recommended).
\ilinebr\ilinebr Low values make the load SSB patch faster. However, it can make the system unstable.

@see MAX_DELAY_AFTER_POWERUP
@param ms delay in ms
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7bf47d3aab5952fa8895bd9094256dd8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMaxDelaySetFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ms';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2713';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Max Delay after Set Frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2704 

\ilinebr\ilinebr After the set frequency command, the system need a time to get ready to the next set frequency (default value 30ms).
\ilinebr\ilinebr Why the waitToSend() does not work in this case? No idea for while!
\ilinebr\ilinebr A low value makes the getFrequency command inaccurate.

@see  MAX_DELAY_AFTER_POWERUP
@param ms
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga794f6fe7987e146a0135b8e6fabec55c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyStep';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2743';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the current step value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2721 

\ilinebr\ilinebr This function does not check the limits of the current band. Do not take a step that will extend past the limit of the band.
\ilinebr\ilinebr Example:
@code 
setFM(6400,10800,10390,10);
setFrequencyStep(100); // the step will be 1MHz (you are using FM mode)
.
.
.
setAM(7000,7600,7100,5);
setFrequencyStep(1); // the step will be 1kHz (you are usin AM or SSB mode)
@endcode

@see setFM()
@see setAM()
@see setSSB()

@param step if you are using FM, 10 means 100kHz. If you are using AM 10 means 10kHz
            For AM, 1 (1kHz) to 1000 (1MHz) are valid values.
            For FM 5 (50kHz), 10 (100kHz) and 100 (1MHz) are valid values.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga8240278970ae8bf7283e14714b4329ad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2759';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current frequency saved in memory.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2751 

\ilinebr\ilinebr Unlike getFrequency, this method gets the current frequency recorded after the last setFrequency command.
\ilinebr\ilinebr This method avoids bus traffic and CI processing.
\ilinebr\ilinebr However, you can not get others status information like RSSI.

@see getFrequency()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga3cf856c44fcfffb3d81b22b1d09b881f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2770';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current status  of the Si47XX (AM, FM or SSB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 (FM) and 139 (AM)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga3cf856c44fcfffb3d81b22b1d09b881f';
        sec-mem-ref-line = '2770';
        sec-mem-ref-name = 'getStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7e88bb573604d465536c13554d5c61f8';
        sec-mem-ref-line = '934';
        sec-mem-ref-name = 'getFrequency';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga3cf856c44fcfffb3d81b22b1d09b881f';
        sec-mem-ref-line = '2770';
        sec-mem-ref-name = 'getStatus';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga748a4027f317972cb2fb1aed4865973b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setDeviceI2CAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'senPin';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2775';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the I2C Bus Address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 259 

\ilinebr\ilinebr The parameter senPin  can be 0 or 1 (is not the I2C bus address).
\ilinebr\ilinebr It refers to the SEN pin setup of your schematic (eletronic circuit).
\ilinebr\ilinebr If are using an SI4735 and SEN pin is connected to the ground, call this function with senPin = 0; else senPin = 1.
\ilinebr\ilinebr If are using an SI4732 and SEN pin is connected to the Vcc, call this function with senPin = 0; else senPin = 1.
\ilinebr\ilinebr Consider using the getDeviceI2CAddress function instead.

@param senPin 0 -  SI4735 device: when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to low (GND - 0V);
              1 -  Si4735 device: when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to high (+3.3V).
              If you are using an SI4732 device, reverse the above logic (1 - GND or 0 - +3.3V).

@see: getDeviceI2CAddress
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga8eddbfb3e62786aa4843d4bcd25da2b9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDeviceI2CAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'resetPin';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2776';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I2C bus address setup.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 213 

\ilinebr\ilinebr Scans for two possible addresses for the Si47XX (0x11 or 0x63).
\ilinebr\ilinebr This function also sets the system to use the found I2C bus address of Si47XX.
\ilinebr\ilinebr The default I2C address is 0x11. So, you do not need to use this function if you are using an SI4735 and the
\ilinebr\ilinebr SEN PIN is configured to ground (GND) or you are using the SI4732 and tnhe SEN PIN is configured to Vcc.
\ilinebr\ilinebr Use this function if you do not know how the SEN pin is configured.

@param uint8_t  resetPin MCU Mater (Arduino) reset pin

@return int16_t 0x11   if the SEN pin of the Si47XX is low or 0x63 if the SEN pin of the Si47XX is HIGH or 0x0 if error.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadc6014674bd4d1ee3aab56c605926db1';
        sec-mem-ref-line = '302';
        sec-mem-ref-name = 'reset';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga668008457910e916ebadf15bda2e5b29';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setDeviceOtherI2CAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'i2cAddr';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2777';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the other I2C Bus Address (for Si470X)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 281 

\ilinebr\ilinebr You can set another I2C address different of 0x11  and 0x63
\ilinebr\ilinebr It can be useful if another device made by Silicon Labs uses another address setup

@param uint8_t i2cAddr (example 0x10)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1gaecfcd50dbb3d95d66c8cdc77d52af63c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CLowSpeedMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2789';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets I2C bus to 10kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The functions below modify the clock frequency for I2C communication.
100kHz  is usually the baseline.
Use one of these funcition if you have a problem on the default configuration.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga00ade87631677b8cc88098d0b55cd5a4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CStandardMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2799';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets I2C bus to 100kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga7bb3214f70381cf26bb93f96729d641e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CFastMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2806';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets I2C bus to 400kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga7433b4e80fd3b501efeae7973d29c985';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CFastModeCustom';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
500000
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2819';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the I2C bus to a given value.
ATTENTION: use this function with caution.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2815 

@param value in Hz. For example: The values 500000 sets the bus to 500kHz.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga0a4b4ffbb7e3f2555a16e194eecfc6a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAudioMuteMcuPin';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'pin';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2834';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Audio Mute Mcu Pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function sets the mcu digital pin you want to use to control the external audio mute circuit.
\ilinebr\ilinebr Some users may be uncomfortable with the loud popping of the speaker during some transitions caused by some SI47XX commands.
\ilinebr\ilinebr This problem occurs during the transition from the power down to power up.
\ilinebr\ilinebr For example, when the user changes bands (FM to AM or AM to FM), the Si47XX devices must be powered down and powered up again.
\ilinebr\ilinebr If you have a mute circuit attached to a pin on teh MCU, then you can control the mute circuit from the MCU with this function.

@see setHardwareAudioMute
@param pin if 0 or greater, sets the MCU digital pin that controls the external circuit.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga54a3a0f412aa6318df0046d478bd134f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setHardwareAudioMute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'on';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2850';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Hardware Audio Mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Turns the Hardware audio mute on or off

@see setAudioMuteMcuPin

@param on  True or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '459';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '409';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '579';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga133ec11bfc2c68100b47a63da4484767';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'convertToChar';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'strValue';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'len';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'dot';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'separator';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'remove_leading_zeros';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
true
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2856';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Converts a number to a char array.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 It is useful to mitigate memory space used by functions like sprintf or other generic similar functions
\ilinebr\ilinebr You can use it to format frequency using decimal or thousand separator and also to convert small numbers.

@param value  value to be converted
@param strValue char array that will be receive the converted value
@param len final string size (in bytes)
@param dot the decimal or thousand separator position
@param separator symbol "." or ","
@param remove_leading_zeros if true removes up to two leading zeros (default is true)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga8a42350f66c17582b3346198f041e301';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'removeUnwantedChar';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'str';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '2857';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Removes unwanted character from char array.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 replaces non-printable characters to spaces
@param *str - string char array
@param size - char array size
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1ad2e95c88de0dfa58ff7aa36988071421';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'waitInterrupr';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1126';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1gaf361734168c913803e7e2dfbf4fe0c55';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getInterruptStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1127';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Updates bits 6:0 of the status byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 71 

\ilinebr\ilinebr This command should be called after any command that sets the STCINT or RSQINT bits.
\ilinebr\ilinebr When polling this command should be periodically called to monitor the STATUS byte, and when using interrupts, this command should be called after the interrupt is set to update the STATUS byte.
\ilinebr\ilinebr The CTS bit (and optional interrupt) is set when it is safe to send the next command.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 135
@see si47x_status
@see waitToSend

@return si47x_status the bit data structure with the status response
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1ga4d65660ec2b60d7486165ed8a7a92015';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sendProperty';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'propertyNumber';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
        sec-mem-param-defname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1133';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sends (sets) property to the SI47XX.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1454 

\ilinebr\ilinebr This method is used for others to send generic properties and params to SI47XX

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 68, 124 and  133.
@see setProperty, sendCommand, getProperty, getCommandResponse

@param propertyNumber property number (example: RX_VOLUME)
@param parameter   property value that will be seted
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gae1d866bfc4cb37c4268c8942b4b4d062';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sendSSBModeProperty';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1135';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Just send the property SSB_MOD to the device.  Internal use (privete method).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga6b2ad4d027463262350134490d16bf32';
        sec-mem-ref-line = '2927';
        sec-mem-ref-name = 'setSSBAudioBandwidth';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacacf1dac4c0ec170d1da629dd1fd30cb';
        sec-mem-ref-line = '2864';
        sec-mem-ref-name = 'setSSBAutomaticVolumeControl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gafc5e87c50a1eba6de9504c114cc1cb70';
        sec-mem-ref-line = '2879';
        sec-mem-ref-name = 'setSSBAvcDivider';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga9224e7d4ef14c887da96dbefd2dcefd3';
        sec-mem-ref-line = '2809';
        sec-mem-ref-name = 'setSSBConfig';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga6cde26a5abf759a628012d1457d85c72';
        sec-mem-ref-line = '2834';
        sec-mem-ref-name = 'setSSBDspAfc';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7554815b6d83128c5b15206e69c51f9f';
        sec-mem-ref-line = '2897';
        sec-mem-ref-name = 'setSSBSidebandCutoffFilter';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga91251dfc2ff9488aaef3aa1a528097d9';
        sec-mem-ref-line = '2849';
        sec-mem-ref-name = 'setSSBSoftMute';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gae4683e9a9fc7a633305b18dae54fbd83';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'disableFmDebug';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1136';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
There is a debug feature that remains active in Si4704/05/3x-D60 firmware which can create periodic noise in audio.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1748 

\ilinebr\ilinebr Silicon Labs recommends you disable this feature by sending the following bytes (shown here in hexadecimal form):
0x12 0x00 0xFF 0x00 0x00 0x00.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 299.
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '790';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gac65c552004f5e5e646638e37a5a68213';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer2A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1142';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 2A (Radio Text / Program Information)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 same clearRdsProgramInformation
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a0b40791484c47c0bf90d8dc255a20269';
        sec-mem-ref-line = '1068';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2048';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1915';
        sec-mem-ref-name = 'RdsInit';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga969b98c9bf21830454372b9dc68d4547';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsProgramInformation';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1148';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 2A (Radio Text / Program Information)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 same clearRdsBuffer2A
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a0b40791484c47c0bf90d8dc255a20269';
        sec-mem-ref-line = '1068';
        sec-mem-ref-name = 'rds_buffer2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaed0988165057aa2880f41b88ac236cd7';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer2B';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1155';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 2B (text / Station INformation 32 bytes)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Same clearRdsStationInformation
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a7aa607f80e97d45ac7a80cdcbdeb09f9';
        sec-mem-ref-line = '1069';
        sec-mem-ref-name = 'rds_buffer2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2048';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1915';
        sec-mem-ref-name = 'RdsInit';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga1ab4a1ae27bb27f9bffefa51fab4cfba';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsStationInformation';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1161';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 2B (text / Station INformation 32 bytes)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Same clearRdsBuffer2B
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a7aa607f80e97d45ac7a80cdcbdeb09f9';
        sec-mem-ref-line = '1069';
        sec-mem-ref-name = 'rds_buffer2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gadede134b96fd5650b87673ce413babb2';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer0A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1168';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 0A (text / Station Name)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 clearRdsStationName
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ac24a8bbd39628c2981208cb452165a0e';
        sec-mem-ref-line = '1070';
        sec-mem-ref-name = 'rds_buffer0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2048';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2260';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1915';
        sec-mem-ref-name = 'RdsInit';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga1c0ebbb5eef2b5384c7d1caa9ebe22c0';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsStationName';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1174';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 0A (text / Station Name)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 clearRdsBuffer0A
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ac24a8bbd39628c2981208cb452165a0e';
        sec-mem-ref-line = '1070';
        sec-mem-ref-name = 'rds_buffer0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga5507f4d98f389247320eb19b16395a27';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getSsbAgcStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1176';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries SSB Automatic Gain Control STATUS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 After call this method, you can call isAgcEnabled to know the AGC status and getAgcGainIndex to know the gain index value.

@see AN332 REV 0.8 Universal Programming Guide Amendment for SI4735-D60 SSB and NBFM patches; page 18.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '321';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a0b40791484c47c0bf90d8dc255a20269';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer2A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1068';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Radio Text buffer - Program Information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gac65c552004f5e5e646638e37a5a68213';
        sec-mem-ref-line = '1142';
        sec-mem-ref-name = 'clearRdsBuffer2A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga969b98c9bf21830454372b9dc68d4547';
        sec-mem-ref-line = '1148';
        sec-mem-ref-name = 'clearRdsProgramInformation';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga71cbaa3e0c103db7cee5969d162bec5d';
        sec-mem-ref-line = '2236';
        sec-mem-ref-name = 'getRdsText';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2295';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a7aa607f80e97d45ac7a80cdcbdeb09f9';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer2B';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1069';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Radio Text buffer - Station Informaation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gaed0988165057aa2880f41b88ac236cd7';
        sec-mem-ref-line = '1155';
        sec-mem-ref-name = 'clearRdsBuffer2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga1ab4a1ae27bb27f9bffefa51fab4cfba';
        sec-mem-ref-line = '1161';
        sec-mem-ref-name = 'clearRdsStationInformation';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2328';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ac24a8bbd39628c2981208cb452165a0e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer0A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1070';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Basic tuning and switching information (Type 0 groups)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gadede134b96fd5650b87673ce413babb2';
        sec-mem-ref-line = '1168';
        sec-mem-ref-name = 'clearRdsBuffer0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga1c0ebbb5eef2b5384c7d1caa9ebe22c0';
        sec-mem-ref-line = '1174';
        sec-mem-ref-name = 'clearRdsStationName';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2260';
        sec-mem-ref-name = 'getRdsText0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1af722be88a23730082909000dba8002ae';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_time';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1071';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS date time received information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5579fd16c75370bf36b1633fc00ec033';
        sec-mem-ref-line = '2635';
        sec-mem-ref-name = 'getRdsDateTime';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa8436bb156f3ac8321c65941be42fdba';
        sec-mem-ref-line = '2454';
        sec-mem-ref-name = 'getRdsTime';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1c7ec3559a78c5ef1bda49cb0abdf1de';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsTextAdress2A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1073';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
rds_buffer2A current position
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga71cbaa3e0c103db7cee5969d162bec5d';
        sec-mem-ref-line = '2236';
        sec-mem-ref-name = 'getRdsText';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2295';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1adecc2478d73cd7d18e1f88fd70d1488d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsTextAdress2B';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1074';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
rds_buffer2B current position
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2328';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a11477d1eb13efb348395a4984b67f392';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsTextAdress0A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1075';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
rds_buffer0A current position
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2260';
        sec-mem-ref-name = 'getRdsText0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a4b777d713357d2595e8617a63a32adbe';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsEndGroupA';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= false
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1077';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gadbc1132450ca79ed53e8e8cc0d2fe1d1';
        sec-mem-ref-line = '2527';
        sec-mem-ref-name = 'getEndIndicatorGroupA';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga339af59bbaefd8d60ba9b26e742bc01e';
        sec-mem-ref-line = '2537';
        sec-mem-ref-name = 'resetEndIndicatorGroupA';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a07ac2f7392dceae88cf87cf34d9960d1';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsEndGroupB';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= false
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1078';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga1cd6e6388fbb853cc24d3e0dc0df1eb6';
        sec-mem-ref-line = '2548';
        sec-mem-ref-name = 'getEndIndicatorGroupB';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga11a5d5eb070466b488e5adec650e625e';
        sec-mem-ref-line = '2558';
        sec-mem-ref-name = 'resetEndIndicatorGroupB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a243ecc7d01fc0d0e9cabb4ed00b9e47d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'deviceAddress';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= SI473X_ADDR_SEN_LOW
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1080';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current I2C bus address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a5f101b95b6fc5127b9e9d92a21f44ab6';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'maxDelaySetFrequency';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= MAX_DELAY_AFTER_SET_FREQUENCY
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1083';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the maximum delay after set frequency command (in ms).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a7ce25193b7f254c75967568967ba4d85';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'maxDelayAfterPouwerUp';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= MAX_DELAY_AFTER_POWERUP
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1084';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the maximum delay you have to setup after a power up command (in ms).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ad656f75a444c174797f6e7a8bf6e6ee2';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'maxSeekTime';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= MAX_SEEK_TIME
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1085';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the maximum time (ms) for a seeking process. Defines the maximum seeking time.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gaed67e2cee4e20551f3d522eea45fb7f5';
        sec-mem-ref-line = '2300';
        sec-mem-ref-name = 'setMaxSeekTime';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1abd965c0e49493bc2c7c37547d36dcc96';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lastTextFlagAB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1087';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a6470177f747ef7eb8e7d02c76f72b19e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resetPin';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1088';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
pin used on Arduino Board to RESET the Si47XX device
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1acc3d3a411d181e08846219661dbde1c4';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentTune';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1090';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
tell the current tune (FM, AM or SSB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a4663c1c92d980472556368944cb2fc68';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentMinimumFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1092';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
minimum frequency of the current band
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1aa3d41ad3fdb9d821a721a8acfaf47670';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentMaximumFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1093';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
maximum frequency of the current band
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a9da4f3df9e5e6b0448eff15e12f690dd';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentWorkFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1094';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ad72759f246cceb147bf031b72173b0ca';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentStep';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1096';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current step used to increment or decrement the frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a157e4ae8cd53396973584aa10888cd47';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lastMode';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= -1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1098';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the last mode used.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a650490ab792c1853c97f600661ecdaa1';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentAvcAmMaxGain';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= DEFAULT_CURRENT_AVC_AM_MAX_GAIN
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1100';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current Automatic Volume Control Gain for AM.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1ed7daaa2bd7f4619d50815e2ab5e520';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentClockType';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= XOSCEN_CRYSTAL
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1101';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current clock type used (Crystal or REF CLOCK)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a015d495717833b3a7e0b4a5ea8f09158';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ctsIntEnable';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1102';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1aa1a6e6b5698880e9c72506d8d7f2dcb0';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'gpo2Enable';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1103';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a27aa16267153f881845b57818a58053e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refClock';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 32768
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1105';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Frequency of Reference Clock in Hz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a9a9b7b8edceaf2bba16766c29af3b0a2';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refClockPrescale';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1106';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Prescaler for Reference Clock (divider).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a57f9da1eec6479f905f34e83f69eb3b6';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refClockSourcePin';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1107';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0 = RCLK pin is clock source; 1 = DCLK pin is clock source.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a4439c40db789f02371ea0fb9b22650c5';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1109';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
data structure to get current frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a8253ae2f3c87a6943776f8a63a691ca3';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_set_frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentFrequencyParams';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1110';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a9edd8cc9254695631795e7efc008eb28';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_rqs_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentRqsStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current Radio SIgnal Quality status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a7ad35ba002b73b66e9ce97b304854695';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_response_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1112';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current device status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ad03d545e53a7ca2fe072a7b03d60910e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_firmware_information
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'firmwareInfo';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1113';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
firmware information
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a42d5c6991d90ea1c8ae35b74f8bccc48';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_rds_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentRdsStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current RDS status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1adf2d1f37ec9edf95e14aecb3cdc7417d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_agc_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentAgcStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1115';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current AGC status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a74ee9c99b1e092f7b1efa2f771f38324';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_ssb_mode
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentSSBMode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1116';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
indicates if USB or LSB
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1331b701088bda20bf0844e2e38be142';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si473x_powerup
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'powerUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1118';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1aa5220772c468fcfb69b5d16163de73fc';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'volume';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 32
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1120';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current vlume setup (0-63).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a46c6ea8c36a2c4c47ee9cac8dd314319';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentAudioMode';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= SI473X_ANALOG_AUDIO
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1122';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Current audio mode used (ANALOG or DIGITAL or both)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a05730ca069db4be7c45a9c92f29d3b52';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentSsbStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1123';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1a521eccd64f760a6f6a1ae55c20f2b9';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'audioMuteMcuPin';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= -1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1124';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '1065';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
SI4735 Class.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
SI4735 Class definition
\iline 1055 

\ilinebr\ilinebr This class implements all functions to help you to control the Si47XX devices.
This library was built based on âSi47XX PROGRAMMING GUIDE; AN332 (REV 1.0)â.
It also can be used on all members of the SI473X family respecting, of course, the features available
for each IC version.  These functionalities can be seen in the comparison matrix shown in
table 1 (Product Family Function); pages 2 and 3 of the programming guide.

@author PU2CLR - Ricardo Lima Caratti
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'SI4735';
        node-link = {
          node-link-id = 'class_s_i4735';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentFrequency
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentFrequencyParams
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentRqsStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
firmwareInfo
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentRdsStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentAgcStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentSSBMode
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
powerUp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'si473x_powerup';
        node-link = {
          node-link-id = 'group__group01#unionsi473x__powerup';
        };
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'si47x_agc_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__agc__status';
        };
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'si47x_firmware_information';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__firmware__information';
        };
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'si47x_frequency';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__frequency';
        };
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'si47x_rds_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__rds__status';
        };
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'si47x_response_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__response__status';
        };
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'si47x_rqs_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__rqs__status';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'si47x_set_frequency';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__set__frequency';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'si47x_ssb_mode';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__ssb__mode';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_digital_output_format';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2f5af498b9dfe1e33765207842b3796d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si4735_digital_output_format::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1013';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0fa2c05d8877d3c680e904842993c33e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1014';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '1004';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Digital audio output format data structure (Property 0x0102. DIGITAL_OUTPUT_FORMAT).
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 997 

\ilinebr\ilinebr Used to configure: DCLK edge, data format, force mono, and sample precision.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 195.
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); chapter 9 - Digital Audio Interface
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_digital_output_format.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8e0cf30fb9cddc896d94167934615d42';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OSIZE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1008';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output Audio Sample Precision (0=16 bits, 1=20 bits, 2=24 bits, 3=8bits).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a61324adf2d131b4df8038991cbca0842';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OMONO';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1009';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output Mono Mode (0=Use mono/stereo blend ).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a870fffeed608a381a3abc7e27b22a7ee';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OMODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1010';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output Mode (0000=I2S, 0110 = Left-justified, 1000 = MSB at second DCLK after DFS pulse, 1100 = MSB at first DCLK after DFS pulse).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abfdc1bd5a8f46739eef7fd4fa44ad600';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OFALL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1011';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output DCLK Edge (0 = use DCLK rising edge, 1 = use DCLK falling edge)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a275876e34cf609db118f3d84b799a790';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dummy';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1012';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '1006';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_digital_output_sample_rate';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9988ba829a46409f23d7cb9bb0f156d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DOSR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1047';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '1045';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Digital audio output sample structure (Property 0x0104. DIGITAL_OUTPUT_SAMPLE_RATE).
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 1039 

\ilinebr\ilinebr Used to enable digital audio output and to configure the digital audio output sample rate in samples per second (sps).

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 196.
_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_eeprom_patch_header';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a206c5907140c242eff43969fdbf1ee39';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si4735_eeprom_patch_header::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1032';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a94433975a0b1ff748a66a19e4125dc5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1033';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '1024';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
patch header stored in a eeprom
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 This data type represents o header of a eeprom with a patch content
\ilinebr\ilinebr This structure will be used to read an eeprom generated by leo sketch SI47XX_09_SAVE_SSB_PATCH_EEPROM.ino.
\ilinebr\ilinebr The sketch SI47XX_09_SAVE_SSB_PATCH_EEPROM can be found on Examples/SI47XX_TOOLS folder
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_eeprom_patch_header.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a327e0f8ef808c5d8c6072a07f0a26d26';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reserved';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1028';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a824abc0aadb3f2d4a53b915f10a2a60b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'status';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1029';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6672901531915ba41508c09a77f77a8d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patch_id';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1030';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac951249c14ef40b4436af008145347a9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patch_size';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '1031';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '1026';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af785eeee072dbe5d532fc7e76cd9e8eb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si473x_gpio::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '268';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Refined powerup parameters.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae560f6b01049205986b273a5c491081d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '269';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '259';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for Enables output for GPO1, GPO2 and GPO3.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 253 

\ilinebr\ilinebr GPO1, 2, and 3 can be configured for output (Hi-Z or active drive) by setting the GPO1OEN, GPO2OEN, and GPO3OEN bit.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 82 and 144
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '263';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9e8c8440a0de220ec3e67ac942bc93ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO1OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '264';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO1 Output Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a16e39ff0e3715799964f55ae2059869d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO2OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '265';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO2 Output Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9192331445de77eec6c569dd39215683';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO3OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '266';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO3 Output Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '267';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '261';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio_ien';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a41278f2e60bae96f74a825b4a741e273';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si473x_gpio_ien::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '295';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1d2b8d04e8ae43c085f8223b15812e9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '296';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '281';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for Configuring the sources for the GPO2/INT interrupt pin.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 275 

\ilinebr\ilinebr Valid sources are the lower 8 bits of the STATUS byte, including CTS, ERR, RSQINT, and STCINT bits.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 146
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio_ien.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab09bf67829bc4d5914945a87be624698';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '285';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek/Tune Complete Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '286';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1afa4d97a23dde5b951754d19241a9c117';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '287';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSQ Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '288';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a459917c791e67eab1cdc18407dc6f507';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERRIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '289';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ERR Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a70cc84d478cf749951dcd0abde88b0ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTSIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '290';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CTS Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3d9c07e46addffde9770f779a2f71864';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCREP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '291';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STC Interrupt Repeat (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '292';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7370ae224941074a02e32d4ee6901d56';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQREP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '293';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSQ Interrupt Repeat (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9182569d693623e6b469099542b303e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY4';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '294';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '283';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_powerup';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1d76ab95c8f37f3ee9f2266e0a818455';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si473x_powerup::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '246';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Refined powerup parameters.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab82e658c5816b0c31e32e100ff776ebe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '247';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Raw powerup parameters data. Same arg memory position. So, same content.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '234';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Power Up arguments data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 230 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 65
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_powerup.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1e49c8ad07b69571bfcafaf18ac9fa5b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FUNC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '239';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Function (0 = FM Receive; 1â14 = Reserved; 15 = Query Library ID)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a22c9aef8785be330d7e1faf88bcfd4b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'XOSCEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '240';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Crystal Oscillator Enable (0 = crystal oscillator disabled; 1 = Use crystal oscillator and and OPMODE=ANALOG AUDIO) .
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a63bc9a3997d66d835d9f3ec29451407d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PATCH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '241';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Patch Enable (0 = Boot normally; 1 = Copy non-volatile memory to RAM).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a16e39ff0e3715799964f55ae2059869d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO2OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '242';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO2 Output Enable (0 = GPO2 output disabled; 1 = GPO2 output enabled).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a70cc84d478cf749951dcd0abde88b0ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTSIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '243';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CTS Interrupt Enable (0 = CTS interrupt disabled; 1 = CTS interrupt enabled).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1adc7ae7360da2a9886f674ed6943a2524';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OPMODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '245';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Application Setting. See page 65.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '236';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_overrride';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a05a271d0b62d67a76532e70016cc5056';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_agc_overrride::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '941';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b8218655c25e1f8d75d92818ec24f20';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '942';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '932';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
If FM, Overrides AGC setting by disabling the AGC and forcing the LNA to have a certain gain that ranges between 0
(minimum attenuation) and 26 (maximum attenuation).
If AM, overrides the AGC setting by disabling the AGC and forcing the gain index that ranges between 0

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 81; for AM page 143
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_overrride.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeaad2cabb6417746b2dd432eda476f55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCDIS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '937';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abd2103035a8021942390a78a431ba0c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '938';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a26bd0af30c189325bd004e10593eb5cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCIDX';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '940';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '934';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aac4fc78ed4e4f265c74a9e50c2e63592';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_agc_status::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '919';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2f03c32a90a7991f2433bf8a5291885d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '920';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '902';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
AGC data types
FM / AM and SSB structure to AGC

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 80; for AM page 142
@see AN332 REV 0.8 Universal Programming Guide Amendment for SI4735-D60 SSB and NBFM patches; page 18.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_status.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '907';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '908';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '909';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '910';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '911';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '912';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '913';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeaad2cabb6417746b2dd432eda476f55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCDIS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '915';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abd2103035a8021942390a78a431ba0c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '916';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a26bd0af30c189325bd004e10593eb5cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCIDX';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '918';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '904';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_antenna_capacitor';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab7ef1b0222904baf09a919e5704cdd44';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_antenna_capacitor::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '325';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa59f9604df88a98b91295b0a9c009bbd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'value';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '326';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '319';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Antenna Tuning Capacitor data type manupulation.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_antenna_capacitor.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0475bf71e813922e317ef7cb7b3df9fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '323';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Antenna Tuning Capacitor High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5f437dbf77cdadcbb215ce5db44edbe6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '324';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Antenna Tuning Capacitor Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '321';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_bandwidth_config';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5da2dcc72ae3a6f0ced1aad7594362d5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_bandwidth_config::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'param';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '968';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa8fd81f2f62788fac6c3cce7b1ea765d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '969';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '960';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
The bandwidth of the AM channel filter data type
AMCHFLT values: 0 = 6 kHz Bandwidth
                1 = 4 kHz Bandwidth
                2 = 3 kHz Bandwidth
                3 = 2 kHz Bandwidth
                4 = 1 kHz Bandwidth
                5 = 1.8 kHz Bandwidth
                6 = 2.5 kHz Bandwidth, gradual roll off
                7â15 = Reserved (Do not use)

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 125 and 151
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_bandwidth_config.param';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad992f11e8896f68a81b13fcd6ae2a3b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AMCHFLT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '964';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects the bandwidth of the AM channel filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '965';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae6741d3dc93d6502bb837ca874ee4f94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AMPLFLT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '966';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enables the AM Power Line Noise Rejection Filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '967';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '962';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_information';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4f71bb27ff0e3ba8de0412d43a63010e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_firmware_information::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '486';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa2ba7bbaa745c8ca18c83226246654e5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '487';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '465';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data representation for  Firmware Information (GET_REV)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 459 

\ilinebr\ilinebr The part number, chip revision, firmware revision, patch revision and component revision numbers.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 66 and 131
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_information.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '470';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '471';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '472';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '473';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '474';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '475';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '476';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b6166324dc52f374d908e03602b1daf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '477';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP1 - Final 2 digits of Part Number (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67c65213847ea2a824306b665bd2851f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '478';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP2 - Firmware Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae0c243088677f14fc8dd9c9508e068ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '479';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP3 - Firmware Minor Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3ab7055a80e6c432a1116bfb27181811';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PATCHH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '480';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - Patch ID High byte (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a07cead1237e34b4696dce647443ad10e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PATCHL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '481';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - Patch ID Low byte (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aab5038bb547e9aa4b543112de6904611';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CMPMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '482';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - Component Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a62c98580b8d5220cf351861ddd86fd07';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CMPMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '483';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - Component Minor Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab9dbe73951d365ea8a945760cec79a5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CHIPREV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '484';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP8 - Chip Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '467';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_query_library';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4b1bc1ed10aa884ede69b0ae5561cbba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_firmware_query_library::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '522';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5235c5b07b71d6dc4c76c275a091c63c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '523';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '502';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Firmware Query Library ID response.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 493 

\ilinebr\ilinebr Used to represent the response of a power up command with FUNC = 15 (patch)

To confirm that the patch is compatible with the internal device library revision, the library
revision should be confirmed by issuing the POWER_UP command with Function = 15 (query library ID)

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 12
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_query_library.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '507';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '508';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '509';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '510';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '511';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '512';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '513';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b6166324dc52f374d908e03602b1daf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '514';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP1 - Final 2 digits of Part Number (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67c65213847ea2a824306b665bd2851f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '515';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP2 - Firmware Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae0c243088677f14fc8dd9c9508e068ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '516';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP3 - Firmware Minor Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad8179a090910d4923b044cbce813c8ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '517';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - Reserved, various values.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0b5885d29a74762639e4b55c51ce2d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '518';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - Reserved, various values.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab9dbe73951d365ea8a945760cec79a5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CHIPREV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '519';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - Chip Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1afb747a51a99db36a17a01f11e3cafbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'LIBRARYID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '520';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - Library Revision (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '504';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frequency';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a238632206d118acac9b1ede44a0d3af6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_frequency::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '311';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Raw data that represents the frequency stored in the Si47XX device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aad12ac434ec9907e90a3f6b95377ca76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'value';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '312';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
frequency (integer value)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '305';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Represents how the  frequency is stored in the si4735.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 It helps to convert frequency in uint16_t to two bytes (uint8_t) (FREQL and FREQH)
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frequency.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a858dfb4be81dfbd057aa63aded06bf3d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '309';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tune Frequency Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8836c6ec927c24305d2fd26a5aec2e2b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '310';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tune Frequency High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '307';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frontend_agc_control';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aba5582f017d6f5d656993ba8d4a97795';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_frontend_agc_control::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'field';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '622';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aff89664deed303ec065bbad68b2053ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'word';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '623';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '616';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Adjusts the AM AGC for external front-end attenuator and external front-end cascode LNA.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0); page 168
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frontend_agc_control.field';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aae22ea8fbb38533f36125b5ccc45338b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ATTN_BACKUP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '620';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeb3a984f28076574a7347412473f7c13';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MIN_GAIN_INDEX';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '621';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '618';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_property';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae671ffe4b04609a80825fc1df1a7e292';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_property::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '559';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7c04205c5a1798b35b738b2908853bfa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'value';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '560';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '553';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type to deal with SET_PROPERTY command.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 549 

\ilinebr\ilinebr Property Data type (help to deal with SET_PROPERTY command on si473X)
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_property.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1f3859652867ab4a967c5caa3e2ab353';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'byteLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '557';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b280732d6c370d505d537b0ab9f7e30';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'byteHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '558';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '555';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blocka';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a404ba554979caaf39c11a7783a596bd1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blocka::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '765';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a809d189eba718f9245672c9abab05690';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blocka::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '770';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '760';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Block A data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blocka.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aaee469db16fdff1aa5439b776b3d5860';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '768';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a72a22270b4e47acf046fad64a8720e4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '769';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '766';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blocka.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a72ab8af56bddab33b269c5964b26620a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'pi';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '764';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '762';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abed5e383b3c62bc0a091efdd326c40d8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'group0';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '803';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8e070d0226a78cd520ede1037a6a24d4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'group2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '812';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad3111bc05fa4a108d7d7eadf0dbe94ba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '821';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1afb2283c294aa4046fb606eef18839331';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '826';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '791';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Block B data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 776 

\ilinebr\ilinebr For GCC on System-V ABI on 386-compatible (32-bit processors), the following stands:

1) Bit-fields are allocated from right to left (least to most significant).
2) A bit-field must entirely reside in a storage unit appropriate for its declared type.
   Thus a bit-field never crosses its unit boundary.
3) Bit-fields may share a storage unit with other struct/union members, including members that are not bit-fields.
   Of course, struct members occupy different parts of the storage unit.
4) Unnamed bit-fields' types do not affect the alignment of a structure or union, although individual
   bit-fields' member offsets obey the alignment constraints.

@see also Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 78 and 79
@see also https://en.wikipedia.org/wiki/Radio_Data_System
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.group0';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a884d9804999fc47a3c2694e49ad2536a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'address';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '795';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1b1c0cd777edd2e5cfcaf8e2e7dcab8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '796';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7a663caea1b722a63dc2868158ed584d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '797';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a890a10788493e3d572586e991cd43543';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'TA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '798';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '799';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '800';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '801';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '802';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '793';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.group2';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a884d9804999fc47a3c2694e49ad2536a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'address';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '806';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a652bfdc159637b708ac6e6f92d7650bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'textABFlag';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '807';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '808';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '809';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '810';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '811';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '804';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a72a22270b4e47acf046fad64a8720e4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '824';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aaee469db16fdff1aa5439b776b3d5860';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '825';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '822';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9a0364b9e99bb480dd25e1f0284c8555';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'content';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '815';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a652bfdc159637b708ac6e6f92d7650bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'textABFlag';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '816';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '817';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '818';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '819';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '820';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '813';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_command';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abc89226fb1cac2f4db84d19f6aac5960';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_command::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '642';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3c151920e2f167bfa7c47193a20ecb58';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '643';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '634';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for RDS Status command and response information.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 629 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 77 and 78
@see Also https://en.wikipedia.org/wiki/Radio_Data_System
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_command.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1b4c5526f2abe4a5d02be4016a44020';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTACK';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '638';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a89ada8287a1cbe8c1cbcbaf629797e69';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTFIFO';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '639';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0ad827114d7e2367674a05bbcdc53eda';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STATUSONLY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '640';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a275876e34cf609db118f3d84b799a790';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dummy';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '641';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '636';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_config';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a54505a8468e1aafafe7bb7485c2241e9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_config::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '751';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ace0fc779a1af19098b03178fcbaafffe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '752';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '741';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for FM_RDS_CONFIG Property.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 728 

IMPORTANT: all block errors must be less than or equal the associated block error threshold for the group
to be stored in the RDS FIFO.
0 = No errors; 1 = 1â2 bit errors detected and corrected; 2 = 3â5 bit errors detected and corrected; 3 = Uncorrectable.
Recommended Block Error Threshold options:
 2,2,2,2 = No group stored if any errors are uncorrected.
 3,3,3,3 = Group stored regardless of errors.
 0,0,0,0 = No group stored containing corrected or uncorrected errors.
 3,2,3,3 = Group stored with corrected errors on B, regardless of errors on A, C, or D.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 58 and 104
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_config.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af06feb780d38d7dc59d42878a3353c7f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '745';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = RDS Processing Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '746';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a08e321d989e5154ff4e8a2b5d0fbb057';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHD';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '747';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKD.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1246c30829bddc4264fe51b0abc00dbe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '748';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKC.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a659adbc2d25b37801235e309fb25737f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '749';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKB.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a955ffa2ef1f258071376294e01482059';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '750';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKA.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '743';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_date_time';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aca88dde0784fe180c29a66b4e0b65104';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_date_time::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '889';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4632acc947ded9cc9577df163fabba69';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '890';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '880';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Group type 4A ( RDS Date and Time)
When group type 4A is used by the station, it shall be transmitted every minute according to EN 50067.
This Structure uses blocks 2,3 and 5 (B,C,D)

ATTENTION:
To make it compatible with 8, 16 and 32 bits platforms and avoid Crosses boundary, it was necessary to
split minute and hour representation.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_date_time.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7a86c157ee9713c34fbd7a1ee40f0c5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'offset';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '884';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5ba6e404c489ff4f757e7c77cb9fa310';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'offset_sense';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '885';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0a7d55be9d12a369a6a8da0fb517fba4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'minute';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '886';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a896c55cc5e46fab38ce9f51ebf7bfcd3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'hour';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '887';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7f7685b39180278dd0fa69f523c7bd24';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mjd';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '888';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '882';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_int_source';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab5540a81bf1596dbbc015ef2f458a5b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_int_source::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '721';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abfd03e295ce96a214407c2705d9b96c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '722';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '709';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
FM_RDS_INT_SOURCE property data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 704 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 103
@see also https://en.wikipedia.org/wiki/Radio_Data_System
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_int_source.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa75f4ec874d6a5f181b8e423950bfde0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSRECV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '713';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate RDSINT when RDS FIFO has at least FM_RDS_INT_FIFO_COUNT entries.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a95a3b24fca811ec5f3f6572fe7da0bcf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCLOST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '714';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate RDSINT when RDS loses synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1cd218d6a523d2d9120d8ab8a9dd93c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCFOUND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '715';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
f set, generate RDSINT when RDS gains synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '716';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write to 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa2d4c2b673c2842773854cdd6f28e033';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '717';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate an interrupt when Block A data is found or subsequently changed.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67434ed313bef4d6221df6a51971c994';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '718';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate an interrupt when Block B data is found or subsequently changed.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '719';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved - Always write to 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '720';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved - Always write to 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '711';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a48fe19756bd1b858964dd8a74c5651a3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_status::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '697';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a526947c93583b28968de411b0206fdfb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '698';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '653';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Response data type for current channel and reads an entry from the RDS FIFO.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 649 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 77 and 78
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_status.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '658';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '659';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '660';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '661';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '662';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '663';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '664';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa75f4ec874d6a5f181b8e423950bfde0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSRECV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '666';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Received; 1 = FIFO filled to minimum number of groups set by RDSFIFOCNT.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a95a3b24fca811ec5f3f6572fe7da0bcf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCLOST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '667';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Sync Lost; 1 = Lost RDS synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1cd218d6a523d2d9120d8ab8a9dd93c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCFOUND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '668';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Sync Found; 1 = Found RDS synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '669';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa2d4c2b673c2842773854cdd6f28e033';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '670';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS New Block A; 1 = Valid Block A data has been received.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67434ed313bef4d6221df6a51971c994';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '671';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS New Block B; 1 = Valid Block B data has been received.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9182569d693623e6b469099542b303e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY4';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '672';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67a91dac9065974c1b69fea4ad395faf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '674';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Sync; 1 = RDS currently synchronized.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1fc4251a40ec4352f10fc3ecb20f2c79';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY5';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '675';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a97eaf5b8af040d5cc1d1951e45846c72';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GRPLOST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '676';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Group Lost; 1 = One or more RDS groups discarded due to FIFO overrun.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae47e340f9899842ec70c03024de8cf89';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY6';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '677';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4a3b791b8fe2bf1f76df87f754967f5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSFIFOUSED';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '679';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP3 - RDS FIFO Used; Number of groups remaining in the RDS FIFO (0 if empty).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2843da4b952c7be9fb480c58a29ea378';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKAH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '680';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - RDS Block A; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0f0906669ad239fff687df038925d138';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKAL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '681';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - RDS Block A; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a41992f4f83625a17ffbb4df533f4d192';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKBH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '682';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - RDS Block B; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5393be02dfd7f56d0567e5f1406fffed';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKBL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '683';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - RDS Block B; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae464b56d44650f86be59aeef27abfbbe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKCH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '684';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP8 - RDS Block C; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8c78c7dd8484c36b843457e3e4f165ac';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKCL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '685';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP9 - RDS Block C; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab46176005c9a362139e953d3633ed8f8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKDH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '686';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP10 - RDS Block D; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae0fd3095e63eb37b945a03706e7fa697';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKDL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '687';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP11 - RDS Block D; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7d449b80d36bbc910ef88b6fcfe90364';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLED';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '693';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8e74ab448e91f67eaabee7a52ab05fec';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLEC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '694';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa4eb947cc07974dfc44c1da340b21c0f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLEB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '695';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abe92870ea28d50ecdfd8f987836e103f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLEA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '696';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '655';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_response_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa8d3424f318eb0c292eed612f5710c44';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_response_status::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '452';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9b236e03804629e73a4b19fddb72b4cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '453';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check it.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '423';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Response status command.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 417 

\ilinebr\ilinebr Response data from a query status command

@see Si47XX PROGRAMMING GUIDE; pages 73 and
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_response_status.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '428';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek/Tune Complete Interrupt; 1 = Tune complete has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '429';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '430';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Radio Data System (RDS) Interrup; 0 = interrupt has not been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '431';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Received Signal Quality Interrupt; 0 = interrupt has not been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '432';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '433';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Error. 0 = No error 1 = Error.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '434';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear to Send.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac9f1a6384b1c466d4612f513bd8e13ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'VALID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '436';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Valid Channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4f37d8e1a484e1ac152858e71923f86c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AFCRL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '437';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AFC Rail Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '438';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4163d039102268d1b6ac272a25006d7f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLTF';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '439';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reports if a seek hit the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0d093ad5e587811b66f0047303ec86a9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'READFREQH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '441';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read Frequency High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad667880f1209fa0da1d2c87c794329c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'READFREQL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '443';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read Frequency Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6833f5d3374c1679bea428b50dbad9cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '445';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Received Signal Strength Indicator (dBÎ¼V)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8dc5367d65459f69d78eb03e93f7703f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '447';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This byte contains the SNR metric when tune is complete (dB).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a36b0ca295026d76ee15df50dc4991e90';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '449';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If FM, contains the multipath metric when tune is complete; IF AM READANTCAPH (tuning capacitor value high byte)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa4c3e6fac8670fa0b36ba68ff185aa24';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'READANTCAP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '451';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If FM, contains the current antenna tuning capacitor value; IF AM READANTCAPL (tuning capacitor value low byte)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '425';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rqs_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af86aa3d6afe48037aa0a364388d29d57';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rqs_status::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '607';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a184e0892bc82522efe50c49836bb8cc5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '608';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '572';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Radio Signal Quality data representation.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 566 

\ilinebr\ilinebr Data type for status information about the received signal quality (FM_RSQ_STATUS and AM_RSQ_STATUS)

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 75 and
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rqs_status.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '577';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '578';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '579';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '580';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '581';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '582';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '583';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a78e3f2f0b0c5b1dfd51e3c0d48ae18e3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSIILINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '585';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSSI Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1c2886a1d02e462622c810dec48a7a8d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSIHINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '586';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSSI Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a97383bc737ce99a121985160e6ffa344';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNRLINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '587';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SNR Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae2e739596a7340b62844e12390115e6a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNRHINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '588';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SNR Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af07f7e10faec4b062b389868532a8146';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULTLINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '589';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multipath Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6b4ed08de1237c36d005669ead7d8a50';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULTHINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '590';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multipath Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '591';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a78a25db6cd73b193ba6c941df8584d35';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLENDINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '592';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blend Detect Interrupt.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac9f1a6384b1c466d4612f513bd8e13ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'VALID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '594';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Valid Channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4f37d8e1a484e1ac152858e71923f86c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AFCRL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '595';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AFC Rail Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9182569d693623e6b469099542b303e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY4';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '596';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a018a3d212081bb86b34e6b8fbd88c4e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SMUTE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '597';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Soft Mute Indicator. Indicates soft mute is engaged.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1fc4251a40ec4352f10fc3ecb20f2c79';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY5';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '598';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aedcdb3b2f6ac6daf3bacf8bb54a92d28';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STBLEND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '600';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Indicates amount of stereo blend in% (100 = full stereo, 0 = full mono).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aece6117f0bc60ec824fe5d441abdb288';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PILOT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '601';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Indicates stereo pilot presence.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6833f5d3374c1679bea428b50dbad9cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '603';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - Contains the current receive signal strength (0â127 dBÎ¼V).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8dc5367d65459f69d78eb03e93f7703f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '604';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - Contains the current SNR metric (0â127 dB).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a36b0ca295026d76ee15df50dc4991e90';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '605';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - Contains the current multipath metric. (0 = no multipath; 100 = full multipath)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0c144971635328e95870811948c9071a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQOFF';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '606';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - Signed frequency offset (kHz).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '574';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_seek';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aedf91f573575f3ceb1297159f0535bf8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_seek::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '371';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a894bfdc90f00f3064991edc0c439e66a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '372';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '363';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Seek frequency (automatic tuning). ARG1.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 355 

\ilinebr\ilinebr Represents searching for a valid frequency data type AM and FM.
\ilinebr\ilinebr When AM, the searching data have to be complemented by si47x_seek_am_complement.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 72 and 137
@see si47x_seek_am_complement
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_seek.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad8179a090910d4923b044cbce813c8ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '367';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae1c8555fcf0ea2bb648a6fd527d658c0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'WRAP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '368';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Determines whether the seek should Wrap = 1, or Halt = 0 when it hits the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aed8a1fd68dec9364930b51d020ba07d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEEKUP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '369';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Determines the direction of the search, either UP = 1, or DOWN = 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0b5885d29a74762639e4b55c51ce2d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '370';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '365';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_seek_am_complement';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a55b8606c703c038e1d4360893451711c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ARG2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '386';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9fb726b115307ae7455d2dddba2d7d36';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ARG3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '387';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1adc4349d375ca2c36518618625f48e4b8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '388';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd74666ecda0448b052a5ad1e9ade2d2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '389';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '384';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Seek frequency (automatic tuning) AM complement (ARG2, ARG3, ARG4 and ARG5)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 378 

\ilinebr\ilinebr Represents AM complement searching information for a valid frequency data type.

@see  @see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 72 and 137
_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_set_frequency';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa5c0dc3dd7bde96cd11ed795d89951d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_set_frequency::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '348';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a57e2bfb6b0c9c0fb7d6ffac131824b8a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '349';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '336';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
AM Tune frequency data type command (AM_TUNE_FREQ command)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 332 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 135
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_set_frequency.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1adca6e617f6fb54033deb311e7e7c93cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FAST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '340';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG1 - FAST Tuning. If set, executes fast and invalidated tune. The tune status will not be accurate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1da4c7af6c0e106e2aec1c483252b329';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREEZE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '341';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Valid only for FM (Must be 0 to AM)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '342';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always set 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a46ba89190297ccd0df7c8f8b5f72497f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'USBLSB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '343';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Upper Side Band (USB) and Lower Side Band (LSB) Selection. 10 = USB is selected; 01 = LSB is selected.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8836c6ec927c24305d2fd26a5aec2e2b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '344';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG2 - Tune Frequency High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a858dfb4be81dfbd057aa63aded06bf3d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '345';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG3 - Tune Frequency Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5f437dbf77cdadcbb215ce5db44edbe6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '346';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG4 - Antenna Tuning Capacitor High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0475bf71e813922e317ef7cb7b3df9fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '347';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG5 - Antenna Tuning Capacitor Low byte. Note used for FM.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '338';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_ssb_mode';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1affb467645fbaf299d351c3fc7c0ed3bb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_ssb_mode::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'param';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '990';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac57630fdfe3cf7069f8483a50a41c501';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '991';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '979';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
SSB - datatype for SSB_MODE (property 0x0101)

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_ssb_mode.param';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a38eda9266347ac0c0f09182baa2fefd0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AUDIOBW';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '983';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0 = 1.2kHz (default); 1=2.2kHz; 2=3kHz; 3=4kHz; 4=500Hz; 5=1kHz
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5fd112c4d977a89cf8b7717ef0a12a9b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SBCUTFLT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '984';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB side band cutoff filter for band passand low pass filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a911ed778d046d0d22bf2df2938c1f084';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AVC_DIVIDER';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '985';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
set 0 for SSB mode; set 3 for SYNC mode;
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a55576f7d4412f08280e49fba44ef707a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AVCEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '986';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Automatic Volume Control (AVC) enable; 0=disable; 1=enable (default);.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeb7815cb295d531065f797c39cf36da5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SMUTESEL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '987';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Soft-mute Based on RSSI or SNR.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '988';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0;.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5ff4a830553e8db4d36f8b3677e3d412';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DSP_AFCDIS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '989';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0=SYNC MODE, AFC enable; 1=SSB MODE, AFC disable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '981';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1ac420bbf82359094748a4f97304adb8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_status::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '410';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8afecb26fbffbfa5a7d3d46d90becabc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '411';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '399';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Status response data representation.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 395 

\ilinebr\ilinebr Represents searching for a valid frequency data type.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_status.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '403';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Tune complete has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '404';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved (Values may vary).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '405';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Radio data system interrupt has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '406';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Received Signal Quality measurement has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '407';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved (Values may vary).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '408';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Error.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '409';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0 = Wait before sending next command; 1 = Clear to send next command.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '401';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_tune_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a78bd3a3ad2369186f0195223f408311d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_tune_status::
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '542';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aefcfcb9eaa95ed7d8ce1740ac7f9eb7e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '543';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '535';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Seek station status.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
\iline 529 

\ilinebr\ilinebr Status of FM_TUNE_FREQ or FM_SEEK_START commands or Status of AM_TUNE_FREQ or AM_SEEK_START commands.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 and 139
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_tune_status.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1b4c5526f2abe4a5d02be4016a44020';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTACK';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '539';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, clears the seek/tune complete interrupt status indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2027c027133e22c8929e2874dc44dd36';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CANCEL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '540';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, aborts a seek currently in progress.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0b5885d29a74762639e4b55c51ce2d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      sec-mem-desc-line = '541';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  cp-fileline  = '537';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
file = {
  file-id   = 'patch__full_8h';
  file-name = 'patch_full.h';
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'patch__full_8h_1a52825929f968bc7a855a559fa9ebba7b';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
const PROGMEM uint8_t
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'ssb_patch_content';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
=
    {   0x15, 0x00, 0x0F, 0xE0, 0xF2, 0x73, 0x76, 0x2F,
        0x16, 0x6F, 0x26, 0x1E, 0x00, 0x4B, 0x2C, 0x58,
        0x16, 0xA3, 0x74, 0x0F, 0xE0, 0x4C, 0x36, 0xE4,
        0x16, 0x0A, 0xE0, 0xF8, 0xCD, 0xF3, 0x87, 0xDA,
        0x16, 0x2E, 0xA1, 0xDF, 0x6E, 0xEB, 0x35, 0x9C,
        0x16, 0x9F, 0x1A, 0x09, 0xEE, 0xB9, 0xB5, 0x45,
        0x16, 0xA3, 0x5C, 0x0F, 0xA2, 0xC1, 0x3F, 0xAE,
        0x16, 0x85, 0x52, 0x44, 0x77, 0x31, 0xEA, 0x84,
        0x16, 0x4F, 0xFD, 0x0C, 0x54, 0x7F, 0x45, 0xCF,
        0x16, 0xF9, 0x27, 0x02, 0x4E, 0x09, 0xA2, 0x68,
        0x16, 0x7F, 0x9C, 0xF8, 0xCF, 0x33, 0x39, 0x2D,
        0x16, 0x56, 0x8E, 0xC2, 0x34, 0xF8, 0x73, 0x76,
        0x16, 0xB9, 0x5E, 0x5C, 0x4A, 0xFD, 0x61, 0x00,
        0x16, 0x66, 0x51, 0x85, 0xD1, 0x55, 0x30, 0x34,
        0x16, 0x50, 0x79, 0x47, 0x24, 0xC0, 0x19, 0x66,
        0x16, 0xD4, 0x58, 0x80, 0x5B, 0xCF, 0x86, 0x71,
        0x16, 0x6D, 0x78, 0x26, 0xA2, 0x89, 0x47, 0x6F,
        0x16, 0x1B, 0xDE, 0x0F, 0x23, 0xB2, 0x5B, 0x65,
        0x16, 0x0D, 0x66, 0x82, 0x93, 0x12, 0xC6, 0x2E,
        0x16, 0x58, 0x45, 0xF4, 0xA3, 0x84, 0x20, 0x65,
        0x16, 0x07, 0xDB, 0x22, 0x30, 0x36, 0x60, 0x9B,
        0x16, 0x92, 0x68, 0xC4, 0x77, 0xF1, 0x7C, 0x98,
        0x16, 0x74, 0xA3, 0xD5, 0xD6, 0xE7, 0xFE, 0xE2,
        0x16, 0x64, 0x94, 0x18, 0x4E, 0x7A, 0xBF, 0x4D,
        0x16, 0xB4, 0x71, 0xAB, 0x0B, 0x2D, 0x9A, 0x35,
        0x16, 0x35, 0x9F, 0xFE, 0x07, 0xED, 0x0E, 0xDC,
        0x16, 0xAE, 0xCD, 0xC5, 0x2D, 0x53, 0x8E, 0xD6,
        0x16, 0x16, 0xC4, 0x10, 0x10, 0x3D, 0x09, 0x40,
        0x16, 0xC0, 0x9A, 0x76, 0xE8, 0x0B, 0x12, 0x3F,
        0x16, 0xB8, 0x49, 0xE1, 0x4F, 0xB9, 0x6C, 0x57,
        0x16, 0x03, 0x31, 0x22, 0xA5, 0x41, 0xC8, 0xC6,
        0x16, 0x92, 0x48, 0x64, 0x90, 0x3C, 0x7A, 0xA3,
        0x16, 0x41, 0x2E, 0x2C, 0x48, 0x4C, 0xDA, 0xD9,
        0x16, 0xF3, 0xF8, 0x11, 0xA2, 0x33, 0x54, 0x2F,
        0x16, 0x37, 0xAC, 0x1B, 0xA8, 0x30, 0x03, 0xCB,
        0x16, 0x6F, 0x2F, 0xC6, 0xE8, 0x37, 0x1D, 0xB6,
        0x16, 0x74, 0xAD, 0x5A, 0x07, 0x39, 0x35, 0xF3,
        0x16, 0x55, 0x6F, 0xDB, 0xC3, 0x24, 0xFE, 0x97,
        0x16, 0x89, 0xF9, 0x2A, 0x18, 0x9C, 0xEE, 0x7B,
        0x16, 0xEF, 0x7E, 0x53, 0x5A, 0xEA, 0xB2, 0x66,
        0x16, 0x0B, 0xA8, 0xEA, 0x89, 0x56, 0x79, 0xA1,
        0x16, 0x0A, 0x9F, 0xEF, 0x64, 0xF1, 0xB6, 0xE6,
        0x16, 0x58, 0xC7, 0x95, 0x2D, 0xA3, 0x72, 0xA4,
        0x16, 0x6C, 0xEF, 0x1B, 0xA6, 0xD4, 0x8D, 0xDB,
        0x16, 0xE3, 0x10, 0x43, 0xBC, 0x27, 0xA6, 0xD4,
        0x16, 0xB9, 0x49, 0xDA, 0x0E, 0x76, 0x14, 0xBD,
        0x16, 0x4C, 0x72, 0x94, 0x76, 0xCA, 0xDD, 0x56,
        0x16, 0x8F, 0x34, 0x29, 0x59, 0xA4, 0x3C, 0xDD,
        0x16, 0x87, 0xCA, 0xC1, 0x93, 0x9E, 0xD6, 0xF3,
        0x16, 0x52, 0xC2, 0x80, 0xC5, 0x26, 0xB5, 0x21,
        0x16, 0xCE, 0xE0, 0x70, 0x1B, 0xB5, 0x2C, 0xE6,
        0x16, 0x4B, 0xC6, 0x41, 0xE8, 0x38, 0x1F, 0xF0,
        0x16, 0x1A, 0x65, 0xA7, 0x64, 0x0B, 0x17, 0xD4,
        0x16, 0x69, 0x39, 0x08, 0x0B, 0x54, 0x19, 0x47,
        0x16, 0x32, 0x16, 0x6D, 0x6E, 0xC9, 0x8D, 0x4B,
        0x16, 0x26, 0x25, 0xC1, 0xB3, 0xDF, 0xDF, 0xB9,
        0x16, 0x34, 0x33, 0xDA, 0x2D, 0x8E, 0x27, 0x6F,
        0x16, 0xB9, 0x82, 0x6F, 0xC0, 0x14, 0x20, 0x14,
        0x16, 0x39, 0x56, 0xE3, 0x33, 0x63, 0x12, 0xDF,
        0x16, 0x04, 0x33, 0x58, 0xE3, 0x9E, 0xE2, 0x37,
        0x16, 0x5E, 0x7E, 0x30, 0x44, 0x4A, 0x91, 0x6B,
        0x16, 0xF0, 0x12, 0x69, 0x59, 0x87, 0x6A, 0xF1,
        0x16, 0x6B, 0xCC, 0x1B, 0x53, 0xED, 0xFF, 0xDD,
        0x16, 0x0F, 0xEB, 0x5E, 0x56, 0x40, 0x69, 0xF2,
        0x16, 0x60, 0xC1, 0xA5, 0x79, 0x79, 0xC6, 0xC6,
        0x16, 0x81, 0x7F, 0xF1, 0xAF, 0x55, 0x4F, 0x13,
        0x16, 0xDB, 0xDF, 0xEF, 0x9A, 0x41, 0x57, 0x39,
        0x16, 0xCD, 0xFA, 0x90, 0xCB, 0x18, 0x11, 0x6F,
        0x16, 0xDE, 0x74, 0x13, 0xF3, 0x5E, 0x5A, 0xCB,
        0x16, 0x75, 0x32, 0x28, 0x3C, 0xEE, 0x84, 0x76,
        0x16, 0xF7, 0x09, 0xE3, 0xD7, 0x5A, 0xB3, 0x7A,
        0x16, 0x47, 0x9F, 0x80, 0xBE, 0x9A, 0xA2, 0xE1,
        0x16, 0x13, 0xE3, 0x2D, 0xC7, 0xD5, 0x11, 0x40,
        0x16, 0x04, 0x69, 0xC3, 0xDE, 0x51, 0xAC, 0xF7,
        0x16, 0x9B, 0x02, 0xE0, 0xC6, 0x87, 0xE6, 0x21,
        0x16, 0x2A, 0xF0, 0xB6, 0x4F, 0x60, 0x35, 0x3F,
        0x16, 0xE5, 0xF8, 0x9D, 0xC4, 0xED, 0x85, 0xD1,
        0x16, 0x4F, 0x85, 0x5D, 0xB3, 0x69, 0x32, 0x26,
        0x16, 0x62, 0x5F, 0xE0, 0xD5, 0x7D, 0x75, 0xDD,
        0x16, 0xDF, 0x7A, 0x36, 0xCC, 0xE3, 0x4B, 0x33,
        0x16, 0xE2, 0x8A, 0x45, 0x6E, 0x49, 0x75, 0x01,
        0x16, 0x17, 0x14, 0x95, 0xA7, 0x08, 0xEB, 0x71,
        0x16, 0x30, 0xFB, 0x6E, 0x53, 0xD8, 0xDB, 0x3E,
        0x16, 0xEE, 0x82, 0xBC, 0xEB, 0xE2, 0x2F, 0xBF,
        0x16, 0x0E, 0x4D, 0x15, 0x6F, 0xC8, 0xBA, 0x02,
        0x16, 0x98, 0x23, 0x9F, 0xC4, 0xE0, 0x40, 0xF2,
        0x16, 0xA2, 0x53, 0xCD, 0xCC, 0xD3, 0xE0, 0x7E,
        0x16, 0xF6, 0x0D, 0x77, 0x4E, 0x23, 0x06, 0x5C,
        0x16, 0xD6, 0x4D, 0xE3, 0xB4, 0xFA, 0x23, 0xCB,
        0x16, 0x6C, 0x66, 0x83, 0x01, 0x79, 0x8D, 0x8D,
        0x16, 0xD0, 0x03, 0x2B, 0xB8, 0x88, 0x93, 0x1B,
        0x16, 0x84, 0x3F, 0x7C, 0xA4, 0x9B, 0xBE, 0xAD,
        0x16, 0xD2, 0x47, 0xC5, 0x7F, 0x9C, 0xF2, 0xDA,
        0x16, 0x9B, 0x1A, 0xDA, 0xBB, 0x5C, 0x93, 0x58,
        0x16, 0xA0, 0x56, 0xA7, 0xA3, 0x92, 0xC1, 0x23,
        0x16, 0x55, 0x5E, 0x6C, 0xED, 0x98, 0xBD, 0xC7,
        0x16, 0xE0, 0xF3, 0x03, 0xFB, 0x2B, 0xF4, 0x9F,
        0x16, 0x5F, 0x29, 0x43, 0x5E, 0xF6, 0x43, 0x89,
        0x16, 0xD6, 0x79, 0x88, 0x1A, 0xBC, 0xE2, 0x0E,
        0x16, 0xA0, 0xBD, 0x08, 0x3D, 0xB9, 0x9B, 0xF5,
        0x16, 0x0E, 0xF5, 0xA9, 0xFB, 0x26, 0x17, 0x08,
        0x16, 0x96, 0x02, 0x18, 0xE8, 0x58, 0xB4, 0x6F,
        0x16, 0x3D, 0x46, 0x36, 0x0F, 0xD3, 0x87, 0x67,
        0x16, 0xAC, 0xD1, 0xB4, 0x36, 0xE3, 0xE8, 0xDA,
        0x16, 0xEA, 0x93, 0xA6, 0xEC, 0x8E, 0x2D, 0x34,
        0x16, 0x31, 0xF0, 0x74, 0xB8, 0x89, 0xD8, 0x6D,
        0x16, 0xED, 0x42, 0x5E, 0x93, 0x3B, 0x47, 0xD0,
        0x16, 0x09, 0x60, 0xAF, 0x39, 0x5B, 0x7C, 0x22,
        0x16, 0x7F, 0x21, 0xD1, 0xFD, 0x03, 0x56, 0xE0,
        0x16, 0xC4, 0xF8, 0x87, 0xFD, 0xC2, 0x0F, 0x07,
        0x16, 0x3A, 0xAA, 0x8C, 0x9A, 0x60, 0x70, 0x23,
        0x16, 0x71, 0x81, 0x77, 0x3E, 0x53, 0x0F, 0xF5,
        0x16, 0xE1, 0x4D, 0x46, 0x69, 0xCE, 0xA9, 0x06,
        0x16, 0xC1, 0xFD, 0x98, 0xDA, 0xED, 0x9D, 0x34,
        0x16, 0xA2, 0xEF, 0x6C, 0xF8, 0x7C, 0x50, 0xB4,
        0x16, 0xED, 0xE7, 0xB5, 0x1D, 0x5D, 0x7D, 0x6C,
        0x16, 0xF9, 0x9F, 0x76, 0xD0, 0x09, 0x47, 0x32,
        0x16, 0xF0, 0xAE, 0xBA, 0x69, 0xD6, 0xBE, 0x1A,
        0x16, 0x4B, 0x67, 0x2C, 0x7C, 0x6B, 0x58, 0x3E,
        0x16, 0x05, 0x10, 0xB3, 0x6B, 0x5F, 0x39, 0xF6,
        0x16, 0xC5, 0x3D, 0xE4, 0x6C, 0x0F, 0xFA, 0x6E,
        0x16, 0x68, 0xA2, 0x74, 0xA3, 0xE4, 0xCD, 0x2A,
        0x16, 0xC1, 0x1F, 0xBC, 0x3B, 0xF3, 0xCE, 0xD6,
        0x16, 0xCA, 0x87, 0x74, 0xBE, 0x25, 0x48, 0xC4,
        0x16, 0x3F, 0xAA, 0x33, 0x4C, 0x15, 0x66, 0xAF,
        0x16, 0xF4, 0x54, 0x1E, 0x22, 0xC6, 0x52, 0xEA,
        0x16, 0x87, 0xFE, 0xD8, 0xAE, 0x5B, 0x86, 0x3F,
        0x16, 0x8C, 0xFC, 0xD4, 0x44, 0xB0, 0x40, 0x64,
        0x16, 0x13, 0xEA, 0x41, 0xED, 0x72, 0xF7, 0x9D,
        0x16, 0x36, 0x59, 0xE7, 0xB6, 0x40, 0x23, 0xE5,
        0x16, 0xC5, 0xFD, 0x83, 0xD0, 0x62, 0x82, 0x11,
        0x16, 0xFE, 0x3C, 0x11, 0x7D, 0x40, 0xE8, 0x17,
        0x16, 0xC0, 0x7E, 0xEB, 0xD1, 0xC1, 0x01, 0xDF,
        0x16, 0xD2, 0xD4, 0x72, 0x1A, 0x54, 0xBE, 0xC7,
        0x16, 0x19, 0xF1, 0xC5, 0x5B, 0xE3, 0x13, 0x2B,
        0x16, 0x6D, 0xE4, 0x43, 0xEE, 0x8E, 0x4E, 0xFD,
        0x16, 0xF8, 0xB6, 0x83, 0x44, 0x26, 0x8E, 0x38,
        0x16, 0xA6, 0xE3, 0xE9, 0x1B, 0x5B, 0x14, 0x20,
        0x16, 0x9F, 0x75, 0xE5, 0x99, 0xB5, 0xA3, 0x81,
        0x16, 0x36, 0xB8, 0xD8, 0xF7, 0xB5, 0x7A, 0x61,
        0x16, 0xDA, 0xC4, 0xAD, 0x3E, 0x27, 0x57, 0xE3,
        0x16, 0xC9, 0xC3, 0x52, 0x85, 0x1C, 0x9E, 0x6C,
        0x16, 0x9F, 0x17, 0x04, 0x09, 0x20, 0xB0, 0x77,
        0x16, 0xCE, 0x18, 0xED, 0x1D, 0xAE, 0xA1, 0x00,
        0x16, 0xDB, 0xA5, 0xB0, 0x7B, 0x75, 0x80, 0x0B,
        0x16, 0x12, 0x3A, 0xDA, 0xF5, 0x05, 0xEE, 0xA5,
        0x16, 0x10, 0x1C, 0x78, 0xCA, 0x66, 0xBF, 0xCD,
        0x16, 0xF2, 0xA4, 0xBA, 0x28, 0x1C, 0x81, 0xED,
        0x16, 0x44, 0x33, 0x2A, 0x6C, 0x4E, 0x57, 0xAA,
        0x16, 0xD4, 0xEB, 0x45, 0xAD, 0xBA, 0x85, 0x3E,
        0x16, 0xDB, 0x54, 0x1A, 0xDD, 0x08, 0xAF, 0xB7,
        0x16, 0xC7, 0xDD, 0x10, 0x91, 0xF2, 0xB4, 0x1F,
        0x16, 0x27, 0x33, 0x48, 0x8B, 0x59, 0xE3, 0x3B,
        0x16, 0xE2, 0xDF, 0x20, 0x61, 0x2D, 0x69, 0xD8,
        0x16, 0x78, 0xFD, 0x3D, 0x77, 0xE8, 0x3F, 0x0C,
        0x16, 0xA9, 0xA5, 0xA4, 0xBC, 0x6A, 0xC5, 0x53,
        0x16, 0xF6, 0xCF, 0xAE, 0x42, 0x8E, 0x9F, 0x06,
        0x16, 0x24, 0xFE, 0x08, 0xEC, 0x4E, 0x44, 0x45,
        0x16, 0x3F, 0x68, 0x86, 0xBD, 0x9F, 0xB4, 0x88,
        0x16, 0x18, 0xEB, 0x21, 0xFB, 0xDA, 0xEA, 0x60,
        0x16, 0x9D, 0x21, 0xA2, 0x69, 0x9A, 0xB3, 0xBD,
        0x16, 0xD6, 0x5B, 0xE1, 0x5E, 0xE1, 0xBA, 0x5F,
        0x16, 0xF6, 0xEC, 0x8C, 0x28, 0x81, 0x8F, 0xF4,
        0x16, 0x45, 0xAF, 0x02, 0x4B, 0xDF, 0x49, 0xD7,
        0x16, 0x8C, 0x25, 0xEE, 0xF9, 0x56, 0x21, 0x41,
        0x16, 0xD9, 0xFA, 0xF1, 0x38, 0x73, 0x30, 0x8D,
        0x16, 0x4F, 0xDB, 0x05, 0xC6, 0xCE, 0x58, 0x00,
        0x16, 0xAC, 0x44, 0x8A, 0xEE, 0x98, 0xE5, 0x4B,
        0x16, 0xC7, 0xD3, 0x4C, 0x0F, 0x8A, 0x4C, 0x0D,
        0x16, 0xCF, 0x11, 0x4D, 0x93, 0xA6, 0xBA, 0x92,
        0x16, 0xED, 0xDE, 0x06, 0xBD, 0x43, 0x30, 0xC7,
        0x16, 0xCD, 0xA2, 0x5F, 0xB1, 0x13, 0xF9, 0xD9,
        0x16, 0x1A, 0xA8, 0x08, 0x6B, 0xC3, 0x34, 0x06,
        0x16, 0x77, 0x3C, 0x48, 0xCC, 0xBD, 0x9B, 0xC8,
        0x16, 0x3A, 0x24, 0x5C, 0x24, 0x08, 0xC2, 0xD4,
        0x16, 0xA9, 0x27, 0xF4, 0xDF, 0x1B, 0x66, 0x47,
        0x16, 0x6E, 0x52, 0x8E, 0x0C, 0x86, 0x5C, 0x41,
        0x16, 0xEA, 0xFA, 0x94, 0x4D, 0xE0, 0x3C, 0x95,
        0x16, 0x23, 0x0B, 0xD6, 0x1C, 0xB8, 0x5F, 0x13,
        0x16, 0x4A, 0x29, 0x0D, 0x29, 0x7C, 0xCC, 0xD8,
        0x16, 0xF0, 0x80, 0x0C, 0x19, 0x8A, 0x73, 0x82,
        0x16, 0x79, 0x01, 0x40, 0x9B, 0xAE, 0x0A, 0x19,
        0x16, 0xF9, 0xC8, 0x4D, 0x60, 0xC5, 0xD0, 0x81,
        0x16, 0x0E, 0xCF, 0xC8, 0xE6, 0x02, 0xA1, 0x0B,
        0x16, 0x95, 0x51, 0xC7, 0xBD, 0x94, 0x7E, 0xF8,
        0x16, 0x49, 0xA7, 0x9F, 0xE7, 0xE9, 0x3F, 0xF0,
        0x16, 0x51, 0x31, 0x88, 0xEC, 0xF8, 0x00, 0x44,
        0x16, 0xB4, 0x14, 0x65, 0xEC, 0x76, 0x61, 0x45,
        0x16, 0xEE, 0xBA, 0x58, 0x87, 0xED, 0xED, 0x10,
        0x16, 0x02, 0x76, 0x4A, 0x90, 0x3D, 0x98, 0x15,
        0x16, 0xC1, 0x1F, 0x7B, 0xFA, 0xCC, 0x3E, 0x1D,
        0x16, 0x05, 0xAD, 0x22, 0xE4, 0x72, 0x7C, 0x6E,
        0x16, 0xAB, 0xD7, 0xA2, 0x25, 0x3A, 0xA5, 0xE6,
        0x16, 0xF0, 0xAF, 0x7B, 0xD4, 0x72, 0x60, 0xBC,
        0x16, 0x54, 0xFE, 0x60, 0xDC, 0xCF, 0x81, 0x34,
        0x16, 0xE3, 0xD4, 0xAE, 0xA5, 0x90, 0xD4, 0x00,
        0x16, 0x4A, 0xA3, 0x53, 0x1D, 0x6F, 0x93, 0x7F,
        0x16, 0x5D, 0xFC, 0x79, 0x9F, 0x51, 0x0E, 0x35,
        0x16, 0x0C, 0xA6, 0x21, 0x04, 0x81, 0x82, 0x07,
        0x16, 0x24, 0xF6, 0xC4, 0xB4, 0xB4, 0x25, 0xFE,
        0x16, 0xC3, 0x66, 0xD8, 0x72, 0x15, 0x8A, 0x6A,
        0x16, 0x23, 0xBA, 0x99, 0x77, 0x50, 0xA8, 0xF1,
        0x16, 0x2E, 0xCE, 0x1F, 0x63, 0x7F, 0xA8, 0xBD,
        0x16, 0x22, 0x51, 0xDA, 0x2F, 0xFD, 0xFA, 0x63,
        0x16, 0x53, 0xC8, 0xDE, 0x3F, 0xB0, 0x38, 0x45,
        0x16, 0xB7, 0x86, 0x09, 0x17, 0x89, 0x5B, 0xAE,
        0x16, 0x0F, 0x55, 0x6A, 0xD7, 0x16, 0xD0, 0x21,
        0x16, 0xF9, 0x3D, 0x9D, 0xA3, 0xEF, 0x6B, 0xC5,
        0x16, 0x83, 0xC3, 0xBA, 0x4B, 0x40, 0x67, 0x37,
        0x16, 0x8A, 0xC6, 0x0E, 0xE1, 0xAC, 0xF1, 0x42,
        0x16, 0x92, 0xFE, 0x7B, 0x27, 0x6A, 0x5B, 0x13,
        0x16, 0x0A, 0x8F, 0xFD, 0x36, 0xFE, 0x9B, 0x8F,
        0x16, 0x11, 0xE5, 0xC0, 0x69, 0x34, 0xD1, 0x7D,
        0x16, 0x9B, 0xDF, 0xCB, 0xB7, 0x31, 0xFF, 0xEA,
        0x16, 0x54, 0xD6, 0x36, 0xAA, 0x75, 0x47, 0xF0,
        0x16, 0xA9, 0x91, 0xA6, 0x13, 0xEC, 0xD6, 0x0D,
        0x16, 0x62, 0x4B, 0x87, 0xCD, 0x1B, 0xA3, 0x77,
        0x16, 0x0B, 0xE7, 0x23, 0x57, 0xC0, 0x5A, 0xFE,
        0x16, 0x54, 0xF2, 0x4A, 0x0D, 0x0C, 0x56, 0xAC,
        0x16, 0x08, 0xE2, 0xEF, 0xD4, 0xCC, 0x78, 0x94,
        0x16, 0xA9, 0xF2, 0x5D, 0x5B, 0x1B, 0xAD, 0x0A,
        0x16, 0xB5, 0xB9, 0x46, 0x11, 0x62, 0x02, 0x71,
        0x16, 0x67, 0x60, 0xEB, 0x29, 0xCF, 0x67, 0xB2,
        0x16, 0x79, 0x49, 0x04, 0x33, 0x33, 0x4E, 0x19,
        0x16, 0x60, 0xE0, 0x31, 0xE2, 0x1F, 0x5F, 0x3F,
        0x16, 0xD2, 0x13, 0xAF, 0x69, 0x39, 0x2A, 0x6D,
        0x16, 0xA2, 0xE1, 0xC5, 0x74, 0x54, 0xFC, 0xBA,
        0x16, 0x33, 0xCE, 0x64, 0x4B, 0xD3, 0x90, 0xD4,
        0x16, 0x0C, 0x79, 0x11, 0x30, 0xA3, 0x51, 0x2C,
        0x16, 0x1E, 0xAD, 0x65, 0xA6, 0xB0, 0x87, 0xAF,
        0x16, 0x54, 0x08, 0x3D, 0x25, 0xB5, 0xCB, 0xD9,
        0x16, 0xD2, 0x7D, 0x46, 0x92, 0xA2, 0x7D, 0xB8,
        0x16, 0x79, 0xA7, 0x21, 0xAA, 0xEC, 0x0E, 0x92,
        0x16, 0xF9, 0x6F, 0x92, 0xFF, 0x63, 0x90, 0xE5,
        0x16, 0xB4, 0x8F, 0x37, 0x83, 0x14, 0x38, 0xB6,
        0x16, 0x86, 0x00, 0xD6, 0x6A, 0x0A, 0x96, 0x1B,
        0x16, 0x55, 0xDA, 0xE3, 0xF5, 0xD7, 0x31, 0x3B,
        0x16, 0x35, 0x0C, 0xC3, 0x1D, 0xCF, 0x6C, 0x80,
        0x16, 0x16, 0xA2, 0xFC, 0x44, 0x2D, 0xD8, 0x4B,
        0x16, 0x47, 0xBF, 0xB9, 0x25, 0xFA, 0x1D, 0x6F,
        0x16, 0x2E, 0x59, 0xBB, 0xA8, 0xAE, 0x00, 0x24,
        0x16, 0x67, 0x81, 0x4B, 0xE7, 0x52, 0xC5, 0xD8,
        0x16, 0xBE, 0x0F, 0xA4, 0xFA, 0x53, 0xBF, 0xDD,
        0x16, 0x02, 0x6A, 0x90, 0x11, 0x62, 0x20, 0x2F,
        0x16, 0x0D, 0x7B, 0x81, 0x9E, 0xCC, 0xE5, 0xFF,
        0x16, 0x22, 0x7D, 0xD2, 0xF7, 0xE1, 0x24, 0x7E,
        0x16, 0x63, 0xA1, 0x20, 0x4F, 0x53, 0x8D, 0x39,
        0x16, 0xF1, 0x64, 0x5B, 0xBC, 0x50, 0x60, 0xB0,
        0x16, 0x49, 0x17, 0xB8, 0xD8, 0x7C, 0x59, 0x15,
        0x16, 0xC1, 0x35, 0x2F, 0x20, 0x98, 0x2B, 0x5A,
        0x16, 0x7C, 0x52, 0x1C, 0x47, 0xDE, 0xAA, 0x1C,
        0x16, 0x24, 0xC6, 0xA3, 0x00, 0x30, 0x13, 0x26,
        0x16, 0x49, 0x88, 0xC3, 0x9E, 0xCD, 0xCB, 0xA9,
        0x16, 0xB7, 0x9A, 0xB2, 0x7B, 0xCD, 0x15, 0x22,
        0x16, 0x85, 0x10, 0x5F, 0x17, 0x0C, 0x36, 0xC5,
        0x16, 0x2B, 0x0D, 0xF9, 0x2E, 0x4A, 0xF0, 0xC6,
        0x16, 0xA0, 0x06, 0x25, 0x2F, 0xD4, 0x5C, 0x35,
        0x16, 0x8C, 0x60, 0x53, 0x29, 0x69, 0xD3, 0xC3,
        0x16, 0xB8, 0x45, 0x73, 0xE5, 0x1D, 0xC7, 0xFC,
        0x16, 0xA6, 0x0C, 0x44, 0x0F, 0x64, 0xB4, 0xFF,
        0x16, 0xF5, 0x05, 0x81, 0xA4, 0x71, 0x1F, 0x4A,
        0x16, 0xAD, 0xF6, 0xF0, 0xEF, 0xCC, 0xFD, 0x4C,
        0x16, 0xE2, 0xA0, 0x17, 0xA9, 0xA3, 0x2A, 0x7D,
        0x16, 0x47, 0xB7, 0xF4, 0x92, 0x0B, 0xB9, 0x68,
        0x16, 0x26, 0x91, 0x81, 0x1C, 0xD2, 0xBA, 0xFA,
        0x16, 0x99, 0x36, 0x14, 0x0B, 0xD5, 0x26, 0x19,
        0x16, 0xE0, 0xEA, 0x03, 0xEC, 0x27, 0x34, 0x39,
        0x16, 0xE4, 0x26, 0x54, 0x84, 0x8B, 0x74, 0x22,
        0x16, 0x1C, 0x1E, 0xBD, 0x05, 0xD3, 0xF3, 0xC0,
        0x16, 0xBE, 0xF4, 0x46, 0xD4, 0xA0, 0x75, 0x88,
        0x16, 0x9A, 0xC2, 0xFA, 0x7F, 0x7D, 0xE6, 0xB5,
        0x16, 0xA7, 0x87, 0x00, 0x66, 0xEC, 0xD7, 0xF1,
        0x16, 0x51, 0x13, 0x14, 0xD1, 0xA1, 0x12, 0x96,
        0x16, 0xA7, 0xCE, 0x3F, 0x00, 0x0F, 0x1D, 0xE6,
        0x16, 0x14, 0x7D, 0x84, 0x5E, 0x1A, 0xE9, 0xDE,
        0x16, 0x25, 0x6B, 0x35, 0xDE, 0xA8, 0x2A, 0xEF,
        0x16, 0xC2, 0xB5, 0x1A, 0x44, 0xAB, 0xAD, 0x50,
        0x16, 0xEE, 0xC2, 0xD7, 0x63, 0x08, 0x8A, 0x9B,
        0x16, 0xF0, 0xD9, 0x9B, 0x96, 0x26, 0xA4, 0x39,
        0x16, 0x7E, 0xA3, 0xA6, 0x86, 0x91, 0x03, 0x9D,
        0x16, 0xF4, 0xB0, 0x18, 0x7B, 0xB3, 0x09, 0x6A,
        0x16, 0x1A, 0xEF, 0x04, 0x52, 0xD3, 0x82, 0x27,
        0x16, 0xE2, 0xBD, 0xDC, 0xB0, 0xEF, 0x2C, 0x99,
        0x16, 0x6A, 0xAC, 0xDF, 0x77, 0x3A, 0x87, 0x31,
        0x16, 0x40, 0x68, 0x29, 0xDC, 0x1D, 0x38, 0xB9,
        0x16, 0x50, 0xD0, 0xC8, 0xF6, 0xEE, 0x9C, 0x02,
        0x16, 0x4C, 0x1A, 0xDF, 0x08, 0x3B, 0x3F, 0xA3,
        0x16, 0x5A, 0xB9, 0x4D, 0xFB, 0x42, 0x1C, 0xBA,
        0x16, 0x46, 0x77, 0x98, 0xE9, 0xEA, 0xF7, 0xBD,
        0x16, 0x8C, 0x90, 0xCF, 0xFB, 0xD1, 0x14, 0xE5,
        0x16, 0xCA, 0xB3, 0x05, 0xA3, 0x41, 0x52, 0xA2,
        0x16, 0x93, 0x78, 0xAA, 0x2F, 0xFC, 0xFC, 0x64,
        0x16, 0x3B, 0xA8, 0x93, 0x9A, 0x88, 0xD4, 0xCA,
        0x16, 0x07, 0xB9, 0x40, 0xE0, 0x67, 0x0E, 0x94,
        0x16, 0x54, 0x68, 0xA4, 0xAE, 0x27, 0x45, 0x83,
        0x16, 0x72, 0x62, 0x6E, 0x6E, 0xD3, 0x99, 0x49,
        0x16, 0x96, 0x4D, 0x0D, 0x8A, 0x80, 0x95, 0xE4,
        0x16, 0xD8, 0x96, 0x7D, 0xD0, 0x7C, 0xF4, 0x9E,
        0x16, 0x20, 0xB5, 0x5F, 0x2E, 0x7F, 0xF5, 0xEE,
        0x16, 0xA2, 0x50, 0xA8, 0x63, 0x42, 0xE7, 0xF0,
        0x16, 0x9B, 0x39, 0x65, 0xF8, 0xA1, 0x1B, 0x49,
        0x16, 0xB4, 0x9E, 0xDC, 0xF2, 0x1B, 0x1B, 0x8A,
        0x16, 0x41, 0x35, 0xEC, 0x4E, 0xFB, 0xCA, 0xFF,
        0x16, 0x84, 0x02, 0xAF, 0x52, 0x14, 0x2B, 0x6C,
        0x16, 0x3D, 0xDD, 0xA4, 0xA3, 0x9A, 0x48, 0xDE,
        0x16, 0x8B, 0xA8, 0x84, 0x3C, 0x64, 0xDB, 0x9D,
        0x16, 0xA2, 0x3B, 0x45, 0x57, 0xFE, 0xD4, 0x79,
        0x16, 0xCB, 0x39, 0xE4, 0x2F, 0xD8, 0x90, 0x85,
        0x16, 0x21, 0x80, 0xCC, 0x88, 0x9A, 0xB9, 0xDA,
        0x16, 0x5E, 0x02, 0x31, 0x83, 0x3D, 0x4C, 0x9E,
        0x16, 0x63, 0x0D, 0xB9, 0x8B, 0x0E, 0x3E, 0x04,
        0x16, 0xBF, 0x15, 0xD6, 0x48, 0xC4, 0x6D, 0x92,
        0x16, 0x25, 0x3F, 0xD6, 0x78, 0xB3, 0x80, 0x81,
        0x16, 0x7E, 0x23, 0x82, 0x57, 0xFF, 0x82, 0x93,
        0x16, 0xC4, 0x61, 0x2D, 0xD8, 0x9C, 0x35, 0xA2,
        0x16, 0x56, 0xD2, 0xC9, 0x1F, 0xDC, 0x46, 0xD2,
        0x16, 0x76, 0x1E, 0x40, 0x95, 0xC9, 0xA2, 0xB1,
        0x16, 0xB9, 0x47, 0xF6, 0xFE, 0x02, 0x40, 0x8B,
        0x16, 0xB0, 0x4D, 0x03, 0xAA, 0x3B, 0xB6, 0xE5,
        0x16, 0xBB, 0x9A, 0x20, 0xAF, 0xAA, 0xEA, 0xF7,
        0x16, 0x7B, 0x6E, 0x28, 0x91, 0xB1, 0xEF, 0xFA,
        0x16, 0x13, 0xD4, 0x56, 0xEE, 0x42, 0x49, 0xF2,
        0x16, 0x38, 0xAB, 0xCC, 0xDD, 0xC8, 0xAE, 0x6A,
        0x16, 0xFD, 0xDF, 0x5E, 0xE2, 0xB8, 0xB8, 0x64,
        0x16, 0xF5, 0xB1, 0x24, 0x80, 0x61, 0x88, 0xD5,
        0x16, 0x92, 0xDC, 0x10, 0xB0, 0x78, 0x19, 0x71,
        0x16, 0x15, 0xB4, 0xDB, 0x5E, 0x7F, 0x78, 0x68,
        0x16, 0x26, 0x08, 0x40, 0xDF, 0x9B, 0x48, 0x47,
        0x16, 0xAB, 0xFF, 0x54, 0xBE, 0x9A, 0xB0, 0x3C,
        0x16, 0xDD, 0x73, 0x87, 0xBF, 0xB1, 0xE5, 0xB4,
        0x16, 0xEA, 0x3D, 0x4B, 0xC6, 0x65, 0x4B, 0x9E,
        0x16, 0x99, 0x3D, 0xCE, 0xEB, 0x32, 0x7C, 0x7D,
        0x16, 0xAA, 0x4E, 0x59, 0xC3, 0xC5, 0xAA, 0x4C,
        0x16, 0xB7, 0x0A, 0xE9, 0x95, 0xAC, 0x5C, 0x68,
        0x16, 0xBE, 0xCE, 0x1B, 0x43, 0x2F, 0x85, 0x1B,
        0x16, 0xEE, 0x8C, 0x5E, 0xC9, 0x7D, 0xFE, 0x34,
        0x16, 0x7C, 0x72, 0x1E, 0x71, 0xDE, 0xB5, 0x9D,
        0x16, 0x12, 0xDF, 0x50, 0x8C, 0x6C, 0x47, 0xA2,
        0x16, 0x02, 0x70, 0x7B, 0xB0, 0x9F, 0x99, 0x8B,
        0x16, 0x78, 0x4B, 0xF9, 0xB8, 0xD5, 0x7E, 0x32,
        0x16, 0x4E, 0x34, 0xB1, 0x9B, 0x22, 0x2D, 0xAC,
        0x16, 0x21, 0x29, 0xA8, 0x4A, 0x44, 0xEC, 0xA6,
        0x16, 0xCF, 0xBA, 0x5D, 0x50, 0x86, 0xF9, 0xA4,
        0x16, 0xD8, 0x89, 0xC9, 0x6B, 0x8B, 0xB9, 0x9F,
        0x16, 0x00, 0x7C, 0x88, 0x75, 0xCA, 0x17, 0x18,
        0x16, 0x03, 0xCB, 0x82, 0xD2, 0xDC, 0x6A, 0x76,
        0x16, 0x08, 0x18, 0x7C, 0x08, 0x2A, 0x3A, 0xE1,
        0x16, 0xB9, 0x40, 0x00, 0x5E, 0xBB, 0xE1, 0xB2,
        0x16, 0x60, 0xB0, 0xB0, 0x60, 0xD4, 0xB5, 0x0D,
        0x16, 0x5A, 0x9D, 0x94, 0xF2, 0x39, 0xF8, 0xEB,
        0x16, 0x53, 0x85, 0x45, 0xD0, 0x94, 0x4B, 0x32,
        0x16, 0xBF, 0x03, 0x39, 0x6D, 0x03, 0xBE, 0xE0,
        0x16, 0x61, 0xB2, 0x89, 0xEB, 0x03, 0xAF, 0x22,
        0x16, 0x51, 0x53, 0xDE, 0x13, 0x78, 0xF7, 0x71,
        0x16, 0xF4, 0x56, 0x79, 0x41, 0x5C, 0xCE, 0xB4,
        0x16, 0x7A, 0xAB, 0x38, 0x53, 0x9D, 0x60, 0xB9,
        0x16, 0x21, 0xD7, 0x7C, 0xD1, 0xF4, 0x51, 0xF6,
        0x16, 0xFB, 0x56, 0xA1, 0xD5, 0x1C, 0xC2, 0x6A,
        0x16, 0xFC, 0xD4, 0xB5, 0x72, 0xE2, 0x07, 0xE1,
        0x16, 0x2D, 0x86, 0xE3, 0x9A, 0x46, 0xF0, 0x06,
        0x16, 0x12, 0x7B, 0x8F, 0xEC, 0xD1, 0x3D, 0x43,
        0x16, 0x49, 0x2F, 0xCD, 0xB1, 0xEB, 0x28, 0xE3,
        0x16, 0x1D, 0xB6, 0xDD, 0xC1, 0xC0, 0x94, 0xBE,
        0x16, 0x4D, 0x00, 0x0C, 0x8E, 0x78, 0x16, 0xE8,
        0x16, 0xDF, 0x3E, 0xEE, 0xCD, 0x64, 0xDC, 0x17,
        0x16, 0x8D, 0x70, 0xEC, 0x83, 0xAA, 0x40, 0x32,
        0x16, 0x06, 0x5F, 0x66, 0x39, 0x04, 0xCD, 0x4C,
        0x16, 0xF8, 0x1B, 0xF0, 0x0C, 0x40, 0x52, 0x86,
        0x16, 0x07, 0x6B, 0x63, 0x4D, 0x87, 0x30, 0x21,
        0x16, 0x9F, 0x34, 0x5D, 0x53, 0x2B, 0xF7, 0xB4,
        0x16, 0xEE, 0x79, 0x9E, 0x95, 0x2B, 0x5A, 0x1E,
        0x16, 0xBE, 0x52, 0xAA, 0x9E, 0x33, 0x83, 0xB8,
        0x16, 0xA3, 0x14, 0xF1, 0x11, 0xA8, 0x68, 0x50,
        0x16, 0xF1, 0x42, 0x9E, 0x28, 0x9C, 0x05, 0x42,
        0x16, 0x10, 0x94, 0x7E, 0x7A, 0xA7, 0x54, 0x78,
        0x16, 0xBB, 0x9E, 0xFA, 0xD0, 0x4E, 0xFE, 0x11,
        0x16, 0x14, 0x40, 0x90, 0x3C, 0x90, 0x53, 0x9E,
        0x16, 0x4A, 0x45, 0x14, 0x35, 0xC8, 0xD0, 0xCB,
        0x16, 0xC0, 0x37, 0x84, 0x90, 0x9B, 0xB1, 0x75,
        0x16, 0xE1, 0xB2, 0x70, 0xF1, 0x4C, 0xBC, 0xC3,
        0x16, 0x74, 0xF1, 0x1A, 0x96, 0x59, 0x87, 0x60,
        0x16, 0x66, 0x44, 0x7C, 0x22, 0x1A, 0x27, 0x23,
        0x16, 0x15, 0x91, 0xD7, 0x1C, 0xD7, 0xF4, 0xAE,
        0x16, 0x4F, 0xA4, 0x23, 0xA1, 0x9E, 0x3C, 0x92,
        0x16, 0x1D, 0xFF, 0x68, 0xFA, 0xAB, 0x92, 0x09,
        0x16, 0x86, 0xE6, 0xCD, 0xC9, 0xA2, 0xE1, 0xAC,
        0x16, 0x1B, 0x0B, 0x8B, 0x5B, 0x0A, 0xBE, 0xDA,
        0x16, 0x9F, 0x19, 0x25, 0xA6, 0x9E, 0x7B, 0xC2,
        0x16, 0xF2, 0x36, 0xF2, 0x90, 0xF3, 0x5C, 0x28,
        0x16, 0x2A, 0x0B, 0x34, 0xBA, 0x25, 0x5F, 0x01,
        0x16, 0xAC, 0x57, 0xDE, 0x0B, 0xEE, 0x13, 0x7B,
        0x16, 0xD1, 0x08, 0x16, 0x28, 0x4A, 0xF7, 0x11,
        0x16, 0xB9, 0x11, 0xDF, 0xD0, 0xE9, 0x49, 0x42,
        0x16, 0xBB, 0x5E, 0x6B, 0xA4, 0x81, 0xF1, 0x9B,
        0x16, 0x5B, 0x91, 0x60, 0x57, 0x22, 0x2C, 0x23,
        0x16, 0x62, 0xAF, 0x37, 0x9F, 0xC1, 0x74, 0x7E,
        0x16, 0x8C, 0x48, 0x64, 0x8E, 0x6D, 0x2A, 0x15,
        0x16, 0xBB, 0x24, 0x38, 0xA1, 0xDD, 0x5B, 0xAA,
        0x16, 0xE7, 0x48, 0x86, 0xA4, 0xDA, 0x32, 0x74,
        0x16, 0x88, 0x4A, 0xC6, 0xA0, 0x75, 0x62, 0x08,
        0x16, 0x2A, 0x91, 0x4D, 0xED, 0x01, 0x5A, 0x4D,
        0x16, 0x4E, 0xA7, 0xC9, 0x1B, 0x1D, 0xE8, 0x88,
        0x16, 0x1A, 0x5D, 0x7D, 0xDB, 0x67, 0x5C, 0xF3,
        0x16, 0xC9, 0xA3, 0xC1, 0x08, 0x3E, 0x5E, 0x49,
        0x16, 0x32, 0x65, 0x5A, 0x6B, 0x2C, 0xC5, 0x78,
        0x16, 0x20, 0xFE, 0x88, 0xF6, 0x3F, 0x41, 0x46,
        0x16, 0x97, 0x29, 0xF9, 0xC7, 0xD8, 0xF7, 0x31,
        0x16, 0xA2, 0xE8, 0x33, 0x4E, 0x9B, 0xDE, 0x64,
        0x16, 0x38, 0x29, 0xB0, 0x3C, 0x86, 0x63, 0x2F,
        0x16, 0x43, 0x89, 0x61, 0x58, 0x83, 0xDE, 0x4D,
        0x16, 0x38, 0x09, 0x9F, 0x77, 0xDA, 0xDA, 0x22,
        0x16, 0x16, 0x71, 0x24, 0xDE, 0x36, 0x1B, 0x64,
        0x16, 0xD6, 0x22, 0x48, 0x73, 0x22, 0xC4, 0x48,
        0x16, 0x7B, 0xE2, 0xE6, 0x10, 0x6B, 0x71, 0xE3,
        0x16, 0xAC, 0x1E, 0xE5, 0x83, 0x58, 0xED, 0x34,
        0x16, 0xA9, 0xF9, 0x95, 0x37, 0x41, 0x38, 0x05,
        0x16, 0xB0, 0x7A, 0x7B, 0x48, 0xE0, 0x92, 0x52,
        0x16, 0x89, 0x6C, 0x91, 0x06, 0x6F, 0x5A, 0x36,
        0x16, 0xA7, 0xFE, 0xB0, 0xBD, 0xCA, 0x90, 0x3B,
        0x16, 0xAD, 0xBB, 0xF1, 0x8D, 0x70, 0x7D, 0x3D,
        0x16, 0x9D, 0xDC, 0x0C, 0x86, 0xD8, 0xE4, 0x0B,
        0x16, 0x49, 0x31, 0x68, 0xA5, 0xE2, 0xFF, 0x84,
        0x16, 0xFB, 0x48, 0x1E, 0xA3, 0x51, 0x7A, 0xAA,
        0x16, 0xBB, 0x35, 0x90, 0xE3, 0x23, 0x12, 0xE5,
        0x16, 0x6D, 0xE7, 0x94, 0x42, 0x36, 0x43, 0x7F,
        0x16, 0x20, 0xDA, 0x43, 0xF4, 0x6C, 0x46, 0xE7,
        0x16, 0x22, 0xAE, 0x72, 0xD8, 0x67, 0x4E, 0x73,
        0x16, 0x22, 0xB1, 0x91, 0x0F, 0x72, 0x56, 0x3F,
        0x16, 0x53, 0xC1, 0x77, 0x4E, 0x58, 0x02, 0xBF,
        0x16, 0x12, 0x33, 0xE5, 0x8B, 0xB3, 0x8F, 0xFF,
        0x16, 0xFE, 0x22, 0xD6, 0x67, 0x98, 0xBB, 0xCA,
        0x16, 0x96, 0xF6, 0x99, 0x0E, 0xC0, 0xC4, 0xAB,
        0x16, 0xFF, 0x03, 0x27, 0x67, 0xB6, 0xD4, 0xCD,
        0x16, 0xAF, 0xE9, 0x00, 0xCA, 0xC3, 0x25, 0xC6,
        0x16, 0xAA, 0x8D, 0x0B, 0x92, 0x7E, 0xA4, 0x73,
        0x16, 0x39, 0x8F, 0x0B, 0x1E, 0xA3, 0x42, 0xA5,
        0x16, 0xE9, 0x6D, 0xFB, 0x4B, 0xB9, 0xD6, 0x1E,
        0x16, 0xB3, 0x77, 0x37, 0xC8, 0xA2, 0xA4, 0x97,
        0x16, 0xE3, 0x08, 0x84, 0xA2, 0xD2, 0x16, 0xFB,
        0x16, 0xB0, 0x83, 0x87, 0xB5, 0x6D, 0x82, 0xF3,
        0x16, 0x87, 0x5B, 0xEB, 0x09, 0x97, 0x60, 0x2B,
        0x16, 0x95, 0x8D, 0xB2, 0x67, 0x89, 0x80, 0x42,
        0x16, 0x03, 0x1F, 0xD1, 0xD1, 0x51, 0x5E, 0x03,
        0x16, 0x78, 0x21, 0x1F, 0xED, 0x1E, 0x79, 0xCF,
        0x16, 0x75, 0xB0, 0x53, 0x91, 0x11, 0x24, 0x9B,
        0x16, 0xDF, 0x75, 0x45, 0x10, 0x44, 0x7C, 0xA4,
        0x16, 0x82, 0x75, 0x6D, 0xD3, 0x5B, 0xBE, 0x8E,
        0x16, 0xED, 0x2C, 0x66, 0x80, 0xFD, 0x98, 0xC7,
        0x16, 0xF9, 0x47, 0xFE, 0x4E, 0x1D, 0x51, 0xBB,
        0x16, 0xAA, 0x06, 0xEE, 0x0F, 0x23, 0x55, 0x70,
        0x16, 0x1E, 0x3B, 0xD5, 0x49, 0x64, 0xD4, 0x95,
        0x16, 0x3C, 0xDC, 0x71, 0x44, 0x8B, 0x52, 0xF0,
        0x16, 0xC0, 0x11, 0xD2, 0xBD, 0xE4, 0x16, 0x1C,
        0x16, 0x71, 0x1C, 0xB2, 0xDD, 0x0E, 0xE6, 0x72,
        0x16, 0xAD, 0x6E, 0x02, 0x0D, 0x38, 0x08, 0xBD,
        0x16, 0x97, 0x62, 0x67, 0x06, 0x7F, 0x13, 0x74,
        0x16, 0x34, 0x04, 0x7A, 0x72, 0xD7, 0xB1, 0x8B,
        0x16, 0xF4, 0xE1, 0xB5, 0x40, 0xAD, 0x0A, 0xF8,
        0x16, 0xF6, 0x3F, 0x02, 0x1C, 0x08, 0x22, 0x40,
        0x16, 0xD3, 0xAB, 0xFA, 0x69, 0x8A, 0x4A, 0x97,
        0x16, 0xEE, 0x1D, 0x3B, 0x7A, 0xC5, 0x48, 0xC9,
        0x16, 0x4B, 0x1C, 0x29, 0x9D, 0xE5, 0x1A, 0xAC,
        0x16, 0xF2, 0x5B, 0x27, 0x7F, 0x29, 0x32, 0xFB,
        0x16, 0x24, 0x12, 0x73, 0xB2, 0xA7, 0x70, 0xE0,
        0x16, 0xC1, 0x05, 0xC7, 0xC5, 0x5C, 0x50, 0xBD,
        0x16, 0x09, 0x2F, 0x18, 0xB9, 0x88, 0xF5, 0x77,
        0x16, 0xA5, 0x30, 0x56, 0xA1, 0xF5, 0x70, 0x3D,
        0x16, 0x00, 0x79, 0x9B, 0x34, 0xC7, 0x03, 0x2E,
        0x16, 0x29, 0xE8, 0xA0, 0x30, 0x55, 0x6A, 0x80,
        0x16, 0xD8, 0x98, 0xE0, 0xDE, 0x54, 0xFD, 0x03,
        0x16, 0x0C, 0xE1, 0x23, 0x2B, 0x00, 0x5D, 0x55,
        0x16, 0x5F, 0x74, 0xC9, 0x3E, 0x70, 0xD2, 0xBB,
        0x16, 0x0E, 0x98, 0x18, 0x89, 0xEE, 0xE4, 0x5E,
        0x16, 0x06, 0xB1, 0xCA, 0xCF, 0x89, 0xFB, 0xAF,
        0x16, 0xFD, 0xCE, 0x93, 0x26, 0x7A, 0x33, 0xA4,
        0x16, 0x74, 0xAE, 0x60, 0xC2, 0x56, 0x36, 0xCF,
        0x16, 0x82, 0x3E, 0x84, 0x95, 0xE8, 0x6D, 0x87,
        0x16, 0x51, 0x6D, 0x99, 0xCE, 0x26, 0x3E, 0x49,
        0x16, 0x99, 0x51, 0xF6, 0x24, 0x53, 0x30, 0xA2,
        0x16, 0x51, 0x95, 0x1F, 0x32, 0x61, 0xB6, 0x9E,
        0x16, 0x29, 0x16, 0x24, 0x34, 0xBA, 0x01, 0x5D,
        0x16, 0xA8, 0x49, 0x5F, 0x43, 0x7E, 0x95, 0xA9,
        0x16, 0x9B, 0xF7, 0xA4, 0x34, 0x31, 0x93, 0xE6,
        0x16, 0xD0, 0x85, 0x9B, 0xB1, 0x62, 0xC8, 0xF5,
        0x16, 0xE1, 0x30, 0x54, 0x27, 0x9B, 0x46, 0x2B,
        0x16, 0x9F, 0x5B, 0x8B, 0x4F, 0x98, 0x7F, 0xED,
        0x16, 0x82, 0x7F, 0xF1, 0x2D, 0xF5, 0xAC, 0xAB,
        0x16, 0x28, 0x46, 0x0D, 0xEF, 0x0F, 0x70, 0x3B,
        0x16, 0xBF, 0x55, 0x45, 0x95, 0x3E, 0xB3, 0x4B,
        0x16, 0x1A, 0x3D, 0x80, 0xD0, 0x84, 0x62, 0xAA,
        0x16, 0xEF, 0x8B, 0xCF, 0x85, 0xEA, 0x1D, 0x83,
        0x16, 0xB4, 0x0B, 0x68, 0xE9, 0x71, 0x40, 0x31,
        0x16, 0x2A, 0x84, 0x75, 0x45, 0xF2, 0xF7, 0x25,
        0x16, 0x3E, 0xA3, 0x01, 0x68, 0x52, 0x23, 0x19,
        0x16, 0x9E, 0x36, 0x06, 0x7A, 0xEA, 0xC7, 0x7A,
        0x16, 0x48, 0xBE, 0x51, 0x18, 0x16, 0x76, 0x5D,
        0x16, 0xEA, 0xBA, 0xDA, 0xBF, 0xF8, 0x21, 0x58,
        0x16, 0x0E, 0x1E, 0x83, 0xB6, 0xE8, 0x24, 0xD7,
        0x16, 0xDA, 0xD2, 0x7A, 0x3F, 0x01, 0xA0, 0x58,
        0x16, 0xB1, 0xB4, 0xAD, 0xC4, 0x5F, 0x9A, 0x30,
        0x16, 0x75, 0x13, 0xA6, 0x22, 0xA6, 0xE9, 0x29,
        0x16, 0x3C, 0xCF, 0xE8, 0xE4, 0x98, 0x00, 0x17,
        0x16, 0x34, 0x2C, 0xD2, 0x92, 0x59, 0xBB, 0xB5,
        0x16, 0x3D, 0x10, 0xAD, 0xD7, 0xBE, 0xB2, 0xB2,
        0x16, 0x1D, 0x82, 0x23, 0x09, 0xC9, 0x23, 0xF8,
        0x16, 0x36, 0xCA, 0x42, 0x03, 0xAD, 0x9D, 0x55,
        0x16, 0xC9, 0xFD, 0xD5, 0x7E, 0xBE, 0xDE, 0xBD,
        0x16, 0x3E, 0x20, 0x06, 0x3E, 0xFE, 0x1C, 0x01,
        0x16, 0x12, 0x35, 0xD3, 0x5F, 0xF0, 0x54, 0xCC,
        0x16, 0x09, 0xC8, 0xB9, 0x24, 0x4C, 0xF2, 0xB4,
        0x16, 0xB7, 0x6D, 0xDE, 0x74, 0xA8, 0x90, 0x2F,
        0x16, 0x11, 0x76, 0x0F, 0x34, 0xD1, 0x90, 0xC0,
        0x16, 0x6C, 0x3D, 0x51, 0x58, 0x27, 0x6E, 0x7B,
        0x16, 0xB1, 0x79, 0x24, 0x10, 0x29, 0x34, 0x1E,
        0x16, 0x4D, 0xC2, 0x32, 0x8A, 0x0D, 0x0E, 0x5E,
        0x16, 0xC4, 0x5D, 0x91, 0x11, 0xAC, 0x4F, 0xDD,
        0x16, 0xD5, 0xBC, 0xBE, 0xA2, 0x22, 0x93, 0x61,
        0x16, 0x53, 0x16, 0x93, 0x34, 0xAB, 0x9B, 0x07,
        0x16, 0x20, 0x0B, 0xB8, 0xEA, 0x87, 0xFE, 0x14,
        0x16, 0x8B, 0x73, 0xE4, 0xAE, 0x95, 0x7B, 0xA1,
        0x16, 0x4C, 0xDE, 0x6D, 0xDF, 0x8E, 0xFE, 0xEF,
        0x16, 0xE1, 0x3C, 0xD3, 0x9C, 0xD0, 0xC6, 0xAC,
        0x16, 0x4B, 0x62, 0x18, 0x49, 0x86, 0xE3, 0x10,
        0x16, 0x53, 0xA3, 0xE0, 0x4E, 0x4B, 0x00, 0xC4,
        0x16, 0x64, 0x81, 0x6A, 0x00, 0x29, 0xDA, 0x3F,
        0x16, 0x41, 0xCA, 0xBC, 0x73, 0xAD, 0xE4, 0x98,
        0x16, 0x31, 0x27, 0x8E, 0x02, 0xF2, 0x46, 0x39,
        0x16, 0x36, 0x74, 0x9A, 0x7B, 0xB8, 0x4D, 0x72,
        0x16, 0xF3, 0x25, 0x51, 0x68, 0x6D, 0x71, 0x9C,
        0x16, 0xC4, 0x4D, 0xC3, 0xA2, 0x91, 0xD2, 0x33,
        0x16, 0x63, 0xB1, 0x54, 0xE3, 0xFF, 0x48, 0x48,
        0x16, 0xEA, 0xA5, 0x87, 0x94, 0x53, 0x94, 0x74,
        0x16, 0x48, 0xE2, 0x84, 0xD1, 0xD8, 0x39, 0x2B,
        0x16, 0xD2, 0xCD, 0x09, 0x8B, 0x4E, 0xF1, 0x32,
        0x16, 0x60, 0x89, 0x26, 0x7C, 0x0B, 0x64, 0x94,
        0x16, 0x58, 0xAB, 0xCD, 0x2E, 0xA9, 0xBD, 0x3A,
        0x16, 0x15, 0xC2, 0x8D, 0x92, 0xC9, 0x73, 0x22,
        0x16, 0x6B, 0x92, 0x07, 0x12, 0x17, 0xA3, 0xE4,
        0x16, 0x9A, 0x44, 0xD2, 0x54, 0x55, 0xDF, 0x1C,
        0x16, 0x11, 0x0C, 0xEC, 0x0D, 0xED, 0x2A, 0x93,
        0x16, 0xE6, 0xE9, 0xF1, 0xB6, 0x94, 0xFA, 0xE8,
        0x16, 0x7A, 0x8C, 0xC8, 0xD0, 0xCF, 0xB0, 0x21,
        0x16, 0xC3, 0x4C, 0x41, 0x85, 0xD0, 0x31, 0xA8,
        0x16, 0xAE, 0x9B, 0xA6, 0x51, 0x1C, 0x96, 0xFF,
        0x16, 0xC8, 0xED, 0x99, 0xCF, 0x87, 0x4F, 0x22,
        0x16, 0xA5, 0xB1, 0x9D, 0xEC, 0x23, 0xAB, 0x2D,
        0x16, 0xCF, 0xF5, 0xC9, 0x47, 0xB8, 0xF7, 0x65,
        0x16, 0xC9, 0x54, 0x1A, 0xAC, 0x21, 0xCF, 0xA2,
        0x16, 0x0B, 0xC8, 0xC0, 0x35, 0x4D, 0x32, 0x47,
        0x16, 0x90, 0x98, 0x46, 0x51, 0xB0, 0x1E, 0x76,
        0x16, 0xFF, 0x06, 0xD6, 0xB8, 0x0A, 0xA2, 0x88,
        0x16, 0xBF, 0x8D, 0x82, 0xF2, 0x33, 0x9B, 0x78,
        0x16, 0x67, 0x35, 0x06, 0x03, 0x33, 0xAC, 0xFE,
        0x16, 0xA1, 0x7B, 0x73, 0x09, 0xB4, 0x71, 0x10,
        0x16, 0x55, 0x25, 0x64, 0xB6, 0xFF, 0x5B, 0xB8,
        0x16, 0x61, 0xA8, 0xB4, 0x3F, 0x4B, 0xFC, 0x02,
        0x16, 0x3F, 0x93, 0x97, 0x94, 0xBE, 0xEC, 0x81,
        0x16, 0x19, 0xB9, 0xF5, 0x35, 0x80, 0xA1, 0x90,
        0x16, 0xC6, 0x37, 0xBF, 0xB8, 0xD3, 0x09, 0x5D,
        0x16, 0xAF, 0x55, 0x2C, 0xCD, 0x16, 0xEB, 0xCF,
        0x16, 0x18, 0xB8, 0x22, 0xFC, 0xA7, 0xCA, 0xA6,
        0x16, 0x69, 0x55, 0xCE, 0x9E, 0xAD, 0x39, 0x06,
        0x16, 0xBA, 0x67, 0xA3, 0x28, 0xB4, 0x03, 0x1E,
        0x16, 0x3A, 0xD7, 0x0D, 0x24, 0x92, 0x1A, 0xD4,
        0x16, 0xAA, 0x8D, 0x89, 0x69, 0xE1, 0x65, 0x9C,
        0x16, 0xF7, 0x96, 0xB9, 0xDC, 0x81, 0xA0, 0x14,
        0x16, 0x17, 0xD0, 0xB8, 0x65, 0x47, 0x59, 0xA8,
        0x16, 0xE4, 0xA6, 0x4B, 0x89, 0xBB, 0xDD, 0xE7,
        0x16, 0x82, 0x71, 0x23, 0xDB, 0xF1, 0x4A, 0x8A,
        0x16, 0xF5, 0x07, 0xBE, 0xC6, 0x2D, 0xE3, 0x63,
        0x16, 0xEF, 0xE3, 0x0C, 0xFE, 0x5B, 0x7C, 0x7C,
        0x16, 0x0E, 0x21, 0x61, 0x87, 0x6C, 0x2E, 0xA7,
        0x16, 0x94, 0xC9, 0xD3, 0xCF, 0xF2, 0x8C, 0x8B,
        0x16, 0x96, 0xB4, 0x29, 0x3D, 0x01, 0xF3, 0x89,
        0x16, 0xEC, 0x5F, 0x9D, 0x44, 0x90, 0x54, 0x8D,
        0x16, 0x19, 0x73, 0x4A, 0xA0, 0x4C, 0x18, 0x34,
        0x16, 0x35, 0xB1, 0x89, 0xEF, 0x42, 0x12, 0x8E,
        0x16, 0x81, 0x52, 0x27, 0x3D, 0xDB, 0xF1, 0xF0,
        0x16, 0x66, 0xD3, 0x50, 0x76, 0xAD, 0x32, 0xD1,
        0x16, 0x08, 0x02, 0x4E, 0x37, 0xB1, 0x97, 0xEA,
        0x16, 0xA9, 0x61, 0x65, 0xCF, 0x51, 0xE8, 0x0C,
        0x16, 0x8A, 0x01, 0x0D, 0x40, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x02, 0x00, 0x2B, 0x9F, 0x8E, 0x82,
        0x16, 0xE1, 0x5E, 0x80, 0xD7, 0x97, 0x32, 0xAF,
        0x16, 0x7E, 0x02, 0xA5, 0x9A, 0x5D, 0x4E, 0xB1,
        0x16, 0x22, 0x11, 0x6F, 0xA0, 0x2C, 0x3F, 0xE7,
        0x16, 0x34, 0x86, 0x33, 0x52, 0x1C, 0x5F, 0x10,
        0x16, 0x4F, 0x5E, 0xB7, 0xD0, 0x27, 0xCE, 0x55,
        0x16, 0x24, 0xE9, 0x7D, 0x7C, 0x8A, 0x9D, 0xB3,
        0x16, 0x6A, 0xA2, 0xA7, 0x4D, 0x2D, 0x8F, 0x43,
        0x16, 0xD7, 0x9F, 0xF1, 0xE9, 0xCF, 0xC6, 0x1A,
        0x16, 0x1F, 0x9A, 0x02, 0x23, 0x1D, 0x85, 0x69,
        0x16, 0x29, 0xBD, 0x97, 0xDE, 0xD1, 0xCC, 0x27,
        0x16, 0xA0, 0x53, 0x01, 0x21, 0x04, 0x6C, 0xDF,
        0x16, 0x5E, 0x5F, 0x3C, 0xAA, 0xAB, 0xBF, 0xFA,
        0x16, 0x0D, 0xD8, 0x81, 0xD9, 0xBC, 0xB2, 0xA1,
        0x16, 0x60, 0xE5, 0xBC, 0x20, 0xE2, 0xBE, 0x1B,
        0x16, 0x03, 0x45, 0x0F, 0x8F, 0x93, 0xEC, 0x31,
        0x16, 0x47, 0x97, 0x85, 0x6E, 0x50, 0x08, 0x23,
        0x16, 0xFE, 0x2D, 0xFB, 0x9C, 0x54, 0xC1, 0x7E,
        0x16, 0x15, 0x4E, 0x5A, 0x66, 0xF7, 0x7B, 0xF9,
        0x16, 0x7E, 0xDD, 0xE7, 0x77, 0xAD, 0x45, 0x64,
        0x16, 0x58, 0xFB, 0xE5, 0x70, 0x76, 0x6E, 0x07,
        0x16, 0x4E, 0xAA, 0x2A, 0x2B, 0xFA, 0xDA, 0x8B,
        0x16, 0xDF, 0xA2, 0x88, 0x02, 0x9D, 0x7A, 0x47,
        0x16, 0xCC, 0x7A, 0xDF, 0xD3, 0xF3, 0xB4, 0xB7,
        0x16, 0xFE, 0xDE, 0x8C, 0x22, 0x3B, 0x26, 0x0F,
        0x16, 0x48, 0xFC, 0xB5, 0xD5, 0x2F, 0x73, 0xD1,
        0x16, 0xC7, 0xC8, 0xBC, 0x0F, 0x61, 0x1C, 0x2F,
        0x16, 0x4C, 0xB8, 0xC1, 0x61, 0xCA, 0x13, 0xAB,
        0x16, 0x0C, 0x23, 0x23, 0x53, 0xF1, 0xB8, 0xA4,
        0x16, 0x06, 0xA6, 0xE7, 0xB2, 0xBC, 0xA9, 0x9D,
        0x16, 0xC9, 0xC9, 0x93, 0x95, 0xEE, 0x4F, 0x9A,
        0x16, 0x47, 0x0B, 0x0F, 0x9B, 0x17, 0xC4, 0x61,
        0x16, 0x2B, 0xC0, 0x54, 0x25, 0x41, 0xE9, 0xAF,
        0x16, 0x08, 0xF6, 0x4C, 0x54, 0x91, 0x77, 0xFA,
        0x16, 0x2F, 0x0A, 0x82, 0xEF, 0x13, 0x41, 0x9A,
        0x16, 0x43, 0xA2, 0x3E, 0xDB, 0xB0, 0xA5, 0xC1,
        0x16, 0x4D, 0xE3, 0x45, 0x14, 0x4C, 0xFF, 0x55,
        0x16, 0x3C, 0x99, 0x6C, 0x57, 0xC6, 0x33, 0xAD,
        0x16, 0x09, 0xB5, 0x61, 0x06, 0x34, 0xD8, 0x0C,
        0x16, 0xB0, 0x00, 0xB3, 0xEF, 0x00, 0xAB, 0xA7,
        0x16, 0x8D, 0x74, 0x55, 0x54, 0xA2, 0xB2, 0x98,
        0x16, 0x84, 0x5C, 0x82, 0xA5, 0x1F, 0xC9, 0xF1,
        0x16, 0x2E, 0x83, 0xB7, 0xEF, 0x7E, 0xC1, 0x4B,
        0x16, 0xEA, 0x61, 0xD1, 0x1F, 0xFD, 0x16, 0x27,
        0x16, 0x02, 0xEA, 0xCF, 0x88, 0x64, 0xE2, 0x62,
        0x16, 0x64, 0xE3, 0x5D, 0xAD, 0x89, 0x77, 0xF9,
        0x16, 0x03, 0x41, 0x14, 0x30, 0x88, 0xE0, 0x3B,
        0x16, 0x98, 0x12, 0xA0, 0xC5, 0x5F, 0x13, 0x6B,
        0x16, 0x5A, 0xC8, 0xDD, 0x7E, 0x4E, 0x48, 0x0E,
        0x16, 0x59, 0x4B, 0x4B, 0x0E, 0x31, 0x97, 0xE0,
        0x16, 0x79, 0xE8, 0x35, 0xA0, 0x24, 0x2F, 0x6A,
        0x16, 0xBD, 0x2D, 0x8A, 0x90, 0x30, 0xF6, 0x4D,
        0x16, 0x55, 0xCC, 0x71, 0xF4, 0x36, 0x4F, 0x60,
        0x16, 0x3A, 0x78, 0x4F, 0x05, 0xCF, 0xD1, 0x49,
        0x16, 0x41, 0xFF, 0x7C, 0x90, 0x5E, 0x4E, 0xE7,
        0x16, 0x2D, 0x3F, 0xCA, 0x90, 0x91, 0xB4, 0x1A,
        0x16, 0x40, 0x1A, 0x5C, 0xBE, 0x6E, 0x38, 0xDE,
        0x16, 0x46, 0x08, 0x07, 0x54, 0x68, 0x12, 0xB6,
        0x16, 0x92, 0xC5, 0xBC, 0x88, 0x08, 0xB1, 0x9A,
        0x16, 0xE5, 0x90, 0x7E, 0x6D, 0x36, 0x29, 0x16,
        0x16, 0xE0, 0x5C, 0x88, 0x2B, 0x17, 0x6E, 0xC6,
        0x16, 0xD5, 0xB3, 0x99, 0xC8, 0xA6, 0xCE, 0x7F,
        0x16, 0x11, 0xEF, 0x58, 0xD3, 0xCA, 0xDD, 0xA5,
        0x16, 0xA3, 0x5C, 0xBC, 0xE1, 0x7C, 0x8F, 0x45,
        0x16, 0x61, 0xB7, 0x6A, 0x6D, 0x51, 0x28, 0xE6,
        0x16, 0x22, 0x5D, 0xD3, 0xF1, 0xB4, 0x8E, 0xE0,
        0x16, 0x44, 0xBC, 0xCC, 0x4F, 0x75, 0xF9, 0x1F,
        0x16, 0xD1, 0x16, 0x6D, 0xD1, 0x91, 0xB6, 0xD9,
        0x16, 0x19, 0xA4, 0xEE, 0x6F, 0x72, 0xF8, 0xA1,
        0x16, 0x62, 0x11, 0x07, 0x61, 0x44, 0x9E, 0xD9,
        0x16, 0xA0, 0x05, 0x54, 0xC4, 0x75, 0xE1, 0xA3,
        0x16, 0x98, 0xCC, 0x71, 0x71, 0x55, 0x60, 0x92,
        0x16, 0xBA, 0xC3, 0x47, 0xE9, 0xEF, 0xD1, 0x5C,
        0x16, 0xD3, 0x47, 0xDF, 0xAE, 0x9A, 0xD5, 0xBC,
        0x16, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x10, 0x00, 0xB6, 0xAA, 0x73, 0xD9,
        0x16, 0x54, 0x86, 0xCF, 0xD8, 0x04, 0x90, 0xAF,
        0x16, 0x9D, 0x37, 0x7C, 0x36, 0x2A, 0xF8, 0xE6,
        0x16, 0x7C, 0x52, 0x4F, 0x58, 0x84, 0x08, 0x43,
        0x16, 0x16, 0x31, 0x11, 0x41, 0x56, 0xE9, 0x53,
        0x16, 0x0A, 0x91, 0x18, 0x33, 0xF1, 0x56, 0xD9,
        0x16, 0xB4, 0x0F, 0x1A, 0x9B, 0x24, 0xC4, 0xA1,
        0x16, 0x12, 0x94, 0x05, 0xE2, 0x55, 0x32, 0xCC,
        0x16, 0x92, 0x94, 0x87, 0xF2, 0x29, 0x51, 0xA3,
        0x16, 0xAC, 0xE8, 0xA1, 0x68, 0x1F, 0x70, 0x66,
        0x16, 0x83, 0xA2, 0x82, 0xD9, 0x1F, 0x28, 0x25,
        0x16, 0xD6, 0x3F, 0xDE, 0x48, 0xE0, 0xA0, 0x8D,
        0x16, 0xFD, 0xC7, 0xAA, 0x2D, 0x30, 0x62, 0x99,
        0x16, 0xAA, 0x57, 0x6D, 0xAB, 0x7E, 0xC3, 0xFE,
        0x16, 0x30, 0x17, 0xDE, 0x22, 0xC9, 0xE8, 0x3A,
        0x16, 0x57, 0x04, 0x14, 0x07, 0x87, 0x2B, 0x1A,
        0x16, 0xC3, 0x10, 0x3D, 0x2E, 0xDC, 0xBD, 0x89,
        0x16, 0xD6, 0xA6, 0x24, 0xA8, 0x31, 0x34, 0x5B,
        0x16, 0x63, 0xDA, 0x3F, 0xE1, 0x68, 0xFA, 0xE0,
        0x16, 0x2A, 0x77, 0x39, 0xDA, 0x41, 0xF5, 0xA2,
        0x16, 0x90, 0xE8, 0x6D, 0x48, 0x81, 0x4A, 0xF4,
        0x16, 0x96, 0xD6, 0x1D, 0xD3, 0xB1, 0x87, 0xC5,
        0x16, 0x06, 0x8A, 0xFB, 0x25, 0xFD, 0x1C, 0xBD,
        0x16, 0x32, 0xBA, 0x0E, 0x68, 0x2A, 0xD9, 0x9B,
        0x16, 0x7D, 0x04, 0x81, 0xCE, 0x28, 0xEC, 0x97,
        0x16, 0xC0, 0x72, 0x67, 0x33, 0x3E, 0xEB, 0x07,
        0x16, 0x7C, 0xDB, 0x5A, 0xA1, 0xC9, 0x9F, 0x49,
        0x16, 0x90, 0x2B, 0x1E, 0xEE, 0x27, 0x2E, 0x56,
        0x16, 0xB1, 0x5F, 0xE2, 0xF4, 0xAA, 0x23, 0xD4,
        0x16, 0x8B, 0xD7, 0x71, 0x30, 0x9F, 0xF4, 0x7B,
        0x16, 0xF3, 0x2A, 0xE4, 0x17, 0x0E, 0x84, 0x19,
        0x16, 0x9C, 0xE5, 0xB3, 0x2C, 0x53, 0xFE, 0x5F,
        0x16, 0xC5, 0x65, 0x17, 0x2D, 0x0B, 0xFF, 0x02,
        0x16, 0x59, 0xCA, 0x51, 0x49, 0xBF, 0x9B, 0xBF,
        0x16, 0x6A, 0x00, 0x55, 0x0E, 0xB4, 0x5C, 0xAB,
        0x16, 0xAA, 0xFA, 0xB4, 0x8E, 0x13, 0xAE, 0x83,
        0x16, 0x16, 0xE8, 0xD1, 0x47, 0x10, 0x05, 0x2E,
        0x16, 0xEC, 0xFF, 0x29, 0x41, 0xFD, 0x84, 0x0E,
        0x16, 0x78, 0x07, 0xBE, 0x71, 0xA2, 0x62, 0x20,
        0x16, 0x63, 0x5E, 0x4F, 0xB8, 0x4D, 0xC4, 0x94,
        0x16, 0x66, 0x27, 0x0D, 0xBB, 0x0F, 0x5D, 0x42,
        0x16, 0x01, 0xF9, 0x64, 0x70, 0x27, 0x49, 0xCD,
        0x16, 0xB0, 0x6E, 0xB3, 0x6A, 0x8C, 0x7A, 0x31,
        0x16, 0x9F, 0xBA, 0xF8, 0xCE, 0x52, 0x7B, 0x39,
        0x16, 0x8B, 0xF7, 0xFE, 0xAB, 0xA5, 0x0D, 0x62,
        0x16, 0x49, 0x7A, 0xE7, 0xF8, 0xBF, 0x05, 0x85,
        0x16, 0xFF, 0x96, 0xD8, 0x01, 0xB7, 0xDF, 0xDB,
        0x16, 0x5B, 0xB8, 0x70, 0x96, 0x64, 0xA7, 0x57,
        0x16, 0x0C, 0x58, 0xF8, 0x72, 0x11, 0xC0, 0xE4,
        0x16, 0xCB, 0x48, 0x94, 0x90, 0xE8, 0xBF, 0x0C,
        0x16, 0x5E, 0x5E, 0x5F, 0x53, 0xED, 0x37, 0x1B,
        0x16, 0xAF, 0x7B, 0x15, 0x4B, 0xFB, 0x4E, 0xAD,
        0x16, 0x37, 0x8D, 0x6D, 0xE4, 0x74, 0xCC, 0xE4,
        0x16, 0x06, 0xCA, 0xEB, 0x6B, 0x6C, 0x5B, 0xA8,
        0x16, 0xC0, 0x00, 0x4B, 0x39, 0x63, 0x19, 0x16,
        0x16, 0x4E, 0x36, 0x18, 0x7E, 0x07, 0xAC, 0x52,
        0x16, 0x0F, 0xC9, 0xB6, 0x83, 0x2C, 0x0D, 0x42,
        0x16, 0xBC, 0x01, 0xFF, 0x57, 0xB1, 0x5E, 0x45,
        0x16, 0xA4, 0xF0, 0x18, 0xC4, 0xF6, 0x6B, 0x8D,
        0x16, 0x1E, 0xE4, 0xCB, 0x06, 0x74, 0xB1, 0x2F,
        0x16, 0x11, 0x94, 0x83, 0x76, 0x09, 0x9B, 0x8D,
        0x16, 0x97, 0x37, 0xAD, 0xB6, 0x12, 0xAA, 0xDC,
        0x16, 0x5D, 0x03, 0x5D, 0x1D, 0xB2, 0xD9, 0xB9,
        0x16, 0xA0, 0xA9, 0x24, 0x5E, 0xA6, 0x70, 0x5D,
        0x16, 0x69, 0x0F, 0x67, 0x59, 0xF8, 0x23, 0x8D,
        0x16, 0xC1, 0x3D, 0x60, 0x95, 0xB7, 0x81, 0x53,
        0x16, 0xE1, 0x5C, 0x4D, 0xC5, 0x40, 0x6A, 0x13,
        0x16, 0x01, 0x52, 0x3C, 0x64, 0x20, 0x95, 0x09,
        0x16, 0x01, 0xB1, 0x1F, 0x8B, 0x65, 0x43, 0xDC,
        0x16, 0x3C, 0x22, 0x76, 0x52, 0xA8, 0x24, 0xDB,
        0x16, 0xD5, 0xDC, 0x28, 0x3C, 0xEB, 0x80, 0x01,
        0x16, 0x81, 0x87, 0xDE, 0xE0, 0xB0, 0xF1, 0xE1,
        0x16, 0xC1, 0xF5, 0x35, 0x3D, 0xDA, 0x11, 0x14,
        0x16, 0x32, 0x85, 0x4C, 0x97, 0xBD, 0xEB, 0x52,
        0x16, 0x56, 0x96, 0xE3, 0xCE, 0xF6, 0xA7, 0xD6,
        0x16, 0x99, 0x39, 0x38, 0x9E, 0x55, 0x62, 0xD6,
        0x16, 0xFE, 0x35, 0xCA, 0x88, 0x4C, 0x68, 0x9B,
        0x16, 0xC6, 0xBE, 0xE3, 0x91, 0x01, 0x63, 0x99,
        0x16, 0xF4, 0x9A, 0x1F, 0xBB, 0xB4, 0xD3, 0xBE,
        0x16, 0x0A, 0xD9, 0xE4, 0x99, 0x61, 0xAF, 0x55,
        0x16, 0xE7, 0x1D, 0x40, 0x57, 0x2E, 0x74, 0x01,
        0x16, 0x0E, 0x33, 0x1B, 0x7C, 0x34, 0x24, 0x9A,
        0x16, 0x00, 0xCB, 0xEF, 0x0F, 0x79, 0x8A, 0x41,
        0x16, 0x11, 0x23, 0xD1, 0xFA, 0x92, 0x55, 0x7D,
        0x16, 0x09, 0xD2, 0x0D, 0xA2, 0x9B, 0x60, 0x87,
        0x16, 0xE6, 0x0E, 0xD5, 0xCE, 0xC7, 0xC6, 0x50,
        0x16, 0x9B, 0x2B, 0x3D, 0x91, 0xF4, 0xCC, 0x74,
        0x16, 0x0C, 0x7C, 0x38, 0x8D, 0x23, 0x76, 0x24,
        0x16, 0xDC, 0x1B, 0x89, 0x55, 0x67, 0x79, 0x87,
        0x16, 0xD1, 0xB8, 0xFD, 0xFD, 0x6C, 0xF5, 0xEF,
        0x16, 0x28, 0xD1, 0x94, 0xEB, 0xC8, 0xCE, 0x3D,
        0x16, 0x85, 0xA8, 0x83, 0x2A, 0x85, 0x75, 0xDA,
        0x16, 0x0C, 0x03, 0xA5, 0x4D, 0x41, 0x54, 0x59,
        0x16, 0x67, 0xBF, 0xEC, 0x9D, 0x4C, 0xA4, 0x46,
        0x16, 0x96, 0x41, 0x33, 0x4A, 0xB4, 0xD8, 0x79,
        0x16, 0x7E, 0x35, 0x4A, 0xD9, 0x15, 0x79, 0x27,
        0x16, 0x19, 0x2B, 0x45, 0xC4, 0x63, 0xC0, 0x6C,
        0x16, 0x4A, 0xD8, 0x64, 0x79, 0xF6, 0xC9, 0xF2,
        0x16, 0xE8, 0xE9, 0x3C, 0x80, 0x95, 0x55, 0x3C,
        0x16, 0x0A, 0xF9, 0xA6, 0xFB, 0x18, 0x3F, 0x1B,
        0x16, 0x56, 0x6C, 0xE2, 0x7E, 0x01, 0x0F, 0xEB,
        0x16, 0xF3, 0x15, 0x3F, 0x3C, 0xF5, 0x92, 0xAE,
        0x16, 0x2E, 0xC0, 0x91, 0xED, 0x64, 0xBB, 0xF8,
        0x16, 0x57, 0xBE, 0x1A, 0x01, 0x7F, 0xA9, 0x87,
        0x16, 0xB8, 0x13, 0xA8, 0x04, 0x12, 0x76, 0xDA,
        0x16, 0x68, 0x6B, 0x32, 0xFA, 0xA3, 0x53, 0xE2,
        0x16, 0x8B, 0x51, 0x9A, 0x2C, 0xBB, 0x09, 0x7F,
        0x16, 0xA5, 0xC9, 0xB5, 0xF3, 0x5C, 0x92, 0xD9,
        0x16, 0x62, 0x0F, 0x02, 0xF4, 0xE5, 0x6A, 0xBD,
        0x16, 0x92, 0xC7, 0x1C, 0x43, 0xE7, 0x1F, 0xED,
        0x16, 0x2A, 0x41, 0x1B, 0x8B, 0xF6, 0x9A, 0x1E,
        0x16, 0xC0, 0x3E, 0x16, 0x15, 0x0A, 0x03, 0xFF,
        0x16, 0xB5, 0x70, 0xF4, 0x59, 0x29, 0xF9, 0xAD,
        0x16, 0xB8, 0x90, 0x3B, 0x1E, 0x4E, 0xA2, 0xAB,
        0x16, 0x32, 0xC8, 0xC1, 0x5B, 0xDE, 0x7E, 0x77,
        0x16, 0x01, 0xB0, 0x68, 0x3B, 0xD8, 0x1D, 0x8E,
        0x16, 0x2D, 0x15, 0x6A, 0x4F, 0xCE, 0x4D, 0xFD,
        0x16, 0xA5, 0x27, 0x50, 0x85, 0xAD, 0xDC, 0xAA,
        0x16, 0x0C, 0xF1, 0xC2, 0x61, 0x99, 0xC8, 0x4C,
        0x16, 0xAE, 0x1E, 0xEE, 0xED, 0xBB, 0x79, 0x5F,
        0x16, 0xEF, 0xD3, 0x0C, 0x8A, 0x5F, 0xE1, 0x5B,
        0x16, 0xF7, 0xF6, 0x42, 0x09, 0xF8, 0xAF, 0x61,
        0x16, 0x05, 0x12, 0xC4, 0x53, 0xC5, 0x34, 0x3D,
        0x16, 0xA8, 0x28, 0xBD, 0x87, 0xEC, 0x54, 0x7C,
        0x16, 0x47, 0xE2, 0x4A, 0x81, 0xFE, 0x52, 0xA8,
        0x16, 0xAC, 0xFD, 0x51, 0x29, 0xA3, 0xEF, 0xB1,
        0x16, 0xC9, 0x7F, 0xD9, 0xFA, 0xF9, 0x8A, 0x57,
        0x16, 0xE4, 0xF5, 0x33, 0x87, 0x2F, 0xBE, 0x9F,
        0x16, 0x56, 0xEC, 0x98, 0xF7, 0x60, 0x72, 0x06,
        0x16, 0x94, 0xE3, 0x3C, 0x9B, 0x05, 0x52, 0x4A,
        0x16, 0x48, 0x21, 0xFD, 0x10, 0x31, 0xA1, 0x70,
        0x16, 0x5F, 0x25, 0xCE, 0xE0, 0x03, 0xB3, 0x09,
        0x16, 0xC8, 0x2B, 0xC1, 0x84, 0x0A, 0xF5, 0x13,
        0x16, 0xA6, 0x34, 0x47, 0x31, 0x70, 0x55, 0x78,
        0x16, 0x12, 0x9F, 0x4A, 0xCE, 0xA1, 0x05, 0xF0,
        0x16, 0x7F, 0xF4, 0x0B, 0x67, 0x75, 0xC7, 0x77,
        0x16, 0x8C, 0xA8, 0x57, 0xC7, 0x07, 0x27, 0xA6,
        0x16, 0xF2, 0x6B, 0xA7, 0xAE, 0x84, 0xD9, 0xB3,
        0x16, 0xD7, 0xAC, 0x57, 0x6A, 0x26, 0xC2, 0xA5,
        0x16, 0x26, 0xEB, 0x28, 0x05, 0xB5, 0xA9, 0xAD,
        0x16, 0xE3, 0x63, 0x7C, 0xB6, 0x07, 0x41, 0xCA,
        0x16, 0x9F, 0xFC, 0x41, 0x33, 0x60, 0xF5, 0x93,
        0x16, 0xED, 0x70, 0xA7, 0x49, 0xC7, 0x6E, 0xC1,
        0x16, 0x3B, 0xAD, 0x65, 0x9E, 0x7F, 0x95, 0xBA,
        0x16, 0xD5, 0x44, 0x7C, 0x44, 0xE6, 0x33, 0xEF,
        0x16, 0x87, 0x19, 0xAD, 0x40, 0x23, 0xCD, 0x4F,
        0x16, 0xF8, 0x51, 0x9D, 0x83, 0x5A, 0x23, 0x39,
        0x16, 0xFD, 0x06, 0xB6, 0x9C, 0xF3, 0x71, 0x1B,
        0x16, 0xD5, 0xF4, 0x09, 0x0E, 0xE7, 0x68, 0xEC,
        0x16, 0xC6, 0x24, 0x8F, 0x06, 0x11, 0x7D, 0x14,
        0x16, 0x5A, 0xE5, 0x8B, 0x7E, 0x26, 0x6A, 0xD6,
        0x16, 0xB1, 0xED, 0xB9, 0x95, 0x1D, 0x33, 0xDF,
        0x16, 0x87, 0xD8, 0xC7, 0x9F, 0xF0, 0x3F, 0xAD,
        0x16, 0xEB, 0xEE, 0xF2, 0x83, 0xA7, 0x26, 0x8A,
        0x16, 0x7B, 0x82, 0xBE, 0xF1, 0x46, 0x39, 0xF3,
        0x16, 0xBC, 0x6D, 0xD1, 0xAF, 0x32, 0x06, 0x04,
        0x16, 0xC0, 0x71, 0xDD, 0x3F, 0x63, 0x40, 0xE0,
        0x16, 0x80, 0xF7, 0x72, 0xCB, 0x2D, 0xC8, 0x3C,
        0x16, 0xC1, 0x95, 0x0F, 0xC2, 0xD0, 0xE5, 0x4F,
        0x16, 0x45, 0xB2, 0x22, 0x12, 0x91, 0x2D, 0x25,
        0x16, 0xA8, 0x70, 0xAC, 0x27, 0xE6, 0x12, 0xEC,
        0x16, 0x12, 0x1C, 0x7E, 0xD0, 0x34, 0xCC, 0xB9,
        0x16, 0x24, 0x14, 0x1D, 0x08, 0x9F, 0xB8, 0xD7,
        0x16, 0x7E, 0xF2, 0x4B, 0x00, 0x80, 0x69, 0x36,
        0x16, 0xB2, 0x22, 0xB4, 0xA7, 0x1E, 0xEB, 0x7D,
        0x16, 0xC6, 0xEF, 0x27, 0x4C, 0x55, 0xAA, 0xB7,
        0x16, 0xA5, 0xAE, 0x75, 0xC3, 0x7F, 0xED, 0xAD,
        0x16, 0x88, 0x31, 0x9F, 0x4C, 0x49, 0xA1, 0x30,
        0x16, 0xDA, 0x8E, 0x86, 0x79, 0x7F, 0x01, 0xEE,
        0x16, 0x11, 0x96, 0xC5, 0x52, 0xF6, 0x67, 0xA4,
        0x16, 0xCA, 0xCD, 0xBA, 0xE6, 0xA5, 0x82, 0x57,
        0x16, 0x0C, 0x82, 0x28, 0xFC, 0xA5, 0x2C, 0x6A,
        0x16, 0x96, 0xC8, 0xAA, 0x66, 0xB1, 0x57, 0xA6,
        0x16, 0x93, 0x94, 0x91, 0xB3, 0x93, 0xA9, 0xAE,
        0x16, 0x8D, 0x98, 0x72, 0x7C, 0xA0, 0x79, 0x3A,
        0x16, 0x28, 0x0B, 0x71, 0xA7, 0x61, 0xD9, 0x37,
        0x16, 0x94, 0x93, 0x4C, 0xE6, 0x90, 0x82, 0xAE,
        0x16, 0xC1, 0xDD, 0x66, 0xFD, 0x61, 0x66, 0xEF,
        0x16, 0xAC, 0xA7, 0x84, 0xAC, 0x59, 0x08, 0x01,
        0x16, 0x1E, 0xA1, 0x5D, 0xAA, 0x05, 0xB4, 0xA6,
        0x16, 0x70, 0xE8, 0x7D, 0x69, 0xD7, 0xEE, 0x03,
        0x16, 0x0F, 0x57, 0x70, 0x05, 0x61, 0xCF, 0x33,
        0x16, 0x77, 0xAE, 0x40, 0x2C, 0xFB, 0xDB, 0xB9,
        0x16, 0x62, 0x3B, 0x8C, 0xC8, 0x87, 0x00, 0xA5,
        0x16, 0x64, 0x86, 0x9B, 0xFB, 0x21, 0xEC, 0xB5,
        0x16, 0x92, 0x44, 0x53, 0xB1, 0x7F, 0x07, 0x8D,
        0x16, 0x0C, 0xF3, 0x52, 0x62, 0x29, 0x2C, 0x60,
        0x16, 0xEF, 0x25, 0x98, 0x35, 0x96, 0x52, 0x2D,
        0x16, 0x6F, 0x86, 0xA0, 0x7F, 0x52, 0xB6, 0x0F,
        0x16, 0xF6, 0xEC, 0x3A, 0x3F, 0x3B, 0xED, 0x54,
        0x16, 0x0C, 0xB3, 0x4A, 0x5C, 0xC9, 0x4C, 0xD8,
        0x16, 0xDB, 0xC8, 0x1A, 0x96, 0x5F, 0x2E, 0x39,
        0x16, 0xEB, 0xE7, 0x61, 0xDA, 0x31, 0xA1, 0x99,
        0x16, 0x14, 0x4A, 0x3C, 0x73, 0x3B, 0x87, 0x53,
        0x16, 0x75, 0x83, 0x39, 0x8F, 0xD2, 0xCB, 0x16,
        0x16, 0xE7, 0xC2, 0x6B, 0x92, 0x9F, 0xB0, 0x8E,
        0x16, 0x9C, 0x72, 0xD5, 0x14, 0x9A, 0x87, 0x4B,
        0x16, 0x2F, 0xDA, 0x8D, 0x25, 0xD3, 0x2D, 0x1D,
        0x16, 0x27, 0x5A, 0x6A, 0xE5, 0xE4, 0x2F, 0xB3,
        0x16, 0x79, 0x3D, 0x39, 0xB6, 0x1B, 0x53, 0xAB,
        0x16, 0x35, 0xD9, 0x5C, 0x6A, 0x39, 0xBF, 0x91,
        0x16, 0x1D, 0xD9, 0x51, 0x94, 0x6F, 0x4A, 0x8E,
        0x16, 0xF4, 0x99, 0x87, 0xD5, 0x22, 0x0A, 0x32,
        0x16, 0x40, 0x18, 0x17, 0x3D, 0xFD, 0x01, 0x7E,
        0x16, 0x65, 0xC9, 0x6F, 0x3E, 0xDF, 0x30, 0x61,
        0x16, 0x8F, 0x46, 0x7B, 0x4E, 0x3D, 0x93, 0xB5,
        0x16, 0x12, 0xEF, 0xD1, 0x2B, 0x41, 0xEB, 0x82,
        0x16, 0x9B, 0xCC, 0x9A, 0x6F, 0x44, 0xDD, 0x99,
        0x16, 0xDC, 0xF8, 0x4C, 0xCD, 0x2D, 0xAF, 0xDA,
        0x16, 0xD7, 0x5B, 0x2B, 0x79, 0x83, 0xB0, 0x62,
        0x16, 0xF1, 0x26, 0x69, 0xD6, 0xA8, 0x82, 0xD1,
        0x16, 0x7B, 0x53, 0x7C, 0xA8, 0x80, 0x88, 0x1D,
        0x16, 0x2B, 0x47, 0xDF, 0x98, 0x36, 0x54, 0x22,
        0x16, 0x86, 0xB6, 0x35, 0xB7, 0x23, 0x06, 0x8D,
        0x16, 0x93, 0xFE, 0x56, 0x36, 0x4C, 0xB2, 0x9E,
        0x16, 0x8A, 0x50, 0x6F, 0x56, 0x3D, 0x7D, 0x6C,
        0x16, 0xAA, 0x64, 0xA1, 0x64, 0xC3, 0x90, 0x31,
        0x16, 0x02, 0xAE, 0x46, 0xF6, 0x8B, 0x95, 0x21,
        0x16, 0xFD, 0x73, 0x52, 0xC4, 0x7E, 0xD1, 0xA8,
        0x16, 0xDB, 0x26, 0x13, 0x9A, 0xA4, 0x11, 0xD2,
        0x16, 0x90, 0x30, 0x94, 0x46, 0xD9, 0x0B, 0xB8,
        0x16, 0xB3, 0x8B, 0x77, 0xBC, 0x5F, 0x1C, 0x30,
        0x16, 0x81, 0x57, 0x65, 0xC7, 0x31, 0x9C, 0x31,
        0x16, 0x11, 0xC8, 0x0E, 0x4D, 0x1E, 0x60, 0x8D,
        0x16, 0xB1, 0xAA, 0xD6, 0x98, 0xC0, 0x0F, 0xD4,
        0x16, 0x69, 0xA2, 0xC0, 0x77, 0x36, 0x2C, 0x55,
        0x16, 0xA3, 0xB3, 0xD9, 0x8E, 0x5B, 0x58, 0x82,
        0x16, 0x4C, 0xB7, 0xAF, 0xC1, 0xC4, 0xE4, 0x8C,
        0x16, 0x5B, 0x80, 0x99, 0x69, 0xC5, 0xF6, 0x35,
        0x16, 0xCA, 0xC1, 0x86, 0x0E, 0x60, 0xE4, 0x92,
        0x16, 0x24, 0x15, 0xF7, 0x4A, 0x16, 0xA0, 0x6C,
        0x16, 0x92, 0x43, 0x39, 0x2E, 0xB0, 0xB4, 0xD6,
        0x16, 0x1C, 0xBC, 0x52, 0x52, 0x70, 0x0F, 0xD8,
        0x16, 0xC9, 0xFF, 0x2C, 0x28, 0xD5, 0x7A, 0x32,
        0x16, 0x83, 0x06, 0x01, 0x3E, 0xFF, 0x05, 0x06,
        0x16, 0x24, 0x46, 0xE7, 0xDE, 0xEC, 0x80, 0xB2,
        0x16, 0x6A, 0x40, 0x06, 0xF0, 0xDE, 0x08, 0x4A,
        0x16, 0xEB, 0x42, 0xC3, 0x71, 0xF5, 0x59, 0xC8,
        0x16, 0x0D, 0xD3, 0x9E, 0x59, 0xFC, 0x8A, 0x53,
        0x16, 0xE1, 0x8D, 0x7A, 0xA7, 0x28, 0xCB, 0xB0,
        0x16, 0x2E, 0x9C, 0xC8, 0x71, 0xBC, 0xE3, 0x2D,
        0x16, 0x0B, 0x4D, 0xDF, 0x4D, 0x63, 0x48, 0xBF,
        0x16, 0x74, 0x8B, 0x59, 0x6E, 0x0C, 0xE9, 0x50,
        0x16, 0xA3, 0x51, 0x01, 0x81, 0x06, 0xF4, 0xA6,
        0x16, 0xD9, 0xFC, 0x8E, 0x8E, 0xC2, 0xC3, 0x6F,
        0x16, 0x1D, 0x36, 0xD6, 0xB4, 0x87, 0xAC, 0x75,
        0x16, 0x3A, 0xA2, 0x38, 0x2E, 0x53, 0x71, 0xA6,
        0x16, 0x16, 0xB6, 0x29, 0x7F, 0x3A, 0x48, 0x43,
        0x16, 0x69, 0x8D, 0x79, 0x97, 0x24, 0xCB, 0x1D,
        0x16, 0x0D, 0x67, 0xBD, 0x4D, 0x86, 0x52, 0x65,
        0x16, 0xA8, 0x93, 0x19, 0x2F, 0xB1, 0xE4, 0x19,
        0x16, 0xE4, 0xEF, 0x64, 0x1B, 0x34, 0xA5, 0xD1,
        0x16, 0x92, 0x29, 0x6C, 0xFC, 0xCB, 0x48, 0x29,
        0x16, 0x2A, 0x09, 0x05, 0x2E, 0x0B, 0xA4, 0x19,
        0x16, 0xD7, 0xFF, 0xCA, 0xEE, 0xA5, 0x54, 0x98,
        0x16, 0x7D, 0xCE, 0xA5, 0x64, 0x2C, 0x9F, 0x88,
        0x16, 0x7B, 0x01, 0xE8, 0x94, 0xF7, 0x87, 0xDE,
        0x16, 0xCB, 0x58, 0x2D, 0xC3, 0x58, 0x89, 0xD9,
        0x16, 0x01, 0xDC, 0x69, 0xC6, 0xF5, 0x7E, 0xA1,
        0x16, 0x56, 0x35, 0x07, 0x01, 0xA1, 0x0D, 0x3A,
        0x16, 0x15, 0x02, 0x35, 0x37, 0x2B, 0xE1, 0x9B,
        0x16, 0xA6, 0x6D, 0x63, 0x6E, 0x65, 0x9A, 0x24,
        0x16, 0x87, 0xFA, 0x80, 0xF0, 0x4C, 0xF7, 0x58,
        0x16, 0xA7, 0xDB, 0x0F, 0x43, 0x67, 0x32, 0xF0,
        0x16, 0xC2, 0xFB, 0xBF, 0x0B, 0x89, 0xA2, 0xED,
        0x16, 0xD7, 0xEF, 0x47, 0xEA, 0x2F, 0x82, 0xAE,
        0x16, 0xBF, 0xA8, 0xE6, 0x03, 0x03, 0xEF, 0xE5,
        0x16, 0x2C, 0x48, 0x31, 0x82, 0x7C, 0x5E, 0x44,
        0x16, 0x6A, 0x49, 0xA4, 0x94, 0x21, 0x83, 0xD7,
        0x16, 0x78, 0x6D, 0x6C, 0x1A, 0xFE, 0xBF, 0xCE,
        0x16, 0x54, 0x5C, 0x4B, 0x64, 0x8D, 0xAB, 0x25,
        0x16, 0xB7, 0xA0, 0x7D, 0xF7, 0x98, 0x78, 0x20,
        0x16, 0x1E, 0xCD, 0x48, 0xB0, 0x9D, 0x3C, 0x62,
        0x16, 0x5E, 0xC3, 0xB0, 0x7A, 0x78, 0x53, 0xA9,
        0x16, 0x6F, 0xB9, 0xA6, 0x14, 0xC6, 0x02, 0x91,
        0x16, 0xA8, 0xFD, 0x77, 0xDD, 0xE1, 0x07, 0xE4,
        0x16, 0x01, 0xFA, 0x39, 0xB2, 0xCD, 0xD0, 0xFF,
        0x16, 0x24, 0x03, 0x06, 0xD8, 0x91, 0x93, 0x17,
        0x16, 0x55, 0xBA, 0xB6, 0x16, 0x0B, 0x8B, 0x27,
        0x16, 0x3F, 0xCC, 0x51, 0x76, 0xBA, 0x3D, 0x84,
        0x16, 0x8F, 0x51, 0xB0, 0xA7, 0x81, 0xEE, 0xD8,
        0x16, 0x18, 0xC9, 0xE6, 0x4D, 0x5B, 0x5B, 0xC2,
        0x16, 0x5F, 0x0C, 0x0D, 0xB0, 0x63, 0x94, 0xB5,
        0x16, 0x31, 0xAC, 0xF6, 0xE2, 0xE7, 0x26, 0x87,
        0x16, 0x1F, 0xC8, 0xE4, 0xEC, 0xC6, 0x2A, 0x65,
        0x16, 0x53, 0x3B, 0x85, 0x74, 0x1E, 0xFB, 0xFE,
        0x16, 0x33, 0x25, 0x86, 0xF6, 0xFB, 0x4E, 0x64,
        0x16, 0xE6, 0x55, 0x57, 0xC6, 0x4D, 0x8C, 0x9A,
        0x16, 0x10, 0x06, 0x82, 0x47, 0x8B, 0x45, 0x66,
        0x16, 0xEC, 0xA2, 0xE5, 0x21, 0x87, 0x57, 0x5E,
        0x16, 0xA4, 0x5D, 0x2B, 0x16, 0xF4, 0x67, 0x8A,
        0x16, 0xE2, 0xFF, 0xD4, 0xF7, 0x70, 0x5C, 0x66,
        0x16, 0x7A, 0xA5, 0x3E, 0xA5, 0xAA, 0xD1, 0x5F,
        0x16, 0xAD, 0x24, 0x32, 0xA9, 0xF2, 0x2B, 0xDB,
        0x16, 0x61, 0xA3, 0x02, 0xAA, 0xFA, 0x87, 0xA0,
        0x16, 0xD4, 0x14, 0x39, 0x75, 0xBD, 0xFB, 0xF5,
        0x16, 0xE4, 0x64, 0x29, 0x0F, 0x83, 0x43, 0x75,
        0x16, 0xE1, 0x5B, 0xB4, 0x7C, 0xD6, 0x2C, 0xE4,
        0x16, 0x9C, 0xF3, 0xCE, 0xBF, 0x36, 0xFA, 0x53,
        0x16, 0xFC, 0x09, 0xA1, 0xB1, 0x78, 0x8F, 0xEF,
        0x16, 0xCC, 0x9E, 0x51, 0xDD, 0x8F, 0xB6, 0xBF,
        0x16, 0x38, 0xF1, 0xC7, 0xF7, 0xA0, 0x97, 0x6B,
        0x16, 0x6D, 0x6F, 0x5F, 0x71, 0x73, 0xAF, 0x4D,
        0x16, 0x02, 0xC5, 0x66, 0x51, 0x5C, 0x76, 0x33,
        0x16, 0xEF, 0xA0, 0x07, 0x79, 0xE7, 0x31, 0x63,
        0x16, 0xB7, 0x91, 0x04, 0x2E, 0x8D, 0x99, 0x8B,
        0x16, 0xD5, 0x5C, 0x97, 0xBE, 0x60, 0xB7, 0xEC,
        0x16, 0xB0, 0xDE, 0x46, 0x4A, 0x1F, 0x92, 0x2F,
        0x16, 0x35, 0x09, 0x16, 0x22, 0xA7, 0x83, 0x3E,
        0x16, 0xA9, 0x96, 0xCC, 0xA8, 0x04, 0x89, 0xA3,
        0x16, 0xE6, 0x79, 0x2D, 0xA7, 0xC1, 0xFE, 0x45,
        0x16, 0xC2, 0x32, 0x35, 0x26, 0x53, 0x13, 0xD3,
        0x16, 0xC0, 0x91, 0x1F, 0xFC, 0xFD, 0xF1, 0x72,
        0x16, 0x94, 0x32, 0xA0, 0x6C, 0xC7, 0x44, 0x85,
        0x16, 0x97, 0x7F, 0x7F, 0x93, 0x3E, 0x26, 0xE3,
        0x16, 0xD0, 0x72, 0x67, 0xA9, 0x43, 0xBF, 0x0F,
        0x16, 0x3E, 0x0C, 0xE4, 0x4E, 0x23, 0x9B, 0x24,
        0x16, 0xFC, 0xDB, 0xF1, 0x04, 0x4A, 0xEC, 0xB7,
        0x16, 0x19, 0x3A, 0x10, 0x4D, 0x0B, 0x8E, 0xEF,
        0x16, 0x73, 0x4D, 0x78, 0xBA, 0x6D, 0x5C, 0xE2,
        0x16, 0x40, 0x75, 0x38, 0x1C, 0xCD, 0x58, 0x4C,
        0x16, 0x7A, 0xD4, 0x10, 0xD6, 0x35, 0xE1, 0xD0,
        0x16, 0xEB, 0xBF, 0x1D, 0xD3, 0x12, 0xF0, 0x2A,
        0x16, 0x45, 0xC4, 0x12, 0x2E, 0xE9, 0x10, 0x44,
        0x16, 0x95, 0xE5, 0x11, 0xCC, 0x4C, 0x8C, 0x78,
        0x16, 0x45, 0x86, 0x5F, 0xB8, 0x52, 0xC5, 0x8D,
        0x16, 0x75, 0xDB, 0xEC, 0xFE, 0x91, 0x52, 0x56,
        0x16, 0x71, 0x84, 0xA1, 0x3E, 0x9A, 0x8E, 0xF8,
        0x16, 0xF5, 0xB3, 0x82, 0xD7, 0x59, 0xE0, 0x61,
        0x16, 0x6D, 0x90, 0xFC, 0x22, 0x23, 0x1A, 0xFF,
        0x16, 0x4E, 0xCC, 0xC1, 0xD1, 0xAF, 0x15, 0x59,
        0x16, 0x1D, 0xEF, 0x5B, 0xCC, 0xB6, 0xC0, 0x13,
        0x16, 0xF9, 0xE8, 0xFF, 0x03, 0xAE, 0xFC, 0x1A,
        0x16, 0x55, 0x81, 0x6B, 0xEC, 0x08, 0x00, 0x89,
        0x16, 0x05, 0x0A, 0x14, 0xAF, 0xB6, 0x4B, 0xB2,
        0x16, 0x80, 0xE8, 0xDD, 0x85, 0x5A, 0xD8, 0x9F,
        0x16, 0xC4, 0x57, 0xC5, 0x1E, 0xB1, 0xF4, 0x49,
        0x16, 0x0C, 0xDD, 0x23, 0xB1, 0x9B, 0x9C, 0x9B,
        0x16, 0x3F, 0xC4, 0xF5, 0xD6, 0x17, 0xC2, 0xDD,
        0x16, 0x0F, 0x7E, 0x3F, 0x44, 0xFE, 0x5C, 0x92,
        0x16, 0xC3, 0xF2, 0xD8, 0x3E, 0xB8, 0x0A, 0x67,
        0x16, 0x04, 0x0E, 0x1C, 0x4B, 0xA5, 0x45, 0x8F,
        0x16, 0x3C, 0xFA, 0x31, 0x39, 0xEC, 0x78, 0x67,
        0x16, 0xB3, 0x7F, 0x6F, 0x1A, 0x03, 0x6D, 0x6C,
        0x16, 0xE0, 0xF5, 0x04, 0xD5, 0x15, 0xBC, 0x5D,
        0x16, 0x2F, 0xBC, 0x7D, 0x0D, 0x02, 0x84, 0xFD,
        0x16, 0xDB, 0xCD, 0x23, 0x3B, 0xA2, 0x40, 0x80,
        0x16, 0x6C, 0xD6, 0xD1, 0x07, 0xB7, 0x96, 0xEF,
        0x16, 0x59, 0x4E, 0xDF, 0xE0, 0x3D, 0xC2, 0x33,
        0x16, 0xF6, 0x6A, 0xFE, 0x0B, 0x15, 0x34, 0x13,
        0x16, 0xC9, 0x8C, 0xBA, 0xB4, 0xC5, 0x84, 0xAB,
        0x16, 0xCC, 0x19, 0xF2, 0xF0, 0x6C, 0x08, 0x39,
        0x16, 0x4D, 0x40, 0xB9, 0x00, 0xC8, 0xCD, 0xC1,
        0x16, 0x95, 0xDF, 0x45, 0xC0, 0xC0, 0x1B, 0xE4,
        0x16, 0xF2, 0xA6, 0xA8, 0x68, 0x9C, 0x5B, 0xE1,
        0x16, 0xFE, 0x0B, 0x63, 0xB8, 0x59, 0x90, 0x04,
        0x16, 0x97, 0x69, 0x94, 0x4D, 0xFA, 0xDE, 0x9C,
        0x16, 0xC4, 0xD5, 0x96, 0x1C, 0x93, 0x82, 0x67,
        0x16, 0x49, 0x4A, 0x79, 0xAB, 0x85, 0xDD, 0x2D,
        0x16, 0xA7, 0x6A, 0x4D, 0xFC, 0x3C, 0xB5, 0xAC,
        0x16, 0xF5, 0x8B, 0xC8, 0xD6, 0x40, 0x52, 0x19,
        0x16, 0x67, 0x64, 0x51, 0xA1, 0x70, 0xC0, 0x93,
        0x16, 0x34, 0xFD, 0x17, 0x9E, 0xA9, 0xBF, 0x5E,
        0x16, 0x40, 0xCC, 0xF1, 0x52, 0x3A, 0x4D, 0x50,
        0x16, 0x93, 0xC9, 0x9D, 0x6A, 0x22, 0x93, 0x85,
        0x16, 0xD6, 0x7F, 0x11, 0x0B, 0x42, 0x90, 0xB7,
        0x16, 0x99, 0x3B, 0x84, 0x4A, 0x12, 0x89, 0xFF,
        0x16, 0xF3, 0xC5, 0x13, 0x28, 0x74, 0xE8, 0x08,
        0x16, 0xF0, 0xCF, 0x3D, 0x75, 0x5C, 0x7E, 0xD1,
        0x16, 0x6B, 0x07, 0xE8, 0xD8, 0x30, 0xA5, 0xA3,
        0x16, 0xAA, 0x6E, 0xE5, 0x20, 0xC8, 0xAF, 0xB1,
        0x16, 0xF7, 0x9F, 0xE9, 0xA1, 0xBB, 0x84, 0xF2,
        0x16, 0xA9, 0xAE, 0xCC, 0xA3, 0x62, 0xAD, 0xB0,
        0x16, 0x38, 0xDB, 0xD8, 0x21, 0x9A, 0x7B, 0x60,
        0x16, 0x14, 0xB3, 0x15, 0xF1, 0xFD, 0x47, 0xA4,
        0x16, 0xD0, 0x1E, 0x77, 0x7F, 0x8F, 0xF9, 0xE7,
        0x16, 0x4A, 0x21, 0xBF, 0x54, 0x86, 0x67, 0xBF,
        0x16, 0xA1, 0xCC, 0x0A, 0x17, 0x51, 0x48, 0x96,
        0x16, 0x76, 0xA9, 0x64, 0x7E, 0xA6, 0xCC, 0x89,
        0x16, 0x75, 0x83, 0xB5, 0x4E, 0xFB, 0xBE, 0xB4,
        0x16, 0x0B, 0x00, 0xCD, 0xFF, 0x24, 0xF5, 0x8E,
        0x16, 0x87, 0x85, 0xE3, 0x2B, 0xFD, 0x57, 0xD7,
        0x16, 0xEB, 0xE1, 0xDB, 0x79, 0x11, 0x98, 0x6C,
        0x16, 0x26, 0xAA, 0x80, 0xC1, 0x72, 0xA2, 0x77,
        0x16, 0xEE, 0x96, 0x87, 0xEC, 0xD5, 0x0A, 0xF6,
        0x16, 0x36, 0xB0, 0x30, 0x27, 0x7B, 0x84, 0x69,
        0x16, 0x2A, 0xE7, 0x57, 0xC6, 0x4D, 0x58, 0x8B,
        0x16, 0xED, 0xDF, 0x43, 0x12, 0x6D, 0xC0, 0x94,
        0x16, 0x4F, 0x2C, 0xB7, 0xCA, 0x10, 0x39, 0x64,
        0x16, 0xCE, 0xC2, 0x68, 0xB3, 0xE6, 0x2B, 0xB4,
        0x16, 0x17, 0xCB, 0xFC, 0x0E, 0x6F, 0xA7, 0xB8,
        0x16, 0x22, 0x8D, 0xB8, 0x17, 0xA1, 0x6D, 0xA8,
        0x16, 0x93, 0xAE, 0xDB, 0x8E, 0x3A, 0xF8, 0xEB,
        0x16, 0xFD, 0x24, 0xA0, 0xFF, 0x20, 0x6B, 0xE1,
        0x16, 0x33, 0x77, 0xF0, 0x0E, 0x24, 0x83, 0xD5,
        0x16, 0x92, 0x5A, 0xA5, 0x31, 0xA3, 0xA8, 0x83,
        0x16, 0x07, 0x73, 0x2B, 0xEB, 0xC2, 0x7F, 0x28,
        0x16, 0x1E, 0x54, 0xA4, 0x22, 0xC9, 0x8D, 0x7F,
        0x16, 0x06, 0x4C, 0x68, 0x0E, 0x77, 0x37, 0xD0,
        0x16, 0xF5, 0xBC, 0xC9, 0xD8, 0xF0, 0x52, 0xEF,
        0x16, 0x05, 0xF7, 0xA1, 0x38, 0xE9, 0x54, 0xC8,
        0x16, 0x7C, 0xC2, 0xE6, 0xCD, 0xB2, 0x4A, 0xFD,
        0x16, 0x37, 0x74, 0xCF, 0x30, 0xDB, 0x7C, 0xD2,
        0x16, 0x56, 0xD7, 0x12, 0x4B, 0x9D, 0xE0, 0x18,
        0x16, 0xED, 0x73, 0x66, 0xE5, 0x3F, 0x8A, 0x50,
        0x16, 0x43, 0x0B, 0x2B, 0xD8, 0x53, 0x89, 0x34,
        0x16, 0xC2, 0x15, 0x0A, 0xA5, 0x5B, 0xDC, 0xCB,
        0x16, 0xA5, 0x5F, 0x20, 0x25, 0xE5, 0x35, 0x84,
        0x16, 0x26, 0x09, 0x84, 0x8A, 0xBF, 0xE6, 0x65,
        0x16, 0x6A, 0x7D, 0xB0, 0xA5, 0xD6, 0xDE, 0xC8,
        0x16, 0x8D, 0x7C, 0x68, 0xD7, 0xCC, 0xE5, 0x54,
        0x16, 0x1A, 0x60, 0x6E, 0xB6, 0xC8, 0x03, 0xE8,
        0x16, 0xE9, 0xE5, 0x34, 0x8A, 0xDD, 0x11, 0x4D,
        0x16, 0x8C, 0xA3, 0x02, 0xDB, 0xFF, 0xD5, 0x23,
        0x16, 0x55, 0x05, 0xA9, 0x23, 0xF1, 0xCD, 0x3B,
        0x16, 0xCA, 0xC6, 0x91, 0xB9, 0x53, 0x61, 0x2E,
        0x16, 0xEC, 0xA2, 0xA2, 0xAF, 0xD8, 0xA7, 0xEB,
        0x16, 0x65, 0xB1, 0x1D, 0xD4, 0x26, 0xAB, 0xC3,
        0x16, 0x82, 0xFD, 0xA2, 0x53, 0xA2, 0x2E, 0xD7,
        0x16, 0x09, 0xE8, 0x59, 0x45, 0xB5, 0x53, 0xB9,
        0x16, 0x2A, 0x83, 0x4D, 0xD5, 0x26, 0x4A, 0x2D,
        0x16, 0xCC, 0x24, 0x8C, 0x94, 0x6C, 0xED, 0x3F,
        0x16, 0xCE, 0xB0, 0x81, 0x52, 0xD1, 0x9B, 0x2C,
        0x16, 0x4C, 0x34, 0x46, 0x57, 0xE6, 0x3F, 0x01,
        0x16, 0xA6, 0xB0, 0x05, 0xB0, 0x95, 0x71, 0xB9,
        0x16, 0x06, 0x10, 0x07, 0x27, 0xB6, 0x7F, 0x35,
        0x16, 0xB9, 0x42, 0x9B, 0x30, 0x44, 0x53, 0x47,
        0x16, 0x7B, 0x35, 0xA9, 0x99, 0x6D, 0xF2, 0xAD,
        0x16, 0x70, 0xE0, 0xB2, 0x5C, 0xF8, 0x64, 0x5E,
        0x16, 0xA9, 0x39, 0x08, 0xFC, 0xEA, 0x15, 0x7B,
        0x16, 0x28, 0x4A, 0x1C, 0xF5, 0x51, 0x5E, 0xA9,
        0x16, 0x8F, 0xC8, 0x7A, 0x21, 0x81, 0x4A, 0x87,
        0x16, 0x06, 0x5E, 0xE8, 0x58, 0x92, 0xFE, 0x6B,
        0x16, 0x8E, 0x9F, 0x28, 0xA0, 0xCE, 0xB8, 0xC3,
        0x16, 0x53, 0xC8, 0xF0, 0xBA, 0x3A, 0x72, 0xB3,
        0x16, 0xF6, 0x9F, 0x6C, 0xF9, 0x42, 0x1C, 0xD9,
        0x16, 0xB4, 0xAE, 0x8C, 0x6F, 0xA7, 0xED, 0xBA,
        0x16, 0x07, 0xC6, 0x48, 0xC5, 0x8D, 0xF2, 0x61,
        0x16, 0xC2, 0x36, 0x93, 0x44, 0xC9, 0xC7, 0x98,
        0x16, 0x7E, 0x4C, 0x51, 0xAB, 0x3F, 0x14, 0x7D,
        0x16, 0x65, 0xA5, 0xED, 0xCB, 0xBB, 0x69, 0x4C,
        0x16, 0x8C, 0x45, 0x5E, 0x2A, 0xB3, 0x21, 0xF1,
        0x16, 0x3E, 0xA9, 0xBC, 0x52, 0x15, 0x6C, 0x1A,
        0x16, 0x59, 0x03, 0x0C, 0x5B, 0x86, 0xB5, 0x99,
        0x16, 0x19, 0xEC, 0xA9, 0x9E, 0x57, 0xC8, 0x1D,
        0x16, 0x41, 0xAF, 0x63, 0x52, 0x85, 0x77, 0x97,
        0x16, 0x0E, 0x7A, 0xEC, 0x97, 0xA9, 0x9C, 0x68,
        0x16, 0xE9, 0xCE, 0xF8, 0xC5, 0xEB, 0x9F, 0xAE,
        0x16, 0x04, 0xB5, 0x98, 0x52, 0x98, 0xDA, 0x21,
        0x16, 0xEA, 0xBE, 0x24, 0xFA, 0x38, 0x9C, 0x5D,
        0x16, 0x58, 0xAA, 0x79, 0xED, 0xEE, 0xD2, 0x76,
        0x16, 0x47, 0x91, 0x17, 0x09, 0xFD, 0xF3, 0xC3,
        0x16, 0x37, 0xD6, 0xC5, 0xA4, 0xD7, 0x6F, 0x67,
        0x16, 0xBC, 0x5C, 0x04, 0x5A, 0x93, 0x35, 0x67,
        0x16, 0x2C, 0xE2, 0x4F, 0x95, 0x14, 0xFA, 0xBA,
        0x16, 0x5C, 0x79, 0x63, 0xFA, 0xDA, 0x00, 0xEC,
        0x16, 0x7F, 0x4B, 0x86, 0x78, 0xE4, 0x41, 0xFE,
        0x16, 0x5D, 0xE8, 0xD1, 0x41, 0x26, 0xD9, 0xAF,
        0x16, 0xF1, 0xDE, 0x13, 0x94, 0x0C, 0x82, 0x6E,
        0x16, 0x5F, 0x01, 0xF7, 0xFD, 0x4A, 0xD7, 0x9A,
        0x16, 0x58, 0xA7, 0xC1, 0xE7, 0xEA, 0xFA, 0x96,
        0x16, 0x38, 0x34, 0x0A, 0x3D, 0x82, 0x51, 0x9D,
        0x16, 0x7F, 0x6E, 0x67, 0xF3, 0x15, 0xAC, 0x7D,
        0x16, 0x25, 0x77, 0xF6, 0xF4, 0x1D, 0x21, 0xB7,
        0x16, 0x71, 0x0D, 0x07, 0xC7, 0x8C, 0x39, 0x82,
        0x16, 0xB0, 0x64, 0x41, 0x96, 0xA2, 0x68, 0x69,
        0x16, 0x4D, 0x86, 0xDE, 0x4C, 0x53, 0x48, 0x3A,
        0x16, 0x22, 0x76, 0xB0, 0xE8, 0x14, 0xDC, 0x3E,
        0x16, 0xE2, 0x33, 0x86, 0x9E, 0x74, 0xA4, 0x23,
        0x16, 0x92, 0x88, 0x4E, 0xCF, 0x5E, 0x2A, 0xB6,
        0x16, 0x71, 0x80, 0x12, 0x56, 0x05, 0x1E, 0x9B,
        0x16, 0x81, 0x24, 0x10, 0x36, 0x34, 0x2A, 0x40,
        0x16, 0x84, 0x34, 0xB1, 0xF2, 0xB6, 0x5A, 0x57,
        0x16, 0x95, 0x27, 0x51, 0x60, 0xEA, 0xFE, 0x15,
        0x16, 0xA1, 0xA4, 0xE0, 0x71, 0x5E, 0x7E, 0x5E,
        0x16, 0x4A, 0xDB, 0x39, 0xBB, 0x9A, 0x9A, 0xF2,
        0x16, 0x55, 0x02, 0x9C, 0xAA, 0x99, 0xE2, 0x7B,
        0x16, 0x07, 0x32, 0xCD, 0x43, 0x38, 0x22, 0xE0,
        0x16, 0x5E, 0x60, 0x1A, 0x77, 0x43, 0xDD, 0x5E,
        0x16, 0xE1, 0x3C, 0xEA, 0x0C, 0x9E, 0x63, 0xE4,
        0x16, 0xCA, 0xBC, 0x00, 0xC8, 0xDB, 0x1B, 0x5B,
        0x16, 0xC5, 0x41, 0x53, 0x96, 0x21, 0x98, 0x5A,
        0x16, 0x20, 0xCA, 0x75, 0xAD, 0x50, 0x03, 0x18,
        0x16, 0xDE, 0x7A, 0x01, 0x7B, 0x6A, 0x16, 0x22,
        0x16, 0xC3, 0x41, 0xC4, 0x57, 0x25, 0x5C, 0x2D,
        0x16, 0x7B, 0x2A, 0x10, 0xF6, 0xB4, 0x99, 0x9D,
        0x16, 0x2B, 0x89, 0xE0, 0xC0, 0xA4, 0x14, 0x94,
        0x16, 0x77, 0x56, 0x51, 0xCC, 0x4D, 0x9A, 0x94,
        0x16, 0x23, 0x90, 0xBD, 0xBE, 0xA2, 0x22, 0xDD,
        0x16, 0xF0, 0x09, 0xDA, 0xC8, 0x4C, 0xAA, 0x8D,
        0x16, 0x3E, 0x7E, 0xC0, 0x8A, 0x09, 0x77, 0x39,
        0x16, 0xA9, 0xB2, 0xD2, 0xD3, 0x7F, 0xA8, 0x6A,
        0x16, 0x3B, 0x50, 0xB5, 0x2E, 0x30, 0x74, 0x13,
        0x16, 0xFB, 0x59, 0xD1, 0x7E, 0x6F, 0xED, 0x9D,
        0x16, 0x06, 0x08, 0xFE, 0x4A, 0x5B, 0x0E, 0x44,
        0x16, 0x96, 0x70, 0xCC, 0x7D, 0xB9, 0x6F, 0x5F,
        0x16, 0x3E, 0x9C, 0x05, 0x94, 0x7D, 0x65, 0x18,
        0x16, 0xC0, 0xFB, 0xD6, 0x13, 0x92, 0xC9, 0x04,
        0x16, 0x60, 0xB8, 0x62, 0x86, 0x7D, 0x26, 0x2F,
        0x16, 0x30, 0x9D, 0x09, 0xEF, 0x66, 0xD9, 0x54,
        0x16, 0x11, 0xF5, 0x11, 0xDB, 0x3D, 0xC1, 0xAF,
        0x16, 0x4B, 0x1E, 0x77, 0x68, 0x26, 0xDB, 0x86,
        0x16, 0x7A, 0x15, 0xB5, 0x60, 0x8C, 0x58, 0x9D,
        0x16, 0x52, 0xA0, 0xDB, 0xB3, 0x6B, 0xF6, 0x14,
        0x16, 0x51, 0x01, 0x84, 0x63, 0x3A, 0x98, 0x13,
        0x16, 0x91, 0xD5, 0xA9, 0x2F, 0xF9, 0xA1, 0x37,
        0x16, 0xB2, 0x1A, 0x5F, 0xF1, 0xD3, 0x08, 0x44,
        0x16, 0xEB, 0x59, 0x97, 0xB8, 0x33, 0x5C, 0x33,
        0x16, 0x0F, 0x3B, 0x7C, 0x3E, 0xD9, 0x74, 0xA3,
        0x16, 0xE5, 0x8B, 0x74, 0x03, 0x33, 0xF0, 0x5A,
        0x16, 0x77, 0x52, 0x9F, 0x9B, 0xC9, 0x7D, 0x55,
        0x16, 0x7C, 0x31, 0x3D, 0x84, 0x46, 0x40, 0x55,
        0x16, 0x6E, 0xC9, 0x19, 0xC2, 0xEE, 0xC4, 0x51,
        0x16, 0xDF, 0x16, 0x8E, 0x6E, 0x4B, 0xBE, 0xA3,
        0x16, 0x4E, 0xE1, 0x71, 0xA3, 0xD3, 0x92, 0x7A,
        0x16, 0x9E, 0x93, 0xB3, 0x85, 0x20, 0x5D, 0x36,
        0x16, 0xA1, 0xA3, 0x53, 0x93, 0x9C, 0x34, 0x38,
        0x16, 0x79, 0xCF, 0x2F, 0x17, 0x04, 0x71, 0xF7,
        0x16, 0x91, 0x9D, 0x1C, 0xCD, 0x70, 0xA0, 0x97,
        0x16, 0x8D, 0x03, 0xF5, 0xFD, 0x70, 0xC1, 0xE7,
        0x16, 0x6D, 0x1D, 0x0A, 0xC6, 0x35, 0x42, 0x15,
        0x16, 0x0F, 0x4A, 0xED, 0x16, 0x46, 0xED, 0xB2,
        0x16, 0x35, 0x0F, 0xA1, 0xBD, 0xBC, 0xA9, 0x07,
        0x16, 0x2E, 0xB6, 0x3A, 0xCC, 0x80, 0x84, 0x95,
        0x16, 0xAF, 0xEF, 0xA5, 0x4D, 0xD6, 0xD7, 0xB9,
        0x16, 0x45, 0x17, 0x63, 0xF2, 0xAA, 0x3C, 0x57,
        0x16, 0xA1, 0x3F, 0x57, 0x94, 0xE5, 0xEF, 0xBA,
        0x16, 0x06, 0x93, 0x8F, 0x8F, 0x29, 0x6C, 0xC6,
        0x16, 0x2F, 0xE5, 0x2A, 0x54, 0x81, 0x4C, 0x8A,
        0x16, 0x12, 0xF9, 0xFA, 0x05, 0x6F, 0xF8, 0x93,
        0x16, 0xFD, 0x7B, 0x27, 0x5F, 0x6C, 0x18, 0x98,
        0x16, 0x1F, 0x36, 0x80, 0x13, 0x95, 0xF0, 0xC8,
        0x16, 0xEC, 0x80, 0x10, 0x5A, 0xAF, 0x4F, 0xED,
        0x16, 0x46, 0x9E, 0xEE, 0xAF, 0x24, 0xD0, 0xED,
        0x16, 0x0B, 0xD1, 0xC1, 0xDA, 0x11, 0xBC, 0x76,
        0x16, 0xA0, 0x76, 0x68, 0xE0, 0x70, 0x67, 0x71,
        0x16, 0xAF, 0xAB, 0xB9, 0x92, 0x30, 0x11, 0xB6,
        0x16, 0x0A, 0xDF, 0x27, 0xB7, 0x36, 0x2A, 0x3A,
        0x16, 0x29, 0xC3, 0xF6, 0xE2, 0x53, 0x35, 0x9F,
        0x16, 0x49, 0xA9, 0x76, 0xF7, 0xB2, 0x5C, 0x10,
        0x16, 0xB5, 0x7D, 0xC6, 0xA7, 0x43, 0x2A, 0x83,
        0x16, 0x02, 0x30, 0x80, 0x1A, 0xF1, 0x7C, 0xB4,
        0x16, 0xC9, 0x8F, 0x6D, 0x0F, 0xE7, 0xCA, 0x2A,
        0x16, 0x56, 0xF1, 0x0A, 0x27, 0x89, 0x7F, 0xE7,
        0x16, 0x20, 0xA4, 0xBE, 0xF8, 0xFF, 0xC6, 0x5C,
        0x16, 0x1D, 0x76, 0x8F, 0x1F, 0x62, 0x1C, 0xCD,
        0x16, 0x9A, 0x25, 0xFA, 0xF7, 0xC9, 0x9F, 0x72,
        0x16, 0xAB, 0x69, 0x3B, 0xF4, 0x73, 0xAA, 0x50,
        0x16, 0xE9, 0x77, 0x0F, 0x2B, 0xC1, 0x47, 0x0D,
        0x16, 0x7B, 0x1A, 0x7A, 0xC7, 0x91, 0xE1, 0x42,
        0x16, 0xE2, 0x01, 0xAD, 0x55, 0xA0, 0xC0, 0x70,
        0x16, 0xD9, 0xE3, 0xB3, 0x27, 0x9C, 0x4B, 0x03,
        0x16, 0x4B, 0xB4, 0x34, 0x72, 0x4F, 0x04, 0x18,
        0x16, 0xB2, 0x18, 0xBD, 0xE3, 0xD0, 0xC7, 0xA8,
        0x16, 0x84, 0x3A, 0xCC, 0x82, 0x3C, 0x32, 0xCD,
        0x16, 0xAC, 0xFA, 0x75, 0x4D, 0xF1, 0x5E, 0x2A,
        0x16, 0x71, 0x92, 0x7D, 0xA6, 0x95, 0x2F, 0x85,
        0x16, 0xB9, 0x35, 0x66, 0xC2, 0x2C, 0x2B, 0x99,
        0x16, 0x57, 0xD7, 0xCE, 0x9B, 0xAD, 0x68, 0x61,
        0x16, 0x74, 0xB3, 0x98, 0x49, 0x3D, 0xFA, 0x9C,
        0x16, 0xB1, 0x28, 0xE2, 0xB5, 0xA2, 0x8C, 0xD4,
        0x16, 0xBF, 0x93, 0x2C, 0x69, 0xFC, 0x39, 0xCB,
        0x16, 0xF8, 0x88, 0xC8, 0x68, 0x76, 0x11, 0x15,
        0x16, 0x5C, 0x37, 0x21, 0x7A, 0x3D, 0xB2, 0x29,
        0x16, 0x21, 0xE9, 0x62, 0xCF, 0x4E, 0xB0, 0xC9,
        0x16, 0x7A, 0x83, 0x21, 0x09, 0x36, 0x19, 0xD5,
        0x16, 0x5E, 0xFD, 0x3D, 0xDD, 0x2C, 0xB8, 0x7E,
        0x16, 0x12, 0xEF, 0x7C, 0xAD, 0x4B, 0xAD, 0xC4,
        0x16, 0x25, 0x85, 0xD6, 0xCA, 0x06, 0xA0, 0x06,
        0x16, 0x9A, 0x38, 0x60, 0xF9, 0x56, 0xB7, 0x4E,
        0x16, 0x46, 0x36, 0xEA, 0xC6, 0x85, 0x62, 0x42,
        0x16, 0xF0, 0x72, 0xE1, 0x04, 0xFB, 0x95, 0x6B,
        0x16, 0xDF, 0x2C, 0xB0, 0xFA, 0xE9, 0x3A, 0xC0,
        0x16, 0x9A, 0xDA, 0xB0, 0xE6, 0xE7, 0x25, 0x26,
        0x16, 0x3F, 0xC5, 0x15, 0x96, 0x22, 0x38, 0xB1,
        0x16, 0x39, 0xA8, 0x69, 0x31, 0x2D, 0x9B, 0xE4,
        0x16, 0x00, 0x5F, 0x1A, 0xAC, 0x8F, 0x3B, 0x3B,
        0x16, 0xDE, 0xCC, 0x4F, 0x46, 0x43, 0x8A, 0x82,
        0x16, 0x8B, 0xEC, 0x1D, 0xD9, 0x46, 0x6B, 0xBD,
        0x16, 0x9F, 0xB4, 0x8A, 0x80, 0x30, 0x8B, 0x74,
        0x16, 0x21, 0x0D, 0x3E, 0x00, 0x15, 0x5D, 0xB1,
        0x16, 0x45, 0x44, 0xDC, 0x30, 0xF8, 0xB4, 0x0B,
        0x16, 0x7E, 0x86, 0x8F, 0xE0, 0x82, 0xB1, 0xA6,
        0x16, 0x5C, 0x6C, 0xA3, 0xA5, 0xAE, 0xD0, 0xDE,
        0x16, 0x3E, 0xC6, 0x5E, 0x73, 0x26, 0xE2, 0xEA,
        0x16, 0x33, 0x42, 0xB5, 0x9C, 0x0E, 0xC4, 0x4A,
        0x16, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x0C, 0x00, 0x06, 0xBA, 0xD5, 0xAE,
        0x16, 0x31, 0xA5, 0xD6, 0x50, 0x66, 0x58, 0xEB,
        0x16, 0x13, 0x76, 0x12, 0x21, 0xB3, 0xAF, 0x57,
        0x16, 0x46, 0x24, 0xA4, 0xF9, 0x5E, 0xB0, 0x87,
        0x16, 0x33, 0x90, 0x63, 0x56, 0xFC, 0x70, 0x4F,
        0x16, 0xCE, 0x0D, 0x9B, 0x04, 0x61, 0x69, 0x40,
        0x16, 0xC7, 0xA9, 0xC1, 0x28, 0xD7, 0xCC, 0xC9,
        0x16, 0x70, 0x42, 0xF6, 0xBA, 0xAC, 0xC5, 0xAA,
        0x16, 0xF7, 0xF7, 0xFE, 0xDD, 0x1C, 0x79, 0xFE,
        0x16, 0xDF, 0xF0, 0xA7, 0x8B, 0xC7, 0x5D, 0x11,
        0x16, 0x72, 0x1D, 0x3D, 0x18, 0x52, 0x45, 0x49,
        0x16, 0x73, 0xEA, 0xB9, 0xE3, 0x7D, 0x81, 0x94,
        0x16, 0xA1, 0x38, 0x5A, 0x5D, 0x92, 0xBC, 0x70,
        0x16, 0xA5, 0x86, 0x1F, 0x30, 0xD9, 0xFB, 0xE2,
        0x16, 0xD2, 0x79, 0x5C, 0x61, 0x05, 0x3A, 0xB3,
        0x16, 0x97, 0x49, 0x03, 0x0E, 0x16, 0x6D, 0xE6,
        0x16, 0x04, 0x12, 0x42, 0x34, 0x22, 0xFF, 0xD6,
        0x16, 0x9F, 0x44, 0x0B, 0xFE, 0xC9, 0xB9, 0xAE,
        0x16, 0x43, 0x60, 0x74, 0xE2, 0xBE, 0xB2, 0xBD,
        0x16, 0xE2, 0x26, 0x54, 0xB2, 0xB5, 0xD0, 0xBD,
        0x16, 0x50, 0x91, 0xE5, 0x9C, 0x06, 0xE2, 0x83,
        0x16, 0x63, 0x71, 0x1E, 0xEC, 0x2D, 0xE9, 0x55,
        0x16, 0x5B, 0xC6, 0xFC, 0x73, 0xD1, 0xC0, 0xF6,
        0x16, 0x7B, 0x85, 0x65, 0x8C, 0x2C, 0xE6, 0x4E,
        0x16, 0xF3, 0x04, 0xFA, 0x69, 0xE7, 0x1F, 0x40,
        0x16, 0xFE, 0x9B, 0x6E, 0xD3, 0x52, 0x78, 0xCA,
        0x16, 0x00, 0x8D, 0xF1, 0x5D, 0x6F, 0x2E, 0xF5,
        0x16, 0x5E, 0x6C, 0x2A, 0x7A, 0x4B, 0xCF, 0xF9,
        0x16, 0x0E, 0xF6, 0x9A, 0x35, 0xF6, 0x6C, 0xE9,
        0x16, 0x7A, 0x33, 0x6B, 0xC6, 0x6E, 0xC0, 0xAE,
        0x16, 0x32, 0xF4, 0x2C, 0x37, 0x68, 0xF8, 0xF9,
        0x16, 0x0C, 0x00, 0x78, 0xB5, 0xC0, 0x53, 0x2A,
        0x16, 0xAF, 0x4B, 0x45, 0x45, 0x6C, 0xA6, 0x72,
        0x16, 0xE0, 0xAB, 0x93, 0x38, 0x10, 0x8B, 0x17,
        0x16, 0xA7, 0x6F, 0x8A, 0x3D, 0xC6, 0xA4, 0x62,
        0x16, 0xBF, 0x92, 0x12, 0x80, 0x16, 0x3E, 0xD1,
        0x16, 0xEA, 0x56, 0x7C, 0xBA, 0xA1, 0xE5, 0x9D,
        0x16, 0x0F, 0x1A, 0x8D, 0x89, 0xBF, 0xC2, 0x0E,
        0x16, 0x23, 0x4B, 0xEA, 0xA1, 0xA3, 0x52, 0x9C,
        0x16, 0x50, 0xE1, 0xB1, 0x90, 0x28, 0xE5, 0x66,
        0x16, 0x58, 0x70, 0xF6, 0x04, 0x0C, 0x65, 0x62,
        0x16, 0xE6, 0x9E, 0xA0, 0x3C, 0x64, 0x96, 0x69,
        0x16, 0x97, 0x28, 0xF6, 0x36, 0x7C, 0xA8, 0xE8,
        0x16, 0x45, 0xCA, 0xA2, 0xE0, 0xDA, 0x64, 0x83,
        0x16, 0xEB, 0xB8, 0x4F, 0x75, 0x1C, 0x1D, 0x62,
        0x16, 0xDF, 0xCB, 0x99, 0x52, 0xEC, 0xDF, 0x53,
        0x16, 0x39, 0xE2, 0xB0, 0x73, 0x2E, 0x61, 0x3F,
        0x16, 0xD5, 0x6E, 0x5C, 0x6A, 0x72, 0x41, 0x46,
        0x16, 0x15, 0xF2, 0xC2, 0xF3, 0xD0, 0xFF, 0xC5,
        0x16, 0x9C, 0x87, 0xE1, 0x1B, 0x22, 0xCA, 0x3D,
        0x16, 0x2F, 0xD0, 0x77, 0x43, 0x03, 0xFB, 0xF0,
        0x16, 0x57, 0x22, 0xAF, 0xF9, 0xE8, 0x64, 0x1F,
        0x16, 0xC0, 0x37, 0xB4, 0xE2, 0x06, 0x03, 0x80,
        0x16, 0x6C, 0x53, 0xDD, 0x80, 0x6A, 0x86, 0xC4,
        0x16, 0xC5, 0x23, 0xD0, 0x9D, 0x46, 0xD2, 0xB4,
        0x16, 0x9C, 0xE8, 0x6C, 0xFB, 0x65, 0x92, 0xF0,
        0x16, 0x9A, 0x76, 0x45, 0x44, 0x4A, 0xF3, 0xEC,
        0x16, 0x61, 0x8C, 0x58, 0x10, 0xAF, 0x2A, 0x18,
        0x16, 0xF8, 0x26, 0x42, 0xB4, 0xA2, 0xBB, 0xCE,
        0x16, 0x48, 0x99, 0x6E, 0xF9, 0xA8, 0x5F, 0x38,
        0x16, 0x11, 0xFB, 0x00, 0x8B, 0xDE, 0x00, 0x04,
        0x16, 0xCB, 0xEE, 0x4E, 0x9B, 0x9B, 0x2C, 0x79,
        0x16, 0x2C, 0xC8, 0x69, 0x0D, 0xAD, 0xC8, 0x17,
        0x16, 0x5B, 0xE1, 0x07, 0x51, 0x5B, 0xD0, 0xD2,
        0x16, 0xEB, 0x01, 0x30, 0xBB, 0xE1, 0x9F, 0xC4,
        0x16, 0xAF, 0x39, 0x7B, 0xEC, 0x9B, 0x4C, 0x7E,
        0x16, 0x21, 0x6E, 0x78, 0x46, 0x56, 0x3A, 0xBB,
        0x16, 0x3F, 0xA3, 0x27, 0x6A, 0x8F, 0x79, 0x7F,
        0x16, 0x6A, 0x9D, 0x3D, 0x67, 0x47, 0xEE, 0x3D,
        0x16, 0xAE, 0xB7, 0xD4, 0x0C, 0xCA, 0xF8, 0x59,
        0x16, 0xC4, 0x17, 0x96, 0x41, 0x97, 0x84, 0xDC,
        0x16, 0x62, 0x2D, 0x49, 0x56, 0x61, 0x05, 0xB3,
        0x16, 0xE5, 0x9D, 0xCD, 0x7F, 0x8B, 0xF9, 0x03,
        0x16, 0x02, 0x86, 0x07, 0xEB, 0x41, 0x3B, 0xFE,
        0x16, 0x67, 0x9C, 0x88, 0x84, 0xA2, 0x33, 0x04,
        0x16, 0x44, 0x13, 0x25, 0xD9, 0xA6, 0x43, 0x6F,
        0x16, 0xAC, 0x6B, 0xDC, 0x7E, 0xC2, 0x4B, 0x8D,
        0x16, 0x70, 0x13, 0xEB, 0x3F, 0xA9, 0x3B, 0xB6,
        0x16, 0xB1, 0x13, 0x21, 0x3E, 0x9C, 0xC9, 0x7F,
        0x16, 0x01, 0xCD, 0xE1, 0xDE, 0x6E, 0x42, 0x79,
        0x16, 0x62, 0x37, 0x4C, 0x18, 0x6E, 0x41, 0xFB,
        0x16, 0x38, 0x9D, 0x87, 0x18, 0xF2, 0xD9, 0xF3,
        0x16, 0x35, 0xD6, 0xE5, 0x40, 0xDC, 0xA3, 0xFF,
        0x16, 0xA8, 0x99, 0xD0, 0xD8, 0x32, 0xB4, 0x74,
        0x16, 0x06, 0x16, 0x27, 0x4C, 0x81, 0xDB, 0x86,
        0x16, 0xF4, 0x37, 0xE0, 0x4F, 0xD8, 0xDB, 0xB7,
        0x16, 0x0A, 0x9C, 0xEE, 0x9E, 0x1F, 0x8F, 0x46,
        0x16, 0xEB, 0x13, 0xEC, 0x9A, 0x3D, 0xE3, 0x3F,
        0x16, 0xCB, 0x59, 0x6A, 0x17, 0xA3, 0x96, 0xC7,
        0x16, 0x05, 0xBE, 0xD2, 0x27, 0x6F, 0x3F, 0xD4,
        0x16, 0x2E, 0xFB, 0xAC, 0x98, 0xC3, 0x13, 0x1A,
        0x16, 0xB6, 0xAC, 0x9B, 0xF2, 0xF4, 0xD8, 0xCF,
        0x16, 0x6A, 0xB9, 0x30, 0x19, 0xE6, 0xD2, 0x41,
        0x16, 0x80, 0xA8, 0x05, 0x26, 0x5F, 0x3A, 0x5C,
        0x16, 0xF1, 0x34, 0x75, 0x1E, 0xCF, 0x64, 0x67,
        0x16, 0x87, 0x58, 0xE9, 0x48, 0x37, 0xB8, 0xD0,
        0x16, 0x42, 0x1B, 0x1D, 0xB0, 0x06, 0x79, 0xF0,
        0x16, 0x8A, 0x8B, 0x52, 0xA9, 0xE6, 0x1B, 0xF9,
        0x16, 0x5D, 0xBC, 0xBD, 0x3B, 0xA9, 0xAB, 0xCD,
        0x16, 0xB9, 0x03, 0x4C, 0xF6, 0xB5, 0xBA, 0xA8,
        0x16, 0x19, 0xEE, 0x5E, 0x56, 0x5A, 0x72, 0x1B,
        0x16, 0x9A, 0xD4, 0x47, 0x08, 0x9D, 0xAC, 0x0F,
        0x16, 0x3F, 0xC1, 0xF3, 0x0F, 0x36, 0x2E, 0x32,
        0x16, 0xDB, 0x5C, 0x29, 0x89, 0xC0, 0x10, 0x45,
        0x16, 0xE8, 0x14, 0x4B, 0x84, 0x66, 0xDB, 0xAD,
        0x16, 0x81, 0xE4, 0x81, 0x15, 0xF1, 0xB6, 0x47,
        0x16, 0x71, 0x97, 0x1D, 0xE2, 0xFD, 0xD4, 0x61,
        0x16, 0xCF, 0x24, 0x79, 0xEE, 0x85, 0xEB, 0x7F,
        0x16, 0xBF, 0xCD, 0x0D, 0x3D, 0x66, 0x4B, 0x28,
        0x16, 0x28, 0xF6, 0xA7, 0x1A, 0x0A, 0x47, 0x69,
        0x16, 0x30, 0x92, 0x24, 0x12, 0x39, 0xB7, 0xA2,
        0x16, 0x88, 0xDA, 0x0E, 0x4D, 0xE8, 0xAE, 0x26,
        0x16, 0x28, 0xBD, 0x20, 0x90, 0xA1, 0x30, 0x14,
        0x16, 0xEA, 0xF2, 0x75, 0x0C, 0xC0, 0xC1, 0x2A,
        0x16, 0x25, 0xB5, 0x62, 0xF7, 0xF2, 0x01, 0xD2,
        0x16, 0xB0, 0x43, 0x4D, 0x16, 0x38, 0x4B, 0x83,
        0x16, 0xCA, 0x65, 0x81, 0x79, 0x8E, 0x98, 0xA4,
        0x16, 0xF0, 0xB8, 0xF3, 0x1F, 0x95, 0x3E, 0x26,
        0x16, 0xDA, 0xEF, 0x4D, 0xC3, 0x11, 0x1E, 0x7D,
        0x16, 0xD6, 0xC4, 0x5A, 0x33, 0x20, 0xD2, 0xC9,
        0x16, 0x3E, 0x5E, 0x23, 0x8B, 0xB7, 0xC0, 0x45,
        0x16, 0x44, 0x5C, 0xA3, 0x48, 0x66, 0xCE, 0xA8,
        0x16, 0x0F, 0xDB, 0xDD, 0x34, 0x13, 0xE7, 0xAD,
        0x16, 0x24, 0x42, 0x29, 0x88, 0xA0, 0x08, 0x0A,
        0x16, 0xD2, 0x97, 0x36, 0xBB, 0x4D, 0x26, 0xFF,
        0x16, 0xF3, 0x7B, 0xC4, 0x88, 0xEC, 0x89, 0xC6,
        0x16, 0x5F, 0x72, 0x2B, 0xC0, 0xA1, 0xE0, 0xD5,
        0x16, 0x8A, 0x94, 0x39, 0x52, 0xAA, 0x7E, 0xE6,
        0x16, 0xAA, 0x86, 0x21, 0xE9, 0xB9, 0x62, 0xCC,
        0x16, 0x36, 0xFA, 0x54, 0x42, 0x06, 0xEB, 0xBE,
        0x16, 0x71, 0x11, 0x69, 0x63, 0x14, 0xB2, 0x5E,
        0x16, 0x33, 0x21, 0x54, 0x47, 0x5E, 0x8A, 0xDC,
        0x16, 0x7C, 0x4B, 0xAC, 0xA0, 0x22, 0x98, 0x85,
        0x16, 0x8D, 0x53, 0x76, 0x81, 0xBC, 0x3C, 0xC7,
        0x16, 0x72, 0x47, 0x83, 0xAF, 0x18, 0x5E, 0x24,
        0x16, 0x79, 0x05, 0x9C, 0x67, 0x5F, 0x4F, 0x53,
        0x16, 0xCC, 0x97, 0xF1, 0x2B, 0xAD, 0x0A, 0xFA,
        0x16, 0x3F, 0x79, 0x8B, 0x44, 0x7E, 0x57, 0xF2,
        0x16, 0x9A, 0x6A, 0xE9, 0x83, 0x20, 0xE7, 0x7C,
        0x16, 0x7D, 0x37, 0x96, 0x93, 0xDE, 0x66, 0xBD,
        0x16, 0x2E, 0x71, 0x64, 0xE1, 0x4C, 0x01, 0x6A,
        0x16, 0xD0, 0x0F, 0xD9, 0xE1, 0x7F, 0x3C, 0x7D,
        0x16, 0x2D, 0x6A, 0xC9, 0x4C, 0x7E, 0xF3, 0x10,
        0x16, 0xDB, 0x80, 0xDD, 0xFE, 0xE0, 0x0C, 0x2B,
        0x16, 0x9A, 0x07, 0x45, 0x77, 0x05, 0xF9, 0x79,
        0x16, 0x3C, 0x62, 0x4E, 0x27, 0xDB, 0x94, 0xBB,
        0x16, 0x66, 0x4F, 0xEB, 0x43, 0x1F, 0xF2, 0xF5,
        0x16, 0x20, 0x88, 0x97, 0x5F, 0x63, 0xFB, 0xC8,
        0x16, 0x74, 0x77, 0xA3, 0x44, 0x83, 0x1B, 0x99,
        0x16, 0xE0, 0x9C, 0xB4, 0x9E, 0x0A, 0xFE, 0x50,
        0x16, 0xE1, 0x6B, 0x98, 0x34, 0x54, 0x2F, 0x14,
        0x16, 0x4E, 0xAB, 0xF4, 0x11, 0x9D, 0xE9, 0xDD,
        0x16, 0xFD, 0x78, 0x98, 0xE8, 0x3F, 0xE7, 0xD7,
        0x16, 0x91, 0x46, 0x31, 0xDC, 0x2B, 0x4E, 0x6B,
        0x16, 0xF1, 0x67, 0xAE, 0xE2, 0x2D, 0x62, 0xF6,
        0x16, 0x3F, 0xA8, 0xDF, 0xFF, 0xF7, 0x4F, 0x36,
        0x16, 0x0D, 0x94, 0x92, 0x84, 0xA4, 0x5F, 0x41,
        0x16, 0x0C, 0xEE, 0xD8, 0x15, 0x95, 0xB2, 0xD1,
        0x16, 0x8D, 0x28, 0x11, 0xEA, 0x12, 0x4E, 0xEC,
        0x16, 0xFA, 0x6E, 0x9C, 0x52, 0xC3, 0xF1, 0x37,
        0x16, 0x86, 0x4F, 0xCC, 0xA9, 0x1F, 0x87, 0x27,
        0x16, 0x4C, 0x8F, 0xA0, 0xFA, 0xA3, 0x62, 0x30,
        0x16, 0x89, 0xA8, 0xD6, 0x4E, 0x1C, 0x5C, 0xEF,
        0x16, 0x52, 0x27, 0x5F, 0xA5, 0xD3, 0x1E, 0x64,
        0x16, 0xB9, 0x75, 0x9B, 0x24, 0xFD, 0xC2, 0x18,
        0x16, 0x01, 0xBB, 0xBC, 0x04, 0xA3, 0xE6, 0x18,
        0x16, 0x6D, 0x14, 0xA5, 0x91, 0x73, 0x3B, 0xC6,
        0x16, 0x4F, 0x65, 0x94, 0x48, 0x2B, 0xCF, 0xE0,
        0x16, 0x6C, 0x36, 0xBD, 0x03, 0xE6, 0x1F, 0xEA,
        0x16, 0x99, 0xDB, 0x2E, 0xBD, 0x50, 0xF6, 0xDC,
        0x16, 0x22, 0x29, 0x89, 0x14, 0xE1, 0x6B, 0x7B,
        0x16, 0xE1, 0x45, 0xBD, 0xBE, 0xAD, 0x75, 0x4E,
        0x16, 0xB5, 0x98, 0x6C, 0x08, 0xD1, 0xC5, 0x5A,
        0x16, 0x9F, 0xA4, 0x4D, 0x30, 0x36, 0x10, 0x2C,
        0x16, 0xC6, 0x95, 0x0C, 0xA9, 0x23, 0xFA, 0x6C,
        0x16, 0x27, 0xA1, 0x62, 0xD6, 0xAA, 0xEC, 0xEC,
        0x16, 0xF9, 0xFB, 0x8B, 0xC2, 0xDC, 0x89, 0x43,
        0x16, 0xF2, 0xD3, 0x25, 0xCC, 0xDD, 0x96, 0x73,
        0x16, 0x65, 0x8D, 0xC8, 0x85, 0x7A, 0x85, 0x43,
        0x16, 0x4F, 0x2F, 0x82, 0xD7, 0xD1, 0x15, 0xC4,
        0x16, 0xF6, 0x26, 0xC3, 0x3A, 0x9E, 0x23, 0xF2,
        0x16, 0x36, 0x6F, 0x86, 0x52, 0x8A, 0x19, 0xD9,
        0x16, 0x21, 0xBD, 0x74, 0x84, 0xA3, 0x2E, 0xA5,
        0x16, 0x5C, 0x64, 0x5A, 0x7C, 0x20, 0x24, 0x3C,
        0x16, 0x46, 0x6E, 0x3C, 0xDF, 0x97, 0x86, 0xE3,
        0x16, 0x12, 0xEE, 0x1F, 0xA6, 0x4A, 0x86, 0x39,
        0x16, 0xF1, 0xF2, 0x3F, 0xE7, 0xCE, 0x64, 0xE5,
        0x16, 0xF3, 0x5A, 0x2B, 0x87, 0x38, 0x21, 0x13,
        0x16, 0x59, 0xBB, 0x33, 0x3F, 0x68, 0xD7, 0x3F,
        0x16, 0xFB, 0x85, 0x88, 0x4F, 0xC1, 0x64, 0xC1,
        0x16, 0x45, 0x3B, 0xB3, 0xCB, 0x87, 0xAF, 0xC0,
        0x16, 0x58, 0xA0, 0x91, 0xC9, 0x97, 0x91, 0x51,
        0x16, 0x55, 0x69, 0x59, 0xE8, 0xD6, 0xFD, 0xB4,
        0x16, 0x2D, 0x7E, 0x8C, 0x6C, 0x0B, 0x03, 0x38,
        0x16, 0xCD, 0xD7, 0x8C, 0xD6, 0xD7, 0xF8, 0xA9,
        0x16, 0x32, 0x81, 0x4C, 0xC3, 0xEA, 0xA0, 0x90,
        0x16, 0xA4, 0xC9, 0xBB, 0x5F, 0x18, 0xF2, 0x84,
        0x16, 0xB0, 0x13, 0x1B, 0x99, 0x85, 0x05, 0xDE,
        0x16, 0xCD, 0x4D, 0xE7, 0x38, 0x04, 0x43, 0x74,
        0x16, 0x4F, 0x76, 0x26, 0xE4, 0x35, 0xE6, 0x0C,
        0x16, 0x71, 0x7B, 0xCD, 0x3D, 0x4D, 0xC3, 0x47,
        0x16, 0x45, 0x9C, 0x00, 0x9C, 0xE4, 0x82, 0x65,
        0x16, 0xA0, 0x35, 0x9C, 0xB6, 0x33, 0xBF, 0xB9,
        0x16, 0xB4, 0x7B, 0xDA, 0x33, 0xE8, 0x08, 0x5A,
        0x16, 0x53, 0x54, 0x42, 0x98, 0xB3, 0x6F, 0x4E,
        0x16, 0xFD, 0x02, 0xAD, 0x8B, 0xBB, 0x7F, 0x57,
        0x16, 0xAF, 0xB7, 0x3F, 0x52, 0x15, 0x68, 0x46,
        0x16, 0x31, 0x18, 0x55, 0xA4, 0x17, 0xF4, 0xB9,
        0x16, 0xD4, 0xF2, 0xCD, 0xDE, 0xBA, 0x8F, 0x10,
        0x16, 0x94, 0x80, 0x52, 0x6A, 0xA7, 0x65, 0x32,
        0x16, 0x98, 0xA2, 0x48, 0xA3, 0x21, 0x4F, 0x33,
        0x16, 0x03, 0x87, 0x86, 0xC1, 0x89, 0x6D, 0xCE,
        0x16, 0x41, 0xBE, 0x24, 0xCE, 0xAD, 0x68, 0x60,
        0x16, 0x41, 0xB4, 0xCF, 0x8D, 0xCE, 0x25, 0x21,
        0x16, 0xDD, 0x8B, 0xD6, 0xB7, 0x62, 0x33, 0xCB,
        0x16, 0xDD, 0x07, 0x99, 0xAE, 0xD8, 0xF2, 0x11,
        0x16, 0xCB, 0xA7, 0x73, 0x66, 0x93, 0x41, 0x05,
        0x16, 0x8E, 0x0C, 0x3A, 0xCE, 0xDA, 0xD4, 0x36,
        0x16, 0xEC, 0x68, 0xD0, 0x88, 0x6C, 0xFD, 0xB1,
        0x16, 0x55, 0xC1, 0x19, 0x77, 0x9C, 0xC2, 0xBF,
        0x16, 0x13, 0x58, 0x0E, 0x91, 0x31, 0x63, 0xB1,
        0x16, 0x8F, 0x7D, 0x7D, 0xC3, 0x15, 0xF8, 0x28,
        0x16, 0x76, 0xE9, 0xE0, 0xC2, 0x40, 0x2C, 0x4C,
        0x16, 0x11, 0xFD, 0x94, 0xCB, 0x85, 0x68, 0xBC,
        0x16, 0xCB, 0x9E, 0x73, 0x16, 0xB2, 0x2D, 0xE4,
        0x16, 0x31, 0x5C, 0xF4, 0x0B, 0x9A, 0x53, 0x8F,
        0x16, 0x04, 0x5D, 0x9F, 0xBD, 0x97, 0x15, 0xA2,
        0x16, 0xF5, 0xA2, 0xBB, 0xF1, 0x79, 0x8C, 0xF8,
        0x16, 0x86, 0x97, 0x21, 0xA1, 0x3D, 0xB7, 0xB8,
        0x16, 0xF8, 0x88, 0xB9, 0xAB, 0x69, 0xF2, 0x7D,
        0x16, 0x6D, 0x0A, 0xD3, 0x55, 0x1C, 0x20, 0xD4,
        0x16, 0xEC, 0x8C, 0x54, 0x67, 0xB3, 0xA9, 0xE1,
        0x16, 0x8E, 0x70, 0xE4, 0x5E, 0x6E, 0xFE, 0x68,
        0x16, 0x21, 0x80, 0x74, 0xD4, 0x61, 0xB0, 0x26,
        0x16, 0x94, 0xFC, 0x49, 0x9B, 0x2F, 0xD7, 0x57,
        0x16, 0xEE, 0x99, 0x86, 0x4E, 0x97, 0xDB, 0x85,
        0x16, 0x1A, 0x47, 0x6D, 0xB0, 0x0F, 0xF4, 0x2C,
        0x16, 0xA1, 0xAC, 0xC8, 0x86, 0xB2, 0xC5, 0x13,
        0x16, 0x21, 0x6F, 0xA6, 0x4A, 0xDB, 0xFD, 0x58,
        0x16, 0xB1, 0x8A, 0xE4, 0xFB, 0x10, 0x06, 0x18,
        0x16, 0x70, 0x1A, 0xE2, 0x1F, 0x07, 0xDF, 0x56,
        0x16, 0xAE, 0x36, 0x6E, 0x10, 0xAB, 0x14, 0x2E,
        0x16, 0x3D, 0xFB, 0xCA, 0x71, 0x01, 0x62, 0xE9,
        0x16, 0xA5, 0xB3, 0x69, 0xAA, 0x06, 0x3C, 0x36,
        0x16, 0xDE, 0x7B, 0xFD, 0xCD, 0xD0, 0x71, 0x2F,
        0x16, 0xEC, 0x7E, 0x3C, 0x3D, 0x4F, 0xA9, 0xD6,
        0x16, 0xCA, 0xA4, 0x89, 0xFA, 0xED, 0x8B, 0xA1,
        0x16, 0x46, 0x65, 0x26, 0x8B, 0x00, 0x9D, 0x37,
        0x16, 0xAE, 0xDD, 0xC3, 0xB9, 0x29, 0x6D, 0xD4,
        0x16, 0x30, 0x75, 0x5F, 0x9A, 0x76, 0xCE, 0x46,
        0x16, 0x09, 0xA9, 0x34, 0xE4, 0x50, 0x6D, 0xCA,
        0x16, 0xF6, 0x4A, 0x47, 0x40, 0x45, 0x29, 0xB8,
        0x16, 0x77, 0x73, 0x21, 0x22, 0x17, 0x5B, 0x04,
        0x16, 0x70, 0x1D, 0x49, 0xD9, 0xE9, 0xF2, 0x34,
        0x16, 0xFE, 0x95, 0x49, 0xBA, 0xB7, 0xB5, 0x3C,
        0x16, 0xC0, 0x66, 0xCA, 0x15, 0x59, 0x5E, 0xAF,
        0x16, 0x51, 0x93, 0x00, 0xA6, 0x15, 0xAA, 0x6C,
        0x16, 0x11, 0x4C, 0xF2, 0x59, 0x31, 0xC1, 0x6E,
        0x16, 0x32, 0x07, 0xBB, 0x92, 0x0A, 0x1B, 0xC2,
        0x16, 0xBD, 0x80, 0xAB, 0x84, 0xF2, 0x8B, 0x2D,
        0x16, 0x48, 0x6A, 0x81, 0xB9, 0xB2, 0x65, 0x2E,
        0x16, 0x49, 0xD4, 0x06, 0x74, 0x3C, 0x19, 0x4B,
        0x16, 0xB4, 0x11, 0xB1, 0x83, 0x26, 0xF5, 0x70,
        0x16, 0x2E, 0x0E, 0x3C, 0x22, 0x04, 0x62, 0xB5,
        0x16, 0xB6, 0xCD, 0x83, 0xB7, 0x72, 0x1E, 0x46,
        0x16, 0x8F, 0xDF, 0x8F, 0x4E, 0x8E, 0x96, 0xDF,
        0x16, 0xDA, 0x2E, 0x8C, 0xB2, 0xD6, 0x5E, 0x89,
        0x16, 0x51, 0x2B, 0x7A, 0xAC, 0x35, 0x01, 0xA6,
        0x16, 0xA1, 0x54, 0xA5, 0x89, 0xE7, 0x64, 0xE3,
        0x16, 0xF2, 0x97, 0x05, 0x4D, 0x68, 0xD3, 0xB8,
        0x16, 0x4D, 0x62, 0x34, 0x71, 0xCB, 0x29, 0x2A,
        0x16, 0xD1, 0xAC, 0xA1, 0x7B, 0x5B, 0x16, 0xBC,
        0x16, 0x59, 0xCD, 0xF8, 0x8A, 0xB7, 0xAE, 0x7F,
        0x16, 0x38, 0x07, 0x50, 0x96, 0xF9, 0x9F, 0x47,
        0x16, 0x9A, 0xFD, 0x09, 0x88, 0x9A, 0x0E, 0x50,
        0x16, 0x6F, 0xD4, 0xED, 0xBF, 0xC2, 0x36, 0xED,
        0x16, 0x30, 0xB9, 0x08, 0x77, 0x6E, 0x9E, 0xAF,
        0x16, 0x96, 0xF6, 0x48, 0x81, 0xCE, 0xA2, 0xF3,
        0x16, 0x1C, 0x4E, 0xAE, 0x69, 0xE6, 0xF1, 0x7C,
        0x16, 0x8E, 0x6F, 0x50, 0xCE, 0x82, 0xEB, 0xAC,
        0x16, 0x49, 0x96, 0xE4, 0xC2, 0xF2, 0x55, 0x87,
        0x16, 0x58, 0x17, 0xE9, 0xB9, 0x23, 0x2B, 0x92,
        0x16, 0x87, 0xA6, 0xAA, 0x9B, 0x90, 0x0E, 0xB0,
        0x16, 0xA4, 0xDF, 0x30, 0x7E, 0x35, 0xE6, 0x30,
        0x16, 0xDF, 0x15, 0xEE, 0xC1, 0x3A, 0x8C, 0xBE,
        0x16, 0x39, 0x9C, 0x0E, 0xE7, 0x04, 0x12, 0x22,
        0x16, 0xE0, 0x9B, 0x3A, 0xE7, 0xC9, 0x41, 0x15,
        0x16, 0x9C, 0x53, 0x25, 0x17, 0x0D, 0xE5, 0xF2,
        0x16, 0xCA, 0xFB, 0x43, 0xED, 0xF3, 0x81, 0x91,
        0x16, 0x97, 0xDB, 0xD3, 0x90, 0xCA, 0xA2, 0xEB,
        0x16, 0x0B, 0x7B, 0x9E, 0x15, 0x62, 0x7C, 0xC3,
        0x16, 0x26, 0x4A, 0x68, 0x8D, 0x83, 0xDC, 0x28,
        0x16, 0x05, 0x5B, 0xCE, 0xBF, 0x43, 0x40, 0xF8,
        0x16, 0x9A, 0x57, 0x34, 0xC3, 0xB2, 0xE5, 0x4F,
        0x16, 0xE6, 0x1D, 0x86, 0x6F, 0xF6, 0xD8, 0x20,
        0x16, 0x68, 0xEF, 0xC4, 0x17, 0xE2, 0x1C, 0x83,
        0x16, 0xE7, 0x24, 0x03, 0xB3, 0xD9, 0xD4, 0x43,
        0x16, 0x42, 0x08, 0x6A, 0x4D, 0xDB, 0x4B, 0x40,
        0x16, 0xF0, 0xBC, 0x70, 0x66, 0xD1, 0x64, 0xE4,
        0x16, 0xFD, 0xA9, 0xB8, 0xD4, 0x3E, 0xB2, 0xC5,
        0x16, 0x0F, 0x63, 0x47, 0x90, 0xE4, 0x76, 0x72,
        0x16, 0x87, 0xC3, 0xA1, 0x90, 0x51, 0x3D, 0x39,
        0x16, 0x78, 0x89, 0x42, 0x64, 0xBC, 0x7C, 0xF2,
        0x16, 0xB1, 0x38, 0x1D, 0xB9, 0x9A, 0x34, 0xE2,
        0x16, 0x92, 0x6A, 0x26, 0xA5, 0x1A, 0xDA, 0xD4,
        0x16, 0xD1, 0x41, 0x45, 0xF7, 0xFD, 0x5A, 0xA9,
        0x16, 0x9D, 0xBD, 0x28, 0x94, 0xFD, 0x86, 0xD7,
        0x16, 0x69, 0x15, 0xB7, 0xAA, 0x40, 0x21, 0xD9,
        0x16, 0xC9, 0xEC, 0xA4, 0x2A, 0x3E, 0xEA, 0x93,
        0x16, 0x57, 0x3F, 0x12, 0x08, 0x79, 0xE7, 0x92,
        0x16, 0x79, 0x96, 0xD1, 0x98, 0x16, 0xFA, 0xEA,
        0x16, 0xCB, 0x93, 0x9B, 0xA8, 0x14, 0xFC, 0x6B,
        0x16, 0x28, 0x30, 0x8E, 0x89, 0x73, 0xD4, 0x57,
        0x16, 0xCB, 0xED, 0x2A, 0xEE, 0x52, 0x32, 0x22,
        0x16, 0x02, 0x6B, 0xD8, 0x64, 0xDE, 0x11, 0xFF,
        0x16, 0x3D, 0xDA, 0xAC, 0xD0, 0x47, 0x1E, 0x89,
        0x16, 0x91, 0x5C, 0xB4, 0xE1, 0x50, 0x59, 0x6E,
        0x16, 0x01, 0xA6, 0x6C, 0xD3, 0xB5, 0x2F, 0x76,
        0x16, 0xEF, 0xB0, 0xD4, 0x1E, 0xB1, 0xB4, 0xFE,
        0x16, 0x5F, 0xAF, 0x94, 0x1F, 0x49, 0x61, 0x89,
        0x16, 0x3C, 0x2D, 0x98, 0x87, 0x3D, 0xA0, 0x46,
        0x16, 0x16, 0xBB, 0x74, 0x17, 0xC0, 0xB2, 0x58,
        0x16, 0xAF, 0xD5, 0xD1, 0x3A, 0xB5, 0x0D, 0x01,
        0x16, 0x34, 0x09, 0xA5, 0x67, 0xC1, 0xB4, 0x71,
        0x16, 0xB0, 0x62, 0xD9, 0x6D, 0xD0, 0x50, 0xDB,
        0x16, 0xC9, 0x3F, 0x2C, 0xB7, 0x38, 0x28, 0x47,
        0x16, 0x04, 0xBF, 0x5B, 0x46, 0xA0, 0x55, 0xF0,
        0x16, 0x94, 0x2B, 0x7F, 0xF7, 0xA6, 0xF1, 0x97,
        0x16, 0x06, 0x35, 0xCE, 0x7A, 0xC2, 0x4D, 0xB4,
        0x16, 0x57, 0x4B, 0x02, 0x76, 0x72, 0xF1, 0xC8,
        0x16, 0x7A, 0x1D, 0x8E, 0x52, 0xEE, 0xA3, 0xCD,
        0x16, 0x05, 0xD1, 0xA6, 0x54, 0x0C, 0x81, 0xE4,
        0x16, 0xBC, 0xAA, 0xA7, 0x31, 0x6C, 0x93, 0x37,
        0x16, 0x3A, 0xB3, 0x3A, 0x65, 0x7E, 0x01, 0xE7,
        0x16, 0xAA, 0xAC, 0x2C, 0xA0, 0xC0, 0xAA, 0x1A,
        0x16, 0x3C, 0xFC, 0xC9, 0x1C, 0xDD, 0x27, 0xD8,
        0x16, 0x31, 0xAB, 0xC8, 0xA5, 0xBE, 0xD9, 0xAA,
        0x16, 0xA4, 0xDB, 0x23, 0xC1, 0x0D, 0x7C, 0x6A,
        0x16, 0xCA, 0x43, 0x39, 0x37, 0x3A, 0xE0, 0xA9,
        0x16, 0xB9, 0x32, 0x46, 0xB9, 0x05, 0x5F, 0x52,
        0x16, 0xFC, 0xD4, 0x39, 0xE8, 0x2C, 0x01, 0x80,
        0x16, 0xCC, 0x8C, 0x19, 0x66, 0x3D, 0x97, 0x68,
        0x16, 0x3C, 0x9B, 0x0C, 0x21, 0xF6, 0xAC, 0xA0,
        0x16, 0x02, 0xCD, 0x20, 0x65, 0xF8, 0xB6, 0x2A,
        0x16, 0x0E, 0xF2, 0x88, 0x1E, 0x38, 0x63, 0x66,
        0x16, 0x0E, 0xC3, 0xD7, 0x6D, 0x0F, 0xE4, 0xEF,
        0x16, 0x25, 0xF1, 0xD7, 0x98, 0x05, 0x94, 0x5E,
        0x16, 0x0A, 0x61, 0x6E, 0x8F, 0xD0, 0x73, 0xED,
        0x16, 0xD3, 0x20, 0x73, 0x5D, 0x72, 0xFF, 0x76,
        0x16, 0xCE, 0x5E, 0x1C, 0x69, 0x4D, 0x5E, 0xFD,
        0x16, 0x14, 0xAE, 0xC5, 0x2A, 0xDB, 0xF7, 0x29,
        0x16, 0xFD, 0x6F, 0x05, 0xB5, 0x7A, 0xE6, 0x09,
        0x16, 0x07, 0xAF, 0xBA, 0x38, 0x51, 0x4B, 0x81,
        0x16, 0x5C, 0xFF, 0xB3, 0x7D, 0xF5, 0xC6, 0x69,
        0x16, 0x84, 0x4E, 0x31, 0xE9, 0xE3, 0x83, 0x9F,
        0x16, 0xAB, 0x78, 0x4C, 0xEF, 0xB0, 0x83, 0x3D,
        0x16, 0x4D, 0x0C, 0x68, 0xC2, 0x0F, 0xF6, 0x1A,
        0x16, 0x05, 0x7C, 0x40, 0x3D, 0x13, 0x0B, 0x71,
        0x16, 0x5D, 0x8E, 0x91, 0x12, 0x71, 0x6A, 0xAC,
        0x16, 0x16, 0x3C, 0x41, 0x32, 0x09, 0x3F, 0x4C,
        0x16, 0xEB, 0x71, 0x91, 0xE3, 0x46, 0xCE, 0x5B,
        0x16, 0x1B, 0x21, 0x6F, 0x4B, 0x11, 0xB5, 0x1D,
        0x16, 0x0C, 0xCD, 0x93, 0x23, 0x2D, 0xFF, 0x71,
        0x16, 0xF2, 0x18, 0xF7, 0x46, 0x74, 0xB3, 0x12,
        0x16, 0x3A, 0xCE, 0x0C, 0x32, 0x27, 0x64, 0x61,
        0x16, 0x4F, 0x78, 0xB6, 0xCE, 0xA5, 0x67, 0xE1,
        0x16, 0x20, 0x65, 0xA9, 0xBB, 0xEC, 0x0E, 0xDA,
        0x16, 0x8C, 0x95, 0x40, 0x1A, 0x06, 0x05, 0xB1,
        0x16, 0x9D, 0xCB, 0xEC, 0x64, 0x1D, 0x52, 0x86,
        0x16, 0x1B, 0xA6, 0xBE, 0xD8, 0x52, 0x15, 0x6E,
        0x16, 0xE7, 0x94, 0xA2, 0x6B, 0xCD, 0xD4, 0x21,
        0x16, 0xD9, 0xF3, 0xAB, 0xF7, 0x31, 0x95, 0x41,
        0x16, 0x76, 0x93, 0x6E, 0xBD, 0x38, 0x8C, 0xD3,
        0x16, 0x38, 0x7E, 0x28, 0x24, 0x3A, 0x4E, 0x55,
        0x16, 0x1C, 0xCF, 0x14, 0x46, 0x61, 0xBB, 0x63,
        0x16, 0x2D, 0x40, 0xC9, 0xC3, 0x1E, 0xF6, 0x54,
        0x16, 0xD5, 0x5B, 0x3C, 0x20, 0xF1, 0xC8, 0xB8,
        0x16, 0x60, 0x5F, 0x83, 0xEB, 0x0A, 0xA0, 0xCE,
        0x16, 0x54, 0x69, 0x13, 0xE2, 0x8F, 0x3A, 0x57,
        0x16, 0xB5, 0x01, 0x32, 0xD1, 0xFD, 0xCE, 0x47,
        0x16, 0xB6, 0xCA, 0x7D, 0xA8, 0x2D, 0x9E, 0xB4,
        0x16, 0xFD, 0x56, 0xC3, 0x30, 0xC4, 0x89, 0x58,
        0x16, 0xC6, 0x6D, 0xCE, 0xBF, 0x16, 0x2E, 0xC4,
        0x16, 0x5B, 0xBC, 0xED, 0x39, 0x94, 0xDE, 0x3B,
        0x16, 0xB6, 0x14, 0xBA, 0xE1, 0xE0, 0x44, 0x39,
        0x16, 0xE8, 0x1F, 0x2A, 0xE6, 0xF3, 0x22, 0x0B,
        0x16, 0xEB, 0x69, 0x23, 0x96, 0x9F, 0x31, 0xF5,
        0x16, 0xF6, 0x7A, 0x74, 0xDF, 0x8C, 0xA7, 0x7D,
        0x16, 0xE0, 0x53, 0xF1, 0x09, 0x40, 0xEE, 0xD1,
        0x16, 0xA0, 0x6E, 0x55, 0xBC, 0x74, 0xA0, 0x49,
        0x16, 0x0E, 0x06, 0x84, 0xAF, 0xC0, 0xCA, 0x36,
        0x16, 0x59, 0x37, 0x6D, 0x89, 0x93, 0x3C, 0x14,
        0x16, 0x93, 0x28, 0x91, 0x57, 0x5F, 0x09, 0x49,
        0x16, 0x79, 0x72, 0xDF, 0xA8, 0xA2, 0x67, 0xAF,
        0x16, 0xA8, 0x44, 0xBE, 0x21, 0x77, 0xDC, 0x2D,
        0x16, 0x2C, 0x46, 0x75, 0xEC, 0xF8, 0x95, 0x32,
        0x16, 0x45, 0xC7, 0x7B, 0xB2, 0xC9, 0xC5, 0xBB,
        0x16, 0x76, 0xFA, 0xAD, 0x2D, 0xBF, 0x99, 0x82,
        0x16, 0x0E, 0x09, 0x8A, 0x99, 0x65, 0xB3, 0xC8,
        0x16, 0x62, 0xF4, 0xE1, 0x43, 0xCD, 0x65, 0x32,
        0x16, 0x22, 0xA9, 0x94, 0x10, 0x83, 0xF1, 0x5B,
        0x16, 0xEC, 0x78, 0x60, 0xA3, 0x7F, 0x97, 0x91,
        0x16, 0xD4, 0x09, 0xAD, 0x0D, 0xFC, 0xD6, 0x08,
        0x16, 0xDE, 0xEC, 0xF8, 0xC9, 0xD9, 0x61, 0xA6,
        0x16, 0xC1, 0x6D, 0x2E, 0xCC, 0xB5, 0x94, 0x45,
        0x16, 0xA7, 0xCB, 0xA6, 0x9C, 0x9A, 0x68, 0xA3,
        0x16, 0x79, 0x3B, 0xC3, 0xAF, 0x1F, 0x81, 0x8C,
        0x16, 0x35, 0x30, 0x59, 0xA3, 0x72, 0xDD, 0x9C,
        0x16, 0x18, 0xAE, 0x88, 0x6F, 0x6A, 0x67, 0x06,
        0x16, 0x2B, 0x2A, 0x03, 0x4C, 0xF5, 0x11, 0xE7,
        0x16, 0x87, 0x55, 0x1B, 0x45, 0x67, 0xCB, 0x5F,
        0x16, 0x28, 0x1B, 0xBF, 0xA7, 0xBD, 0x15, 0xB7,
        0x16, 0x5E, 0x7C, 0x12, 0x13, 0xAC, 0x9D, 0xA2,
        0x16, 0xE7, 0x86, 0xD6, 0x36, 0x3E, 0x59, 0x6A,
        0x16, 0x66, 0xAE, 0x64, 0x34, 0x5B, 0x4C, 0xFE,
        0x16, 0x62, 0x51, 0xC7, 0x01, 0xCC, 0x72, 0xE3,
        0x16, 0x2B, 0x77, 0x87, 0x3C, 0x81, 0x96, 0xFC,
        0x16, 0xE5, 0xDB, 0xBD, 0x6A, 0xED, 0xBB, 0x51,
        0x16, 0x46, 0x88, 0x8C, 0x10, 0x6C, 0x0F, 0x83,
        0x16, 0x19, 0xFC, 0xF7, 0x58, 0xEC, 0x55, 0x01,
        0x16, 0x39, 0x7C, 0xD5, 0x30, 0x6C, 0x16, 0x5B,
        0x16, 0xDB, 0xA2, 0xF5, 0xA6, 0x4E, 0xDB, 0x38,
        0x16, 0xD5, 0x97, 0x21, 0xFA, 0x0C, 0x26, 0xBE,
        0x16, 0xC4, 0x55, 0xE3, 0xFA, 0xA0, 0xFC, 0xB6,
        0x16, 0x57, 0x2C, 0x7D, 0x55, 0xCB, 0x8C, 0x33,
        0x16, 0x91, 0x6B, 0x8F, 0xF4, 0x52, 0x6D, 0xF3,
        0x16, 0x43, 0xE9, 0xDF, 0x36, 0x1F, 0x76, 0x4F,
        0x16, 0x62, 0xE5, 0xAF, 0x44, 0x25, 0xF1, 0x47,
        0x16, 0xE6, 0x59, 0xC5, 0x57, 0x45, 0x49, 0x0D,
        0x16, 0xD0, 0xDF, 0x30, 0xDC, 0x3B, 0x48, 0x75,
        0x16, 0x8A, 0x80, 0xFA, 0x34, 0x87, 0x0F, 0x53,
        0x16, 0x4D, 0x13, 0x70, 0x5F, 0xF1, 0x33, 0xF7,
        0x16, 0xA7, 0xB6, 0xBF, 0xD3, 0x91, 0x7B, 0xC2,
        0x16, 0x30, 0x72, 0x08, 0xBD, 0x32, 0xD7, 0xB7,
        0x16, 0x39, 0xFF, 0x7A, 0x59, 0x5B, 0x58, 0x3D,
        0x16, 0x3C, 0x82, 0x74, 0xAB, 0x16, 0x98, 0xA2,
        0x16, 0xCE, 0x1B, 0xDB, 0x7C, 0x44, 0xB4, 0xD2,
        0x16, 0xC2, 0xB7, 0xF1, 0x69, 0x1F, 0x3C, 0xE5,
        0x16, 0xB9, 0x73, 0x51, 0xF8, 0x50, 0x50, 0xAD,
        0x16, 0x1B, 0xBC, 0x48, 0x2E, 0x1D, 0xDB, 0x00,
        0x15, 0x00, 0x08, 0x00, 0x8B, 0x64, 0x4C, 0x87,
        0x16, 0x10, 0x30, 0x8B, 0xDD, 0x99, 0xA8, 0x7D,
        0x16, 0xBB, 0x63, 0x14, 0x07, 0x3A, 0xC0, 0xB7,
        0x16, 0x9B, 0xDF, 0x31, 0x8E, 0x18, 0xF5, 0xE3,
        0x16, 0x06, 0xA1, 0xC1, 0x57, 0x53, 0x5D, 0x77,
        0x16, 0x74, 0x9A, 0xCA, 0xA9, 0x47, 0xA8, 0x65,
        0x16, 0x6E, 0xBA, 0x38, 0xB1, 0x19, 0x50, 0xDD,
        0x16, 0x84, 0x10, 0xCC, 0x44, 0x64, 0xDA, 0x24,
        0x16, 0x0D, 0x71, 0x03, 0x63, 0xE0, 0x8D, 0x0B,
        0x16, 0x7D, 0x09, 0xDD, 0x30, 0x4A, 0xD0, 0x9C,
        0x16, 0xDA, 0xE0, 0x01, 0xB1, 0xBC, 0xC2, 0xDF,
        0x16, 0xE9, 0x5D, 0x03, 0x3B, 0x94, 0x9A, 0x6A,
        0x16, 0x84, 0x0F, 0x5A, 0xE8, 0xC5, 0x3E, 0xB7,
        0x16, 0xCF, 0x6F, 0xFC, 0xF7, 0x8E, 0xBD, 0xFF,
        0x16, 0xAD, 0xED, 0x87, 0x9E, 0x22, 0x3E, 0x73,
        0x16, 0x60, 0x14, 0x77, 0xAE, 0xE1, 0x02, 0x22,
        0x16, 0x7E, 0x5D, 0x85, 0x9E, 0x7C, 0xC9, 0x1C,
        0x16, 0x41, 0x60, 0x42, 0x61, 0xF2, 0x1F, 0x01,
        0x16, 0x6F, 0x87, 0x87, 0x29, 0xA2, 0x09, 0x1D,
        0x16, 0x31, 0x48, 0xC4, 0xE9, 0xDA, 0xFD, 0x60,
        0x16, 0x7D, 0x1D, 0xA7, 0x04, 0x27, 0xEC, 0x5F,
        0x16, 0xE8, 0xB0, 0xEE, 0xA5, 0xF4, 0x53, 0x67,
        0x16, 0xBE, 0x59, 0x77, 0x53, 0xFD, 0x2E, 0x7C,
        0x16, 0xD0, 0xDB, 0xBF, 0x58, 0x10, 0xA9, 0x97,
        0x16, 0xCE, 0xFD, 0xD2, 0xFB, 0x5C, 0x65, 0x01,
        0x16, 0x27, 0x99, 0x3E, 0xBC, 0xF5, 0x5C, 0xEA,
        0x16, 0x30, 0xD5, 0xE5, 0x7C, 0x31, 0xB8, 0x0B,
        0x16, 0x06, 0x83, 0x53, 0x71, 0xB9, 0x33, 0xC0,
        0x16, 0x9F, 0xCF, 0x94, 0xD3, 0x5C, 0x50, 0x5C,
        0x16, 0x65, 0x87, 0x3B, 0x33, 0x53, 0xD2, 0xDD,
        0x16, 0x71, 0x98, 0xA7, 0xF9, 0x2B, 0xD3, 0x8F,
        0x16, 0xFF, 0xE8, 0xB5, 0x98, 0x3B, 0x1B, 0xC2,
        0x16, 0x1B, 0xD0, 0x2F, 0x38, 0xED, 0x63, 0x7D,
        0x16, 0xDB, 0x58, 0x10, 0x99, 0x16, 0x4E, 0xAC,
        0x16, 0xE6, 0x83, 0x8F, 0x70, 0x3C, 0x4D, 0xEF,
        0x16, 0x42, 0x15, 0xFE, 0x05, 0x66, 0x48, 0x12,
        0x16, 0x76, 0x86, 0x82, 0xB6, 0xC0, 0x71, 0x86,
        0x16, 0xAE, 0x4B, 0xE4, 0x2F, 0x9E, 0x50, 0xE2,
        0x16, 0x58, 0x87, 0x03, 0x68, 0x44, 0x79, 0x8F,
        0x16, 0xBA, 0x93, 0x19, 0xF9, 0xF9, 0x9C, 0x05,
        0x16, 0x64, 0x6D, 0x2D, 0x2A, 0x97, 0x9E, 0x45,
        0x16, 0xDE, 0x61, 0xF1, 0x9A, 0x45, 0x03, 0x2C,
        0x16, 0x79, 0x60, 0x73, 0x8E, 0x1B, 0xBD, 0xBE,
        0x16, 0x12, 0x5D, 0x34, 0x8E, 0x49, 0x98, 0xE4,
        0x16, 0xA9, 0x3F, 0x57, 0x5A, 0x61, 0x36, 0x14,
        0x16, 0x81, 0x1E, 0x29, 0x44, 0x5D, 0x51, 0x81,
        0x16, 0xE2, 0xD7, 0x0A, 0xEC, 0x28, 0x4D, 0x46,
        0x16, 0x77, 0x27, 0x4E, 0xFE, 0x4A, 0x3E, 0x9E,
        0x16, 0x16, 0x82, 0x31, 0x21, 0xA7, 0xDB, 0x2C,
        0x16, 0xEB, 0xE8, 0x15, 0x1D, 0x35, 0xEE, 0x06,
        0x16, 0x90, 0x3A, 0x97, 0xA3, 0x2C, 0x07, 0x1D,
        0x16, 0xEC, 0x19, 0x78, 0x5E, 0x5D, 0xA6, 0x25,
        0x16, 0x53, 0xF3, 0xBB, 0xAD, 0x4F, 0xAB, 0xA9,
        0x16, 0xBE, 0xBC, 0xB4, 0x1C, 0xB7, 0x74, 0x96,
        0x16, 0x8D, 0x35, 0x2C, 0x4A, 0x42, 0xC9, 0x32,
        0x16, 0xE7, 0x65, 0x74, 0x34, 0x14, 0xDA, 0xF4,
        0x16, 0xAF, 0x44, 0xF5, 0x0D, 0x54, 0x90, 0x81,
        0x16, 0xDE, 0x5B, 0xC9, 0x8A, 0xC1, 0x95, 0xCC,
        0x16, 0x73, 0x26, 0x05, 0xD9, 0x35, 0x83, 0x0E,
        0x16, 0xF0, 0x0A, 0x7F, 0x52, 0x37, 0xA3, 0xA7,
        0x16, 0xE2, 0xE6, 0xEE, 0x0F, 0xE2, 0x7B, 0xF3,
        0x16, 0xC7, 0xEF, 0x18, 0xD4, 0x05, 0xEA, 0x0E,
        0x16, 0x57, 0xFA, 0x4D, 0x58, 0x84, 0xA5, 0x7A,
        0x16, 0x50, 0xD8, 0x07, 0x60, 0xEF, 0x8D, 0x6F,
        0x16, 0xFB, 0xC5, 0xF3, 0x81, 0x54, 0x9D, 0xD2,
        0x16, 0x99, 0x7D, 0x2D, 0x2A, 0xD6, 0x43, 0xF2,
        0x16, 0x61, 0xDF, 0x92, 0x2B, 0x0A, 0xE2, 0xDF,
        0x16, 0xEE, 0x5D, 0xF0, 0x90, 0x67, 0xF3, 0x53,
        0x16, 0x99, 0x53, 0x71, 0x2E, 0x89, 0xE9, 0x9B,
        0x16, 0x1B, 0x87, 0xFD, 0xB1, 0x25, 0x03, 0x12,
        0x16, 0x85, 0x1E, 0x9D, 0x75, 0xAF, 0x94, 0xDD,
        0x16, 0xDF, 0x12, 0x13, 0xA4, 0x99, 0xE5, 0x5E,
        0x16, 0x60, 0xF6, 0x10, 0x08, 0x8E, 0xED, 0x80,
        0x16, 0xB7, 0x75, 0x9A, 0x4F, 0xA6, 0x05, 0xAA,
        0x16, 0xE8, 0x46, 0x50, 0xA1, 0x5E, 0x05, 0x66,
        0x16, 0xA8, 0xEE, 0x0C, 0x17, 0x06, 0x42, 0x21,
        0x16, 0xD5, 0xF2, 0x75, 0x23, 0x41, 0x0A, 0xD9,
        0x16, 0xB3, 0x3A, 0x74, 0x89, 0xE8, 0x4E, 0x54,
        0x16, 0x6F, 0xA0, 0x6A, 0x4E, 0x6D, 0x98, 0x5D,
        0x16, 0xA6, 0x09, 0xD7, 0x48, 0x05, 0xE4, 0x1F,
        0x16, 0xE1, 0x56, 0x1B, 0x8A, 0x97, 0x84, 0xD9,
        0x16, 0xEB, 0x0C, 0xAA, 0x7B, 0x5B, 0xD6, 0x6F,
        0x16, 0x48, 0x91, 0xE3, 0x6B, 0xCA, 0x4B, 0x1F,
        0x16, 0x6A, 0x79, 0x49, 0xE9, 0x03, 0x86, 0x2F,
        0x16, 0x21, 0xBE, 0xA8, 0x6E, 0x48, 0x0F, 0xEF,
        0x16, 0xC7, 0xC9, 0x4C, 0x1A, 0x29, 0xFF, 0x0D,
        0x16, 0xA2, 0x38, 0x74, 0x2B, 0x38, 0x34, 0xBC,
        0x16, 0x0B, 0xC5, 0xCE, 0x9D, 0x30, 0xDC, 0xFE,
        0x16, 0xFD, 0x27, 0x03, 0x6C, 0xFA, 0x48, 0x6F,
        0x16, 0xC3, 0xA0, 0x73, 0x11, 0xB0, 0xDA, 0x0B,
        0x16, 0x32, 0x95, 0xA3, 0x25, 0x55, 0x96, 0x62,
        0x16, 0x94, 0x11, 0x5A, 0xBA, 0x76, 0xF8, 0xF8,
        0x16, 0xA2, 0x77, 0x5B, 0x33, 0xB2, 0x79, 0x60,
        0x16, 0xC7, 0xB7, 0x89, 0xDF, 0xDB, 0xCA, 0xEA,
        0x16, 0x46, 0x86, 0xB1, 0x11, 0xCC, 0x1A, 0xA7,
        0x16, 0x3D, 0x80, 0x4F, 0xF7, 0x95, 0xD5, 0xFF,
        0x16, 0xB5, 0x95, 0xDE, 0xB1, 0x09, 0x0B, 0xEB,
        0x16, 0x48, 0x77, 0x17, 0x80, 0xBE, 0x23, 0x4F,
        0x16, 0x6B, 0xE5, 0xBD, 0x13, 0xBD, 0xAB, 0xBC,
        0x16, 0x81, 0x2F, 0xB6, 0xB9, 0x10, 0x95, 0x7A,
        0x16, 0xB7, 0x6C, 0x1F, 0x18, 0x1C, 0x25, 0xD1,
        0x16, 0x71, 0x64, 0xCB, 0xF0, 0x65, 0xAF, 0x20,
        0x16, 0xA3, 0x82, 0xDF, 0x02, 0xB6, 0xEF, 0x31,
        0x16, 0xB9, 0x1C, 0x43, 0x30, 0xD5, 0x42, 0xCB,
        0x16, 0xDE, 0xC7, 0x0C, 0x0A, 0x10, 0x61, 0x75,
        0x16, 0x5E, 0x82, 0xAE, 0x48, 0x09, 0xA8, 0x20,
        0x16, 0xE3, 0xD1, 0x6C, 0x77, 0xE7, 0x5A, 0x9F,
        0x16, 0x0E, 0x38, 0x29, 0xB5, 0xB0, 0xFE, 0x78,
        0x16, 0xCC, 0x16, 0xBA, 0x1A, 0x10, 0x42, 0x4D,
        0x16, 0xA2, 0x5C, 0x0A, 0x37, 0x27, 0x0C, 0x86,
        0x16, 0x80, 0x9A, 0xCA, 0x70, 0xFA, 0x33, 0xB5,
        0x16, 0xAA, 0xB7, 0xF1, 0x02, 0xE8, 0x97, 0x44,
        0x16, 0xCA, 0x48, 0xDB, 0xC6, 0xF7, 0xCA, 0x9D,
        0x16, 0xC0, 0x2C, 0x0D, 0x85, 0xB8, 0xAA, 0x30,
        0x16, 0x92, 0x6D, 0xD4, 0x92, 0x6A, 0xEC, 0xD8,
        0x16, 0x95, 0x3D, 0x1E, 0x5B, 0x7E, 0xAD, 0xAB,
        0x16, 0xD4, 0x31, 0xCB, 0xB5, 0x20, 0x94, 0xB5,
        0x16, 0xD2, 0x27, 0xE1, 0x81, 0x5D, 0xDC, 0x42,
        0x16, 0xCF, 0x47, 0x2E, 0xCE, 0x8B, 0x90, 0x12,
        0x16, 0x17, 0x07, 0xA5, 0xF8, 0x86, 0x92, 0xE3,
        0x16, 0xAB, 0x44, 0x7D, 0x6E, 0x70, 0x02, 0x53,
        0x16, 0x01, 0x45, 0x21, 0x41, 0x14, 0x84, 0x1D,
        0x16, 0x50, 0x08, 0xB6, 0x1A, 0xFE, 0xCD, 0x88,
        0x16, 0xE3, 0xBE, 0xC3, 0xC2, 0xBF, 0x4B, 0x52,
        0x16, 0xA5, 0xF8, 0x37, 0x65, 0x11, 0xE3, 0x40,
        0x16, 0x23, 0xB7, 0x2D, 0x50, 0x2A, 0x90, 0x18,
        0x16, 0x33, 0x37, 0x63, 0xBB, 0xC6, 0x17, 0xA7,
        0x16, 0xFE, 0x1A, 0x4F, 0x6A, 0xC2, 0x95, 0x94,
        0x16, 0x0E, 0x28, 0xFD, 0x03, 0xFD, 0x61, 0xD8,
        0x16, 0x8A, 0x99, 0x35, 0xC8, 0x48, 0x4C, 0x0C,
        0x16, 0x59, 0xE7, 0xE3, 0xC7, 0xC1, 0xCB, 0x14,
        0x16, 0x28, 0xEA, 0x4C, 0x1D, 0xCE, 0x56, 0x30,
        0x16, 0x4E, 0xD5, 0x51, 0xCF, 0xD9, 0x35, 0x7A,
        0x16, 0x13, 0xA2, 0xB6, 0x60, 0x45, 0xA4, 0x31,
        0x16, 0x63, 0x02, 0x8B, 0x2D, 0x5E, 0xBC, 0x14,
        0x16, 0x46, 0xCB, 0x82, 0x44, 0xEF, 0x6E, 0x5A,
        0x16, 0xBB, 0xAD, 0xDB, 0xE6, 0x5B, 0xC6, 0xC4,
        0x16, 0x23, 0x2F, 0xE9, 0x38, 0x4B, 0x40, 0x83,
        0x16, 0x11, 0xD3, 0x16, 0x44, 0x10, 0x74, 0x51,
        0x16, 0x01, 0x29, 0xDA, 0x0D, 0xDC, 0x78, 0xF5,
        0x16, 0x16, 0x1B, 0x49, 0xEB, 0x8F, 0xA8, 0x11,
        0x16, 0x3B, 0x33, 0x30, 0x61, 0x0A, 0xA2, 0x27,
        0x16, 0xB9, 0x6F, 0x16, 0xF9, 0x24, 0x43, 0x98,
        0x16, 0xBD, 0x59, 0xBE, 0x7A, 0xF4, 0x49, 0x40,
        0x16, 0xE4, 0x9D, 0x36, 0x02, 0xEA, 0xA8, 0xBF,
        0x16, 0x77, 0x33, 0x42, 0x29, 0x0D, 0xB1, 0xFA,
        0x16, 0xB7, 0x23, 0xE6, 0x37, 0x3B, 0xEB, 0x1F,
        0x16, 0x6C, 0x21, 0x96, 0xFF, 0x66, 0x2B, 0x81,
        0x16, 0x8C, 0xF0, 0x52, 0xDE, 0x63, 0x3E, 0x76,
        0x16, 0x87, 0xF3, 0x70, 0x09, 0xD8, 0x50, 0x24,
        0x16, 0xBF, 0xF5, 0xEB, 0x3D, 0xEF, 0x47, 0x67,
        0x16, 0xAB, 0x87, 0x30, 0x1B, 0x04, 0x77, 0xBF,
        0x16, 0xDC, 0x09, 0xF4, 0x95, 0x3B, 0x4B, 0xC0,
        0x16, 0xA6, 0xC0, 0xE7, 0xE6, 0x60, 0x73, 0x9E,
        0x16, 0xF0, 0x88, 0xF8, 0x3D, 0x2F, 0x03, 0xF1,
        0x16, 0x66, 0x02, 0x83, 0x1F, 0xD6, 0x4E, 0x9E,
        0x16, 0x8C, 0x98, 0x60, 0x40, 0x2C, 0x22, 0xFA,
        0x16, 0x90, 0x32, 0xA8, 0x06, 0x02, 0x90, 0xB5,
        0x16, 0xF0, 0x99, 0x6E, 0x45, 0xCE, 0x0B, 0x62,
        0x16, 0xC8, 0xD9, 0x66, 0x8E, 0x3F, 0x0C, 0xE6,
        0x16, 0x78, 0x24, 0x73, 0x49, 0x79, 0xF5, 0x11,
        0x16, 0x03, 0x43, 0x45, 0x06, 0x26, 0xF7, 0xE8,
        0x16, 0x7D, 0x08, 0x24, 0xF5, 0xFA, 0xD1, 0x97,
        0x16, 0x7A, 0x19, 0xE9, 0x44, 0xAC, 0x47, 0xAB,
        0x16, 0x2A, 0xC8, 0x71, 0xB4, 0x34, 0xB1, 0x25,
        0x16, 0xA5, 0xB2, 0x80, 0xBA, 0xFE, 0x20, 0xEB,
        0x16, 0xA2, 0x21, 0x82, 0x97, 0xEC, 0xB8, 0x6C,
        0x16, 0xDB, 0x69, 0xB2, 0xC9, 0xC2, 0x4E, 0xE8,
        0x16, 0x5E, 0xC7, 0x00, 0x0C, 0x44, 0x4C, 0xC2,
        0x16, 0x83, 0xEC, 0x41, 0xBA, 0xBC, 0x10, 0xF6,
        0x16, 0xF7, 0x47, 0x8B, 0xAB, 0xA3, 0xDF, 0xF1,
        0x16, 0x9A, 0x68, 0xE9, 0x90, 0x3C, 0x94, 0xD2,
        0x16, 0xE4, 0x6C, 0xDE, 0x9A, 0xEB, 0xE8, 0xC6,
        0x16, 0x53, 0x59, 0x46, 0x09, 0xEB, 0xCB, 0x1D,
        0x16, 0x36, 0x2A, 0xFB, 0x4B, 0x7C, 0x4A, 0x83,
        0x16, 0x63, 0xD2, 0x42, 0x16, 0x98, 0x57, 0x5D,
        0x16, 0x2E, 0x52, 0x16, 0xBD, 0xD8, 0x0B, 0x8D,
        0x16, 0x94, 0x01, 0xBF, 0xA8, 0x3F, 0x64, 0xAC,
        0x16, 0xFC, 0x1C, 0x51, 0xD3, 0xC9, 0x1C, 0xAD,
        0x16, 0xA2, 0x73, 0xE3, 0xF1, 0x68, 0x40, 0xA1,
        0x16, 0x44, 0x89, 0xA9, 0x24, 0xDE, 0x3F, 0xC6,
        0x16, 0xA9, 0x4C, 0xFC, 0xFF, 0x25, 0xE5, 0x7A,
        0x16, 0x99, 0xEE, 0xE8, 0xB0, 0x0A, 0xF4, 0x64,
        0x16, 0x79, 0x88, 0x1A, 0x9D, 0xAF, 0xE6, 0xB0,
        0x16, 0x1C, 0xEF, 0xA5, 0x6D, 0x10, 0x06, 0xF7,
        0x16, 0xF1, 0x14, 0x5D, 0x23, 0x82, 0xCE, 0xBF,
        0x16, 0x03, 0xDA, 0xBF, 0xCF, 0x9F, 0x3B, 0x4E,
        0x16, 0xA8, 0x29, 0x03, 0x84, 0xA1, 0x22, 0x9F,
        0x16, 0x09, 0x54, 0xCF, 0x04, 0x03, 0x1E, 0xEF,
        0x16, 0xD4, 0xB8, 0xC2, 0xF7, 0x9E, 0xA8, 0xE3,
        0x16, 0x6B, 0xF7, 0x1A, 0xB5, 0xDB, 0x9F, 0x57,
        0x16, 0x5F, 0x11, 0x57, 0x72, 0x7B, 0x2D, 0x25,
        0x16, 0xBB, 0x7B, 0x54, 0x70, 0xA8, 0x03, 0x30,
        0x16, 0xA6, 0x35, 0x7C, 0x68, 0x5C, 0x7E, 0x7E,
        0x16, 0xB2, 0xB9, 0x7B, 0x37, 0xA8, 0x6E, 0x79,
        0x16, 0xA8, 0x30, 0x28, 0xFE, 0x39, 0xF3, 0xC0,
        0x16, 0x67, 0x04, 0x47, 0x01, 0xAF, 0xD0, 0xBA,
        0x16, 0x04, 0x99, 0xBD, 0xB2, 0x8D, 0x57, 0x75,
        0x16, 0x6F, 0x21, 0xAC, 0xCA, 0x85, 0xAD, 0x20,
        0x16, 0xC9, 0xD0, 0xF3, 0xAF, 0xB3, 0x91, 0x96,
        0x16, 0x7B, 0xAF, 0x41, 0xE1, 0x74, 0xE6, 0xB3,
        0x16, 0xE4, 0x36, 0xF7, 0x90, 0xE5, 0x7A, 0xD5,
        0x16, 0x3F, 0x54, 0xC0, 0xB1, 0x79, 0x94, 0xBA,
        0x16, 0x25, 0xDD, 0x3D, 0x50, 0x68, 0x51, 0x20,
        0x16, 0x40, 0xB2, 0x70, 0x03, 0x45, 0x17, 0x44,
        0x16, 0xEE, 0x23, 0x0F, 0x28, 0x30, 0xBD, 0x58,
        0x16, 0x50, 0x4D, 0x39, 0x18, 0x47, 0x42, 0x5D,
        0x16, 0x32, 0xDF, 0xFF, 0x79, 0x33, 0xEF, 0xD2,
        0x16, 0xC7, 0xE6, 0xCE, 0x8B, 0xEB, 0x26, 0x31,
        0x16, 0xCA, 0x0A, 0xEA, 0x55, 0xB1, 0x60, 0x6F,
        0x16, 0x2F, 0x83, 0xC8, 0xFF, 0xF8, 0x7E, 0xF2,
        0x16, 0xD2, 0xE3, 0x81, 0x9C, 0xDE, 0x4C, 0x2D,
        0x16, 0x77, 0x2F, 0xD9, 0xBE, 0x9F, 0xBF, 0x54,
        0x16, 0x9F, 0x03, 0xC1, 0x49, 0xE2, 0xF1, 0x2B,
        0x16, 0xB4, 0x09, 0x82, 0x07, 0x88, 0xEB, 0xAA,
        0x16, 0x6B, 0xD0, 0xAD, 0xE7, 0x9A, 0xEA, 0x31,
        0x16, 0x88, 0x11, 0x1A, 0xCF, 0xF4, 0xFF, 0x24,
        0x16, 0xFE, 0x56, 0x2F, 0xE6, 0x0C, 0x84, 0x08,
        0x16, 0x72, 0xFB, 0x31, 0xC3, 0xE6, 0xC4, 0xBA,
        0x16, 0xEC, 0xF0, 0x33, 0x59, 0x30, 0x86, 0x6B,
        0x16, 0x49, 0xB5, 0xD8, 0x63, 0x37, 0x98, 0x5E,
        0x16, 0x2A, 0x7B, 0xAB, 0x41, 0x05, 0x95, 0x19,
        0x16, 0x78, 0xDC, 0x57, 0xFF, 0x15, 0x62, 0xEE,
        0x16, 0x5F, 0xC9, 0x3A, 0x6A, 0x47, 0x3C, 0xF4,
        0x16, 0xFA, 0xEB, 0x67, 0x93, 0xBF, 0x6A, 0x9F,
        0x16, 0xF3, 0xC7, 0x02, 0xFB, 0x41, 0xA5, 0x84,
        0x16, 0x3D, 0xA4, 0x7A, 0x80, 0x1F, 0x2F, 0x9D,
        0x16, 0x55, 0x37, 0x41, 0xC5, 0x9E, 0x7C, 0x94,
        0x16, 0xA1, 0x36, 0x19, 0xCB, 0x0F, 0x95, 0x5F,
        0x16, 0x44, 0xD8, 0xA9, 0x77, 0xCF, 0xA0, 0x27,
        0x16, 0xA3, 0x26, 0xD9, 0x83, 0x60, 0x9D, 0x4D,
        0x16, 0xBD, 0x81, 0xEC, 0x4A, 0x7D, 0xAD, 0x42,
        0x16, 0x25, 0xAC, 0x60, 0xED, 0x7C, 0x9C, 0x79,
        0x16, 0x62, 0x4E, 0xD3, 0xEE, 0x5C, 0x08, 0xAD,
        0x16, 0x53, 0x05, 0xA5, 0x12, 0x8C, 0x6B, 0xD8,
        0x16, 0xE2, 0x1D, 0xF1, 0xFD, 0x46, 0xDA, 0x33,
        0x16, 0xC6, 0x37, 0x9A, 0x22, 0x0C, 0x1A, 0x8F,
        0x16, 0x30, 0x4C, 0x62, 0xDD, 0xFC, 0x63, 0xB9,
        0x16, 0x67, 0xF6, 0x0B, 0x76, 0x22, 0xFD, 0xBC,
        0x16, 0x8A, 0xE0, 0xEB, 0x5F, 0x1C, 0xCA, 0xD4,
        0x16, 0x0A, 0xA0, 0xEE, 0xF5, 0xD3, 0x47, 0x23,
        0x16, 0xC0, 0x78, 0x99, 0x44, 0x35, 0xBD, 0x2E,
        0x16, 0xD6, 0x4B, 0xE8, 0x97, 0xEF, 0x05, 0x4F,
        0x16, 0xEF, 0x0C, 0x99, 0x36, 0xE1, 0xD7, 0xF2,
        0x16, 0xA0, 0x99, 0x80, 0x01, 0xCC, 0x1E, 0x68,
        0x16, 0xE8, 0x29, 0x68, 0x3F, 0x76, 0x54, 0x0A,
        0x16, 0xFD, 0x6F, 0x40, 0xB8, 0x72, 0x46, 0x7F,
        0x16, 0x99, 0xD2, 0xEB, 0xB8, 0x7A, 0x90, 0x5B,
        0x16, 0xDA, 0x1B, 0xE0, 0x83, 0xC4, 0x67, 0x48,
        0x16, 0x81, 0x79, 0x8C, 0xE7, 0x04, 0x6A, 0xBE,
        0x16, 0x2B, 0x42, 0x31, 0x6F, 0xC2, 0xC6, 0xA0,
        0x16, 0x09, 0xBF, 0x9A, 0x46, 0x93, 0x01, 0xDF,
        0x16, 0x2C, 0x0E, 0x44, 0x2E, 0xE0, 0xB6, 0x1A,
        0x16, 0x68, 0x2F, 0x8B, 0xCE, 0x3C, 0xC6, 0xE1,
        0x16, 0xB3, 0x9C, 0x1B, 0x5A, 0x1B, 0xA8, 0x81,
        0x16, 0x3C, 0x90, 0x41, 0xC9, 0x78, 0xDC, 0x0A,
        0x16, 0xC1, 0x9F, 0xB4, 0xC3, 0xBC, 0xA7, 0xE6,
        0x16, 0x40, 0x4E, 0xE8, 0x22, 0xD7, 0x9E, 0x72,
        0x16, 0x9B, 0x7A, 0xEE, 0xFB, 0x11, 0xF8, 0x08,
        0x16, 0xBE, 0x3F, 0x79, 0x6A, 0xB6, 0x56, 0x0F,
        0x16, 0x9F, 0x83, 0xC1, 0xA2, 0xDF, 0x64, 0xCE,
        0x16, 0x7B, 0x60, 0xEF, 0x93, 0x15, 0x2B, 0x89,
        0x16, 0xB0, 0x0A, 0x08, 0xD4, 0x49, 0xFA, 0xE3,
        0x16, 0xDE, 0x63, 0xD8, 0xEF, 0xE0, 0xC4, 0x2B,
        0x16, 0x0B, 0xFF, 0x79, 0x89, 0x9B, 0xB8, 0x52,
        0x16, 0xB7, 0xD7, 0xF2, 0x4E, 0x58, 0xA0, 0xF7,
        0x16, 0x77, 0x19, 0x0B, 0xC1, 0xE8, 0x76, 0xFB,
        0x16, 0x3F, 0xB0, 0x95, 0xEC, 0xDA, 0x05, 0x22,
        0x16, 0xE3, 0xFD, 0xC3, 0x48, 0x38, 0x09, 0x7A,
        0x16, 0xAA, 0x38, 0x3D, 0x3F, 0x45, 0xAE, 0xF1,
        0x16, 0x58, 0xA3, 0x40, 0xC1, 0x18, 0x17, 0xC2,
        0x16, 0x29, 0xB5, 0x71, 0x45, 0x2F, 0xE1, 0x88,
        0x16, 0xF9, 0xD7, 0x99, 0x4A, 0x2D, 0xB5, 0x31,
        0x16, 0x80, 0x57, 0xB2, 0x0C, 0x62, 0xED, 0x24,
        0x16, 0xF4, 0xA2, 0x5C, 0x19, 0x49, 0x74, 0xEF,
        0x16, 0xF1, 0xF4, 0x4E, 0xB3, 0x65, 0x26, 0x8A,
        0x16, 0xC3, 0xE1, 0xFB, 0x35, 0x05, 0x29, 0x1B,
        0x16, 0x53, 0x6B, 0xED, 0xF0, 0x98, 0x84, 0x72,
        0x16, 0xAF, 0xD6, 0x9A, 0x3C, 0x65, 0xCF, 0xB5,
        0x16, 0x1E, 0xE3, 0x04, 0x0B, 0x95, 0x18, 0xDA,
        0x16, 0x8C, 0x91, 0xF8, 0x3A, 0x8F, 0xDF, 0x7B,
        0x16, 0x4F, 0xA3, 0x4D, 0x05, 0xB1, 0x3A, 0x15,
        0x16, 0x3C, 0x53, 0xDA, 0xEF, 0xF9, 0xB9, 0x83,
        0x16, 0xBC, 0xD7, 0xC4, 0x58, 0x7A, 0xFF, 0x04,
        0x16, 0xE3, 0xD2, 0x33, 0x2B, 0xAE, 0xC6, 0xF4,
        0x16, 0x62, 0x41, 0x99, 0x6E, 0x65, 0xC5, 0x9C,
        0x16, 0xF3, 0xC1, 0xAC, 0xBA, 0x84, 0x17, 0xA3,
        0x16, 0xA3, 0xBB, 0x95, 0x1B, 0xEA, 0xBC, 0xF1,
        0x16, 0x29, 0xA4, 0xCE, 0x5E, 0xE1, 0xF8, 0x8D,
        0x16, 0xD4, 0x2D, 0x1F, 0xAC, 0xDE, 0x9D, 0xB9,
        0x16, 0xA8, 0x8E, 0xA2, 0x3D, 0xEB, 0x0D, 0x3F,
        0x16, 0x12, 0xEF, 0x2F, 0xFA, 0x43, 0xE5, 0x78,
        0x16, 0x3B, 0x1D, 0x4A, 0xEC, 0x36, 0x28, 0xB7,
        0x16, 0x00, 0x3A, 0x47, 0x37, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x29}
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/patch_full.h';
      var-mem-desc-line = '23';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/patch_full.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'patch__init_8h';
  file-name = 'patch_init.h';
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'patch__init_8h_1ad8336693c15f6754d8f279dbffebcf19';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
const uint8_t PROGMEM
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'ssb_patch_content';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
=
		{0x15, 0x00, 0x03, 0x74, 0x0B, 0xD4, 0x84, 0x60,
		 0x16, 0x6F, 0xAE, 0x6C, 0xF9, 0xBB, 0x84, 0xA2,
		 0x16, 0x65, 0xB1, 0x4B, 0xF6, 0x72, 0x01, 0x1A,
		 0x16, 0x21, 0xE8, 0x5A, 0xD8, 0xD6, 0x04, 0x73,
		 0x16, 0x5E, 0x2C, 0x22, 0x6E, 0xC4, 0xE9, 0xB5,
		 0x16, 0x8B, 0x81, 0x9A, 0x1E, 0xE4, 0x87, 0xC9,
		 0x16, 0x9E, 0x7B, 0x17, 0x52, 0x6D, 0xAD, 0xE3,
		 0x16, 0xE5, 0x8B, 0x04, 0xA7, 0x2E, 0x99, 0x6A,
		 0x16, 0x32, 0xAA, 0x99, 0x97, 0xCC, 0xA6, 0x5B,
		 0x16, 0x15, 0x79, 0x56, 0x48, 0x01, 0x63, 0xB1,
		 0x16, 0xDF, 0x54, 0x27, 0x06, 0x57, 0x06, 0x53,
		 0x16, 0x8C, 0xA6, 0x27, 0xAA, 0x66, 0x89, 0x03,
		 0x16, 0x18, 0x51, 0x7E, 0xFB, 0x67, 0xD3, 0xCE,
		 0x16, 0xDD, 0x3F, 0xFD, 0x3D, 0x1F, 0x47, 0x84,
		 0x16, 0x01, 0xF3, 0x85, 0x6E, 0xF8, 0x3B, 0x79,
		 0x16, 0x2B, 0x0C, 0x90, 0x4B, 0x67, 0x46, 0x7D,
		 0x16, 0x54, 0x88, 0xFD, 0xD6, 0x12, 0xE5, 0xE7,
		 0x16, 0x48, 0xF2, 0x0E, 0xDB, 0x99, 0x4D, 0x71,
		 0x16, 0xA5, 0x40, 0x68, 0xD9, 0xC9, 0x59, 0x39,
		 0x16, 0xE4, 0x75, 0x20, 0x1C, 0xE9, 0xB1, 0xF5,
		 0x16, 0x01, 0x3C, 0x19, 0xBB, 0x60, 0xF7, 0xFA,
		 0x16, 0x6B, 0x1E, 0x68, 0x9F, 0x19, 0xB6, 0xED,
		 0x16, 0x14, 0x0F, 0x56, 0xBC, 0xC1, 0x34, 0xCB,
		 0x16, 0x00, 0x9D, 0x43, 0xD4, 0x0F, 0xF3, 0x62,
		 0x16, 0x9C, 0x9D, 0xF7, 0x8B, 0x9D, 0x53, 0x3A,
		 0x16, 0x8D, 0x2F, 0x3D, 0xDE, 0x3D, 0x38, 0x31,
		 0x16, 0x03, 0x9B, 0xC7, 0xC1, 0x59, 0xE9, 0xD1,
		 0x16, 0x75, 0x88, 0x8D, 0x36, 0x58, 0x86, 0x70,
		 0x16, 0x4E, 0x5B, 0x9E, 0xD0, 0xDB, 0xCB, 0xF7,
		 0x16, 0xEA, 0x1F, 0xDB, 0xA5, 0x3B, 0xB3, 0xBD,
		 0x16, 0x6B, 0xBC, 0xF3, 0x70, 0x65, 0xD5, 0x17,
		 0x16, 0x0F, 0x64, 0x15, 0x24, 0x20, 0xD5, 0xB8,
		 0x16, 0x7B, 0x0D, 0x27, 0x29, 0x85, 0x88, 0x1F,
		 0x16, 0x58, 0x22, 0x57, 0x4F, 0x09, 0xC0, 0x4D,
		 0x16, 0xD6, 0xE4, 0xC6, 0xB5, 0x3A, 0x37, 0x33,
		 0x16, 0x27, 0xBB, 0x6A, 0x14, 0x69, 0x03, 0x1B,
		 0x16, 0xED, 0xA8, 0xC3, 0x43, 0xE8, 0xEA, 0xDE,
		 0x16, 0x41, 0x06, 0x25, 0xC5, 0xC8, 0x3C, 0xBF,
		 0x16, 0x32, 0xB2, 0xA7, 0xDD, 0x22, 0xC2, 0xE9,
		 0x16, 0xCA, 0x84, 0xF2, 0xC0, 0x26, 0x7C, 0x78,
		 0x16, 0x01, 0xF7, 0xD5, 0xC6, 0x05, 0x33, 0xE4,
		 0x16, 0xC2, 0x78, 0xEC, 0x1B, 0xFD, 0xD2, 0x50,
		 0x16, 0x7D, 0x11, 0x29, 0x57, 0x99, 0xB0, 0xF1,
		 0x16, 0x55, 0x66, 0x74, 0xB4, 0x58, 0x23, 0xA0,
		 0x16, 0x6F, 0x2E, 0xD8, 0x9B, 0x08, 0xB3, 0x3E,
		 0x16, 0x53, 0xCF, 0x5E, 0xCC, 0x7A, 0xDF, 0x4E,
		 0x16, 0xED, 0x42, 0x16, 0x6A, 0x91, 0x88, 0x43,
		 0x16, 0x1B, 0x1D, 0x84, 0x5C, 0x52, 0x21, 0x66,
		 0x16, 0x58, 0x24, 0x36, 0x71, 0xC5, 0x6A, 0x0D,
		 0x16, 0x2C, 0x86, 0x9A, 0x23, 0x9D, 0xE0, 0x35,
		 0x16, 0x43, 0xC9, 0x7F, 0x41, 0xBD, 0x82, 0x99,
		 0x16, 0xED, 0x7A, 0x26, 0xB2, 0xD3, 0xA6, 0xCE,
		 0x16, 0x4F, 0x00, 0xE6, 0x87, 0xE3, 0xD7, 0x68,
		 0x16, 0x28, 0x86, 0xF7, 0xCE, 0xD2, 0xB3, 0xD3,
		 0x16, 0x1B, 0x04, 0x02, 0xB9, 0x78, 0xB3, 0xAD,
		 0x16, 0xE0, 0x3C, 0x53, 0xA6, 0x8A, 0x4A, 0x22,
		 0x16, 0xBE, 0x1F, 0xCE, 0xB1, 0x76, 0xF2, 0x2F,
		 0x16, 0x81, 0xA8, 0xC1, 0x78, 0x72, 0xB0, 0x15,
		 0x16, 0x65, 0x19, 0xE3, 0x32, 0xA7, 0x4D, 0x0C,
		 0x16, 0xD3, 0x00, 0xB9, 0xC3, 0x27, 0xBE, 0x74,
		 0x16, 0x4D, 0xD1, 0xE1, 0x0C, 0x36, 0xDD, 0x23,
		 0x16, 0xFB, 0xA7, 0x22, 0xD3, 0x44, 0xCA, 0xB3,
		 0x16, 0x08, 0x1B, 0xB4, 0x0D, 0x4B, 0xDF, 0x1A,
		 0x16, 0xA6, 0x90, 0x32, 0x92, 0x5C, 0x1A, 0xA7,
		 0x16, 0xCD, 0x85, 0x2E, 0x35, 0x11, 0x72, 0xF8,
		 0x16, 0x21, 0x35, 0x7D, 0x3F, 0xDB, 0x29, 0x8D,
		 0x16, 0x30, 0xB3, 0x4F, 0x45, 0x14, 0x77, 0xCF,
		 0x16, 0x99, 0x2F, 0xA3, 0x90, 0x81, 0xB0, 0xAE,
		 0x16, 0xE8, 0x45, 0xE6, 0x3A, 0xA9, 0xA2, 0x62,
		 0x16, 0xB7, 0xDB, 0xBE, 0x25, 0x39, 0xA5, 0xFC,
		 0x16, 0xEA, 0xC5, 0xBC, 0x3A, 0xEC, 0x90, 0xAE,
		 0x16, 0xA6, 0xFB, 0x12, 0xAA, 0xC7, 0x62, 0x22,
		 0x16, 0xAF, 0xA9, 0x84, 0xB9, 0x64, 0xB8, 0xFB,
		 0x16, 0x8D, 0xC1, 0x1C, 0xC3, 0xD0, 0x87, 0x6D,
		 0x16, 0x5C, 0xB4, 0xFE, 0x3F, 0xA4, 0xB8, 0xD8,
		 0x16, 0x89, 0xF4, 0x01, 0x59, 0xBB, 0x04, 0xA5,
		 0x16, 0x43, 0x44, 0x1A, 0xCB, 0x41, 0x30, 0xF7,
		 0x16, 0x5B, 0x9A, 0xEE, 0x28, 0xF4, 0x4C, 0x71,
		 0x16, 0x99, 0xCA, 0x4B, 0x7F, 0x2A, 0x13, 0xF0,
		 0x16, 0x4B, 0x54, 0xB3, 0xFC, 0x90, 0xED, 0xBE,
		 0x16, 0x48, 0x3F, 0xF1, 0x5E, 0x0D, 0xA1, 0xBB,
		 0x16, 0x1E, 0x59, 0x16, 0x15, 0xF0, 0x4B, 0x50,
		 0x16, 0x4C, 0x96, 0x86, 0x1B, 0xA9, 0xCC, 0xC2,
		 0x16, 0x69, 0x4E, 0x10, 0x03, 0xF0, 0xE9, 0x53,
		 0x16, 0xE5, 0xE2, 0xBB, 0x45, 0xE2, 0x8D, 0xAE,
		 0x16, 0x40, 0x71, 0x08, 0x86, 0x4D, 0x08, 0xF4,
		 0x16, 0x96, 0x90, 0x58, 0x53, 0x40, 0xA5, 0x8B,
		 0x16, 0x5B, 0x3C, 0xAD, 0x47, 0xB5, 0xD7, 0xE2,
		 0x16, 0x6A, 0x13, 0x78, 0xD4, 0xDC, 0xC9, 0xEC,
		 0x16, 0x0E, 0x93, 0xF0, 0xC0, 0x1D, 0x95, 0x36,
		 0x16, 0x76, 0xA4, 0x53, 0x85, 0xC9, 0xAC, 0xE4,
		 0x16, 0x71, 0x8D, 0xAF, 0x68, 0x61, 0x20, 0x9D,
		 0x16, 0xFF, 0x45, 0x35, 0x6E, 0x04, 0xD8, 0x27,
		 0x16, 0x32, 0xC3, 0xDA, 0xEE, 0xA2, 0x66, 0x04,
		 0x16, 0xB7, 0x21, 0x06, 0x52, 0x7F, 0x39, 0x8F,
		 0x16, 0xFD, 0xEE, 0x90, 0x74, 0xB6, 0x4F, 0xB6,
		 0x16, 0x24, 0x0E, 0x12, 0x48, 0xF0, 0xB2, 0x30,
		 0x16, 0xF2, 0xA5, 0x4C, 0x91, 0x52, 0xE3, 0xC6,
		 0x16, 0x48, 0x7B, 0x38, 0x96, 0x23, 0x9E, 0xD7,
		 0x16, 0x1B, 0x95, 0x15, 0x3A, 0xC9, 0x8B, 0x6F,
		 0x16, 0x63, 0x7D, 0x1D, 0xC9, 0xEA, 0x96, 0xE6,
		 0x16, 0x01, 0xD7, 0x85, 0xC0, 0xEA, 0x3D, 0xCA,
		 0x16, 0xD3, 0xB7, 0xFB, 0x07, 0x54, 0x3A, 0x00,
		 0x16, 0x31, 0x3D, 0x74, 0xE4, 0x12, 0x5B, 0xA2,
		 0x16, 0x38, 0x33, 0x5B, 0xBF, 0x1D, 0xDC, 0x4E,
		 0x16, 0xE8, 0x85, 0x10, 0x77, 0xAB, 0xEA, 0x65,
		 0x16, 0x79, 0xB0, 0xAA, 0x30, 0x61, 0xC6, 0xF6,
		 0x16, 0x3B, 0xCC, 0x95, 0xFC, 0x83, 0x7F, 0x8C,
		 0x16, 0x7B, 0xB5, 0x52, 0x05, 0xEB, 0xF7, 0x21,
		 0x16, 0xDE, 0x89, 0xB6, 0x6D, 0xEE, 0x31, 0x77,
		 0x16, 0x13, 0xAA, 0x93, 0x55, 0x96, 0x08, 0x6E,
		 0x16, 0x1C, 0x82, 0xB5, 0x7E, 0x95, 0xB9, 0x94,
		 0x16, 0xDD, 0x68, 0x42, 0x5C, 0x3A, 0x00, 0xC3,
		 0x16, 0x7B, 0x6F, 0x60, 0x6A, 0x2C, 0x07, 0xD7,
		 0x16, 0x6C, 0x82, 0xFB, 0xB2, 0x81, 0x25, 0x69,
		 0x16, 0xD6, 0x72, 0x0A, 0xD2, 0xE8, 0x50, 0x05,
		 0x16, 0x88, 0x49, 0x1B, 0x63, 0x72, 0x99, 0x6C,
		 0x16, 0xE3, 0x7A, 0xAE, 0xB0, 0x1B, 0x9E, 0xD4,
		 0x16, 0x25, 0x54, 0x25, 0x8A, 0x90, 0x17, 0x97,
		 0x16, 0xDF, 0x39, 0xB8, 0x7C, 0xEA, 0xF0, 0x82,
		 0x16, 0xDD, 0x25, 0xD2, 0xAD, 0xE7, 0xF6, 0x36,
		 0x16, 0x23, 0x84, 0xA9, 0xC9, 0x6A, 0x53, 0xF4,
		 0x16, 0x82, 0x2C, 0x1D, 0xEA, 0x06, 0xC6, 0x4F,
		 0x16, 0x70, 0x54, 0x37, 0x80, 0x2A, 0x6B, 0x63,
		 0x16, 0xDB, 0xCC, 0x86, 0xE6, 0x8C, 0x7F, 0x27,
		 0x16, 0x8C, 0x72, 0x54, 0x73, 0x9E, 0x1B, 0xD6,
		 0x16, 0x4C, 0xFA, 0x05, 0x82, 0x80, 0xD7, 0xB7,
		 0x16, 0x11, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x06, 0x98, 0x69, 0x15, 0x1C, 0xFC,
		 0x16, 0x86, 0x87, 0x74, 0x84, 0x5B, 0xD4, 0x0F,
		 0x16, 0xDB, 0xD7, 0x27, 0xC5, 0x4A, 0xB2, 0x8F,
		 0x16, 0x29, 0x7A, 0x4A, 0x23, 0x0A, 0xB8, 0x07,
		 0x16, 0xD0, 0x34, 0x70, 0x81, 0x8E, 0x53, 0xEF,
		 0x16, 0x43, 0x16, 0x3F, 0xA8, 0xA7, 0x9E, 0x5A,
		 0x16, 0x77, 0xC0, 0x91, 0xB7, 0x89, 0x15, 0x52,
		 0x16, 0x48, 0xC0, 0xB7, 0x62, 0xAB, 0xE1, 0x74,
		 0x16, 0x64, 0x10, 0xAA, 0x09, 0x6B, 0x97, 0x74,
		 0x16, 0x21, 0x79, 0x35, 0xA1, 0x97, 0x25, 0xFC,
		 0x16, 0x78, 0xC1, 0xEC, 0x6E, 0x87, 0x77, 0x40,
		 0x16, 0x87, 0x1A, 0x74, 0x82, 0x81, 0x56, 0xDD,
		 0x16, 0xEC, 0x37, 0xAD, 0xAF, 0x03, 0x31, 0xAC,
		 0x16, 0x47, 0x85, 0x74, 0xC0, 0x2A, 0x45, 0x9D,
		 0x16, 0xF4, 0x12, 0x0C, 0xF9, 0x86, 0xB0, 0x4A,
		 0x16, 0x16, 0xD8, 0x11, 0x6C, 0x46, 0xC4, 0x4A,
		 0x16, 0x67, 0x98, 0x8B, 0x1B, 0x42, 0xC2, 0xBE,
		 0x16, 0xBB, 0x0E, 0x48, 0x84, 0xF7, 0x08, 0xA6,
		 0x16, 0xC3, 0x8F, 0x8E, 0x8D, 0xAB, 0xC2, 0x9B,
		 0x16, 0x5D, 0x5C, 0x60, 0x28, 0x57, 0x8F, 0x0E,
		 0x16, 0xAD, 0x2E, 0xC1, 0x5E, 0x95, 0x29, 0x9A,
		 0x16, 0xF4, 0x8A, 0x27, 0xD4, 0x41, 0xBB, 0x4A,
		 0x16, 0xAC, 0x5D, 0xB2, 0x93, 0x26, 0xFD, 0x87,
		 0x16, 0x81, 0x3F, 0x27, 0x35, 0xA6, 0x42, 0x2C,
		 0x16, 0x15, 0x38, 0xAD, 0xF8, 0x02, 0x6F, 0x94,
		 0x16, 0xDA, 0x08, 0xEE, 0x19, 0xD8, 0x90, 0xFA,
		 0x16, 0x89, 0xC3, 0xAD, 0x89, 0xFE, 0xC6, 0x02,
		 0x16, 0x46, 0x81, 0x1D, 0x0C, 0x8D, 0x78, 0x2F,
		 0x16, 0xEE, 0xD3, 0xED, 0x6C, 0x7B, 0x95, 0x49,
		 0x16, 0x56, 0x87, 0xF4, 0xE2, 0x63, 0xDA, 0x39,
		 0x16, 0xCE, 0x68, 0x16, 0x18, 0xED, 0x98, 0xEE,
		 0x16, 0x86, 0xF3, 0xB3, 0xC1, 0x12, 0x1A, 0x51,
		 0x16, 0x9B, 0x57, 0x1D, 0x19, 0x9E, 0x98, 0x7E,
		 0x16, 0xD2, 0xFD, 0x3D, 0x2B, 0x59, 0x15, 0x46,
		 0x16, 0x74, 0x57, 0x79, 0x14, 0x81, 0x71, 0x89,
		 0x16, 0xD9, 0x22, 0xDD, 0x92, 0x10, 0xD9, 0x89,
		 0x16, 0x91, 0xDF, 0x67, 0x00, 0x6E, 0x53, 0xAF,
		 0x16, 0xDA, 0xB5, 0x28, 0x30, 0x1E, 0x47, 0xE6,
		 0x16, 0xB7, 0x05, 0x2D, 0x22, 0xCF, 0x7F, 0x6A,
		 0x16, 0xCD, 0x88, 0x90, 0x6B, 0x8C, 0x16, 0x36,
		 0x16, 0x88, 0x07, 0xA1, 0xB7, 0xAF, 0xF3, 0x31,
		 0x16, 0xC4, 0xDB, 0x76, 0x8B, 0x96, 0x9E, 0xF0,
		 0x16, 0x17, 0xA7, 0x3F, 0x84, 0x78, 0x91, 0xA8,
		 0x16, 0xCD, 0x3F, 0x8F, 0xA5, 0xDD, 0x52, 0x14,
		 0x16, 0xF9, 0x39, 0x5D, 0x0B, 0x56, 0x8E, 0x1C,
		 0x16, 0x5A, 0x5B, 0x89, 0xEE, 0x80, 0x9E, 0x33,
		 0x16, 0xBD, 0xB1, 0x45, 0x15, 0x42, 0x34, 0x59,
		 0x16, 0x78, 0x20, 0xFC, 0x2D, 0xDB, 0xC9, 0x2E,
		 0x16, 0x0F, 0x35, 0x26, 0xCF, 0x23, 0x9B, 0x3E,
		 0x16, 0x1D, 0x9F, 0x0F, 0x26, 0x0E, 0xB7, 0xB5,
		 0x16, 0x4E, 0xAC, 0xA2, 0x86, 0xD5, 0xDA, 0x36,
		 0x16, 0x04, 0x5A, 0x73, 0x46, 0x6A, 0x88, 0xC5,
		 0x16, 0x2A, 0xA0, 0x83, 0xE8, 0x8B, 0x5F, 0x3C,
		 0x16, 0xAF, 0x6A, 0x44, 0x4E, 0x75, 0x9B, 0x8F,
		 0x16, 0x93, 0x37, 0x35, 0x38, 0xBD, 0x02, 0x9A,
		 0x16, 0x1D, 0x84, 0x29, 0x64, 0x25, 0x97, 0xE0,
		 0x16, 0x7C, 0x2A, 0xB6, 0xCB, 0xC1, 0x66, 0x51,
		 0x16, 0x3C, 0xBC, 0x3B, 0xF3, 0x55, 0x2B, 0xB7,
		 0x16, 0xBD, 0x81, 0xEC, 0xF3, 0x49, 0xD5, 0xF8,
		 0x16, 0x03, 0xE0, 0xBD, 0xC6, 0x0C, 0xEE, 0xC0,
		 0x16, 0x19, 0x08, 0xFB, 0x4F, 0x8C, 0x94, 0x08,
		 0x16, 0x0E, 0xA5, 0x30, 0x37, 0xF0, 0xB8, 0x18,
		 0x16, 0x93, 0x73, 0x00, 0xBB, 0x52, 0x52, 0xB4,
		 0x16, 0x98, 0x0D, 0x4B, 0x45, 0xB9, 0x89, 0x0A,
		 0x16, 0x34, 0xE9, 0x1C, 0x24, 0x5A, 0x8F, 0xA8,
		 0x16, 0x9D, 0xC2, 0xD9, 0x27, 0xA9, 0xEE, 0xBF,
		 0x16, 0xC0, 0x80, 0x90, 0xBC, 0x2A, 0x93, 0x43,
		 0x16, 0xFB, 0x0A, 0xB3, 0x96, 0xD1, 0xAE, 0x13,
		 0x16, 0x41, 0x01, 0x68, 0xB9, 0x2C, 0x53, 0x53,
		 0x16, 0x7C, 0x00, 0xA5, 0x84, 0x41, 0xD6, 0x98,
		 0x16, 0x88, 0x98, 0xFE, 0xDE, 0xF7, 0xE2, 0x37,
		 0x16, 0x43, 0x62, 0x0E, 0x93, 0x83, 0xEE, 0x03,
		 0x16, 0x0A, 0x8D, 0xCA, 0x87, 0x59, 0x36, 0x6F,
		 0x16, 0x61, 0xF7, 0xF4, 0xD6, 0xAB, 0x8B, 0x0F,
		 0x16, 0x9C, 0x83, 0x96, 0xA4, 0x6C, 0x46, 0x43,
		 0x16, 0x80, 0x6B, 0xEA, 0x50, 0xDC, 0xD8, 0xCE,
		 0x16, 0xD4, 0xF4, 0xAE, 0x5B, 0xC6, 0x01, 0x43,
		 0x16, 0x85, 0x71, 0x8D, 0x0C, 0x39, 0x5E, 0xE4,
		 0x16, 0x3B, 0x2B, 0xC4, 0x88, 0xB2, 0xC5, 0x54,
		 0x16, 0x96, 0x0E, 0x87, 0x9A, 0x50, 0x93, 0xD6,
		 0x16, 0x9C, 0x91, 0xCA, 0x09, 0x64, 0x8B, 0x23,
		 0x16, 0xC4, 0x29, 0x44, 0x1A, 0x67, 0xE1, 0xDA,
		 0x16, 0xC7, 0x1B, 0x25, 0x17, 0x02, 0x2C, 0x8F,
		 0x16, 0x2A, 0x13, 0x3A, 0xCF, 0xD6, 0x65, 0x31,
		 0x16, 0x2B, 0x10, 0xF5, 0xB5, 0x96, 0xDF, 0x01,
		 0x16, 0x99, 0x7B, 0xAD, 0xD6, 0xB4, 0xC0, 0x35,
		 0x16, 0xA3, 0x48, 0xE3, 0xB0, 0x9E, 0xFE, 0x33,
		 0x16, 0x10, 0x1A, 0x09, 0xAE, 0x3C, 0x0A, 0xA1,
		 0x16, 0x72, 0x8F, 0x00, 0x51, 0xE1, 0x78, 0x23,
		 0x16, 0xF5, 0xE2, 0xBF, 0xA6, 0x46, 0x28, 0xB3,
		 0x16, 0x4B, 0x24, 0xB1, 0xA1, 0xDE, 0xB1, 0xC4,
		 0x16, 0x48, 0x6F, 0xED, 0x5A, 0xD4, 0x61, 0xF0,
		 0x16, 0xDB, 0xE1, 0x08, 0x5C, 0x64, 0xC0, 0xCA,
		 0x16, 0xE9, 0xA9, 0xDE, 0xDE, 0xEC, 0xC0, 0x68,
		 0x16, 0x5B, 0x6D, 0xBD, 0x43, 0x82, 0x8C, 0xCA,
		 0x16, 0x69, 0xB1, 0xA9, 0xC8, 0x71, 0x0D, 0x5D,
		 0x16, 0x6D, 0xA5, 0xAB, 0x1A, 0x67, 0x94, 0xEE,
		 0x16, 0x05, 0x93, 0xE3, 0x3F, 0xE8, 0x1A, 0xE6,
		 0x16, 0x0F, 0x7F, 0x79, 0xF2, 0xCB, 0xC5, 0x37,
		 0x16, 0x57, 0xDF, 0xFC, 0x4F, 0xB4, 0x60, 0xC7,
		 0x16, 0x97, 0x3C, 0x61, 0xB0, 0x0C, 0x46, 0x64,
		 0x16, 0xF4, 0x43, 0x92, 0xD2, 0xA5, 0xF0, 0xF3,
		 0x16, 0xB7, 0xDF, 0xAB, 0x20, 0xB1, 0xF5, 0x30,
		 0x16, 0x2A, 0xB3, 0xDC, 0x4B, 0x39, 0xB7, 0x85,
		 0x16, 0x3E, 0x1E, 0x1B, 0x94, 0x8C, 0x26, 0x28,
		 0x16, 0x80, 0x45, 0xD6, 0x01, 0x36, 0xD0, 0xEC,
		 0x16, 0x93, 0x46, 0x88, 0xD3, 0xD5, 0x89, 0x5D,
		 0x16, 0x7A, 0x82, 0x21, 0x3E, 0xC2, 0x40, 0xE3,
		 0x16, 0xB4, 0xDE, 0xF5, 0xA5, 0x69, 0xD5, 0x69,
		 0x16, 0x49, 0x5C, 0x89, 0xCD, 0xAE, 0x13, 0x70,
		 0x16, 0x70, 0xED, 0x69, 0x0C, 0xEC, 0xC6, 0xFE,
		 0x16, 0x75, 0xEB, 0x4E, 0xD6, 0xB3, 0xC8, 0x60,
		 0x16, 0xFB, 0x34, 0x1E, 0xF8, 0x64, 0x92, 0xD9,
		 0x16, 0x29, 0xA8, 0x13, 0x38, 0x3D, 0x79, 0xC4,
		 0x16, 0xBF, 0x21, 0x37, 0x9D, 0xE3, 0x4F, 0x21,
		 0x16, 0xE5, 0x3F, 0x2C, 0x5C, 0x5F, 0x41, 0xFF,
		 0x16, 0x14, 0x87, 0x91, 0xE0, 0x82, 0x04, 0x0B,
		 0x16, 0x1E, 0x55, 0x53, 0xDC, 0x56, 0x40, 0xA4,
		 0x16, 0x35, 0x78, 0xE2, 0x9B, 0x49, 0x22, 0x2E,
		 0x16, 0x09, 0xCD, 0x1F, 0x6F, 0x94, 0x83, 0xEE,
		 0x16, 0xEA, 0x8B, 0xC4, 0xC2, 0x10, 0xE0, 0x80,
		 0x16, 0xD9, 0xA5, 0x5F, 0x53, 0x34, 0x9C, 0x8C,
		 0x16, 0xEA, 0x95, 0x64, 0x87, 0x94, 0xD6, 0x32,
		 0x16, 0x1C, 0xEB, 0x93, 0xBF, 0xE3, 0x55, 0x83,
		 0x16, 0xC2, 0xF6, 0xFC, 0xC8, 0x85, 0xB2, 0x94,
		 0x16, 0x5C, 0x42, 0x5F, 0x6B, 0x8E, 0x3B, 0x97,
		 0x16, 0x79, 0x74, 0x7E, 0xE3, 0x5C, 0xC2, 0x63,
		 0x16, 0x1A, 0x22, 0xB1, 0x7F, 0x94, 0xCB, 0xE7,
		 0x16, 0xB7, 0xFF, 0x0E, 0x37, 0x95, 0xAF, 0x10,
		 0x16, 0x53, 0x17, 0x88, 0x12, 0x72, 0xDD, 0xCB,
		 0x16, 0xAB, 0x4B, 0x6B, 0x68, 0x24, 0xAC, 0xC9,
		 0x16, 0x5C, 0x72, 0x09, 0x4F, 0xF1, 0xFB, 0x1D,
		 0x16, 0xE7, 0xA2, 0x30, 0xE9, 0x20, 0x4B, 0xDA,
		 0x16, 0x70, 0x7C, 0x9E, 0xE2, 0x34, 0xEB, 0x6A,
		 0x16, 0x35, 0xC2, 0x33, 0xD7, 0x9D, 0x07, 0xB1,
		 0x16, 0xEF, 0xF6, 0x75, 0xF5, 0xFD, 0xAD, 0xC7,
		 0x16, 0x4B, 0xD0, 0xB7, 0xDD, 0xAE, 0x1E, 0x8D,
		 0x16, 0x1E, 0xC0, 0x39, 0x9C, 0xA7, 0x1C, 0xC5,
		 0x16, 0xCC, 0x39, 0x50, 0xC6, 0x6B, 0xC6, 0xDA,
		 0x16, 0x37, 0xC7, 0xE1, 0x20, 0xEB, 0x74, 0xA5,
		 0x16, 0x3D, 0xC0, 0x08, 0xFA, 0xC2, 0xDF, 0xF2,
		 0x16, 0x9E, 0x43, 0x2B, 0xF0, 0x77, 0x50, 0x49,
		 0x16, 0x8C, 0xC3, 0x2F, 0x68, 0xF3, 0x2A, 0x9B,
		 0x16, 0x83, 0x1A, 0xDC, 0x05, 0xD8, 0xB7, 0x7C,
		 0x16, 0x3C, 0x61, 0x11, 0x76, 0xEC, 0x2D, 0xFE,
		 0x16, 0x86, 0x08, 0x87, 0x15, 0xA3, 0xC0, 0x1C,
		 0x16, 0xB4, 0x6A, 0x8D, 0x9E, 0xBF, 0x9A, 0xD5,
		 0x16, 0xC8, 0x5B, 0x05, 0x18, 0x10, 0x15, 0xFB,
		 0x16, 0xC6, 0x3C, 0xEE, 0xC5, 0x52, 0x4B, 0x31,
		 0x16, 0x36, 0x07, 0xB9, 0x4C, 0x81, 0xEA, 0x83,
		 0x16, 0xD7, 0x82, 0xFE, 0xFC, 0x43, 0x59, 0x4E,
		 0x16, 0x20, 0xBD, 0xD3, 0x65, 0xCF, 0x1F, 0x5C,
		 0x16, 0x71, 0x1F, 0xBF, 0x26, 0xEC, 0x44, 0xEB,
		 0x16, 0x01, 0x74, 0x82, 0x3C, 0x8E, 0x60, 0xDF,
		 0x16, 0x47, 0x90, 0x31, 0x17, 0x7E, 0x16, 0xC0,
		 0x16, 0xEC, 0x1E, 0xC3, 0x3A, 0x7A, 0x59, 0x21,
		 0x16, 0xA2, 0x9B, 0x8E, 0x87, 0x25, 0xD3, 0xFE,
		 0x16, 0x85, 0xDD, 0x6D, 0xE6, 0xD8, 0xCA, 0x74,
		 0x16, 0xBA, 0xDB, 0x42, 0x30, 0x96, 0x3D, 0x86,
		 0x16, 0x22, 0x86, 0x6F, 0xDE, 0x37, 0x1A, 0x93,
		 0x16, 0x2F, 0x03, 0x2E, 0xE1, 0x6E, 0x16, 0x62,
		 0x16, 0xC1, 0xE1, 0x2D, 0xFE, 0xCB, 0xA8, 0xDF,
		 0x16, 0x64, 0x05, 0xEF, 0x23, 0xBC, 0x71, 0x61,
		 0x16, 0x7B, 0x1B, 0x60, 0x22, 0x27, 0xBD, 0xC6,
		 0x16, 0xA3, 0x72, 0x07, 0xAA, 0x09, 0xB0, 0x52,
		 0x16, 0xF2, 0x19, 0x15, 0x4D, 0xBE, 0xAF, 0x26,
		 0x16, 0x3B, 0x4D, 0x62, 0xA6, 0x3C, 0x41, 0x07,
		 0x16, 0x7A, 0x34, 0x25, 0x3C, 0xD6, 0xCD, 0xB6,
		 0x16, 0x55, 0x47, 0x87, 0x1E, 0xCB, 0xCF, 0xCE,
		 0x16, 0xD2, 0x0D, 0x95, 0xC0, 0xD8, 0x72, 0xA6,
		 0x16, 0xE0, 0x33, 0x24, 0x26, 0x51, 0x7E, 0x71,
		 0x16, 0xC7, 0x53, 0x3F, 0xD4, 0x67, 0x73, 0x52,
		 0x16, 0xCB, 0x78, 0x5A, 0x00, 0x11, 0x15, 0x71,
		 0x16, 0x5F, 0x8D, 0x3C, 0xCF, 0x40, 0xCD, 0xD9,
		 0x16, 0x74, 0x30, 0xD9, 0xA1, 0x3F, 0xC6, 0x58,
		 0x16, 0xBC, 0xBE, 0x78, 0x18, 0x31, 0x9A, 0x39,
		 0x16, 0x60, 0xBB, 0x8D, 0x7B, 0x34, 0x95, 0xA5,
		 0x16, 0xF1, 0x54, 0x3B, 0xB9, 0x85, 0x99, 0xAF,
		 0x16, 0xC4, 0x45, 0xEB, 0x64, 0xA7, 0x6E, 0x59,
		 0x16, 0x60, 0xEB, 0x1E, 0x7A, 0xFB, 0xFD, 0x92,
		 0x16, 0x43, 0x23, 0xF1, 0x27, 0xAC, 0x66, 0x12,
		 0x16, 0x66, 0x28, 0x8A, 0x5C, 0xF6, 0xC6, 0x3F,
		 0x16, 0x76, 0x04, 0xE8, 0x09, 0x27, 0xED, 0x05,
		 0x16, 0xAA, 0x26, 0xE5, 0xB4, 0xAD, 0x40, 0xBA,
		 0x16, 0xF7, 0xF4, 0x84, 0xCB, 0x7F, 0x07, 0x10,
		 0x16, 0x8D, 0xB6, 0xC7, 0xD4, 0x77, 0xEA, 0xBA,
		 0x16, 0x96, 0x2A, 0x98, 0xF0, 0x56, 0xD7, 0xFF,
		 0x16, 0x50, 0x4D, 0x59, 0x79, 0x3D, 0x41, 0xE0,
		 0x16, 0xFA, 0xA9, 0x9D, 0x3E, 0xA6, 0xD9, 0x79,
		 0x16, 0xC8, 0x0D, 0xD1, 0x56, 0xC5, 0xAD, 0xD7,
		 0x16, 0xFB, 0x70, 0x3C, 0xBD, 0xF3, 0xE9, 0x5D,
		 0x16, 0x1C, 0x53, 0x93, 0x33, 0x1D, 0xF8, 0x1B,
		 0x16, 0xEE, 0x9F, 0xB7, 0x50, 0xAC, 0x8F, 0x48,
		 0x16, 0x59, 0x61, 0xC9, 0x85, 0x9E, 0xC8, 0xB0,
		 0x16, 0xD2, 0x74, 0x39, 0xDF, 0x33, 0xF5, 0x28,
		 0x16, 0xE0, 0x63, 0x11, 0xA7, 0xC4, 0x05, 0xBD,
		 0x16, 0x3A, 0xD9, 0x34, 0xCA, 0xF9, 0xAA, 0xE2,
		 0x16, 0x00, 0xE6, 0xE6, 0x38, 0x57, 0x3E, 0xEC,
		 0x16, 0x19, 0x7C, 0x0D, 0x27, 0x45, 0xC5, 0x52,
		 0x16, 0xC4, 0xFF, 0xF4, 0x69, 0xC5, 0xF5, 0x73,
		 0x16, 0x73, 0x4F, 0xE3, 0x07, 0xC7, 0xCF, 0x38,
		 0x16, 0x23, 0x5B, 0x9C, 0x99, 0xA2, 0x6A, 0x72,
		 0x16, 0xB0, 0x35, 0x39, 0xC1, 0x0A, 0xC7, 0x1C,
		 0x16, 0x1A, 0x30, 0x60, 0x18, 0x1D, 0x2B, 0xF0,
		 0x16, 0xC8, 0xF1, 0x79, 0xA3, 0x94, 0xE3, 0x36,
		 0x16, 0x35, 0x93, 0x69, 0x05, 0x91, 0x07, 0x12,
		 0x16, 0x60, 0x44, 0xFD, 0xB6, 0xC6, 0xFF, 0xE0,
		 0x16, 0xCF, 0xA2, 0xCF, 0xC2, 0xA3, 0x58, 0xAC,
		 0x16, 0x32, 0xE3, 0x2E, 0xEC, 0x0D, 0x9D, 0x1B,
		 0x16, 0xFB, 0x05, 0x40, 0xBA, 0x67, 0x8E, 0xCB,
		 0x16, 0x38, 0xD7, 0x60, 0x9C, 0xFE, 0x9E, 0xA1,
		 0x16, 0x70, 0xCC, 0x40, 0x72, 0x8C, 0x8C, 0x50,
		 0x16, 0x71, 0x85, 0xDD, 0x84, 0x92, 0x5C, 0xEE,
		 0x16, 0x44, 0xB6, 0xE0, 0x80, 0x15, 0x32, 0xDD,
		 0x16, 0x1B, 0x4B, 0x8C, 0x6E, 0x8E, 0x39, 0x97,
		 0x16, 0xA5, 0xAF, 0xC6, 0xF4, 0x29, 0x85, 0xD3,
		 0x16, 0x85, 0x93, 0x85, 0xC8, 0x54, 0xE4, 0x59,
		 0x16, 0x1D, 0x4E, 0xA0, 0xFE, 0xC5, 0x07, 0xC1,
		 0x16, 0xF7, 0x32, 0x52, 0xF9, 0x4D, 0x45, 0x85,
		 0x16, 0xFC, 0xA0, 0xFA, 0x37, 0xB5, 0x9D, 0x47,
		 0x16, 0xE8, 0x52, 0x23, 0x8D, 0x92, 0x87, 0x43,
		 0x16, 0xB4, 0xB8, 0x4F, 0x95, 0x1B, 0x1E, 0x4F,
		 0x16, 0xE5, 0x45, 0xBF, 0xCE, 0xC8, 0x0C, 0xB2,
		 0x16, 0x7D, 0xE7, 0xD9, 0x2E, 0x88, 0xB7, 0x2A,
		 0x16, 0x61, 0xE1, 0x2D, 0xC4, 0x21, 0x2E, 0xB8,
		 0x16, 0x4D, 0xFD, 0x21, 0x87, 0x30, 0x25, 0x11,
		 0x16, 0xEC, 0x1F, 0x29, 0x94, 0x31, 0xD2, 0x92,
		 0x16, 0x85, 0x38, 0x17, 0xDA, 0x63, 0x4D, 0x8C,
		 0x16, 0xB4, 0x06, 0x55, 0x64, 0xB7, 0x6C, 0xFC,
		 0x16, 0xC2, 0x8D, 0x5D, 0x97, 0x86, 0x09, 0xD3,
		 0x16, 0x43, 0x69, 0xE8, 0x35, 0x77, 0xCC, 0xAF,
		 0x16, 0x91, 0x36, 0x3C, 0x7C, 0xA3, 0x6E, 0x4E,
		 0x16, 0x4A, 0xA2, 0xC9, 0x41, 0x50, 0xEA, 0xAB,
		 0x16, 0xDF, 0x87, 0x04, 0x70, 0x4F, 0x16, 0xF5,
		 0x16, 0xA0, 0x38, 0xF5, 0x60, 0x16, 0xCD, 0x0C,
		 0x16, 0xE5, 0xC7, 0xE3, 0xAD, 0x00, 0x12, 0x6B,
		 0x16, 0x12, 0x85, 0x3C, 0x5C, 0x7F, 0x76, 0xED,
		 0x16, 0x49, 0xF2, 0x9D, 0x8F, 0xDF, 0xAB, 0xE1,
		 0x16, 0xDD, 0x87, 0x01, 0xED, 0x2C, 0x1B, 0x4B,
		 0x16, 0x55, 0x11, 0x7F, 0xC3, 0x92, 0xD3, 0x91,
		 0x16, 0xC1, 0xD8, 0xA7, 0x37, 0xC7, 0xE5, 0x5B,
		 0x16, 0x48, 0x2B, 0xED, 0x31, 0xDE, 0xCE, 0xFB,
		 0x16, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x08, 0xE3, 0x51, 0x84, 0x00,
		 0x16, 0x0B, 0x4D, 0x26, 0x73, 0x11, 0x8B, 0x1E,
		 0x16, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x04, 0x04, 0x73, 0xE0, 0x72,
		 0x16, 0xFF, 0xE6, 0x59, 0xC9, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x04, 0x48, 0xBF, 0xAB, 0xF3,
		 0x16, 0x99, 0x87, 0x7C, 0x07, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x04, 0xFB, 0x33, 0xB1, 0x63,
		 0x16, 0x61, 0x61, 0x12, 0xAD, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x08, 0xAA, 0x30, 0xAC, 0x17,
		 0x16, 0x4D, 0x30, 0x86, 0xBF, 0x67, 0x13, 0xF1,
		 0x16, 0xA7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x04, 0x1B, 0x48, 0x42, 0x23,
		 0x16, 0x84, 0xBB, 0x7F, 0xB4, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x08, 0xA6, 0x9F, 0x43, 0x78,
		 0x16, 0x5C, 0xA1, 0x4E, 0x8B, 0xA6, 0xE6, 0x7C,
		 0x16, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x01, 0xF7, 0x31, 0x5D, 0x27,
		 0x16, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x01, 0x0B, 0x57, 0x0B, 0x79,
		 0x16, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x02, 0x44, 0x33, 0xBB, 0xB4,
		 0x16, 0x5B, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x01, 0xAB, 0xE3, 0x01, 0xC2,
		 0x16, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x01, 0x7A, 0x07, 0x9E, 0xAD,
		 0x16, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x02, 0xF1, 0xEE, 0xF7, 0xD8,
		 0x16, 0x29, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x01, 0x2C, 0x35, 0x54, 0x3A,
		 0x16, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x01, 0xC9, 0x3D, 0x66, 0x6A,
		 0x16, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x05, 0x24, 0x7A, 0xF7, 0x1C, 0x24,
		 0x16, 0x40, 0xEB, 0xA2, 0x4D, 0xC2, 0x66, 0xC8,
		 0x16, 0x37, 0x2C, 0x03, 0x0F, 0xF3, 0x01, 0x06,
		 0x16, 0x6D, 0x9A, 0x42, 0xF0, 0x94, 0x8F, 0xED,
		 0x16, 0xBF, 0xE3, 0x28, 0x3B, 0x72, 0x69, 0x37,
		 0x16, 0x75, 0xB4, 0xA0, 0x9A, 0x6E, 0x31, 0xFD,
		 0x16, 0x66, 0x5B, 0xCB, 0xF3, 0xBA, 0x8C, 0xA4,
		 0x16, 0x31, 0xFF, 0xBA, 0x7C, 0x24, 0x54, 0xD3,
		 0x16, 0xC6, 0x63, 0x89, 0x93, 0xE4, 0xED, 0xDA,
		 0x16, 0x58, 0x47, 0x4E, 0xB5, 0x8F, 0xD7, 0x93,
		 0x16, 0xFD, 0xAF, 0x31, 0xEA, 0xB4, 0xEC, 0xC9,
		 0x16, 0x05, 0x7D, 0x2B, 0x15, 0x96, 0xC1, 0x00,
		 0x16, 0x7E, 0x80, 0xE6, 0xF7, 0x47, 0xCD, 0x6A,
		 0x16, 0x77, 0xF1, 0x0E, 0x59, 0x13, 0xAA, 0x5C,
		 0x16, 0x83, 0x88, 0x70, 0xDC, 0xC4, 0x52, 0x52,
		 0x16, 0x20, 0xB6, 0x69, 0x2D, 0x6C, 0x6C, 0x8B,
		 0x16, 0x66, 0x2A, 0xCD, 0x5A, 0x41, 0x30, 0xD6,
		 0x16, 0xFB, 0x7B, 0xA0, 0xEC, 0x7A, 0x22, 0x88,
		 0x16, 0x7C, 0x71, 0x6E, 0xAF, 0x62, 0x06, 0xF4,
		 0x16, 0xA8, 0xC6, 0x88, 0x85, 0x76, 0x36, 0xC5,
		 0x16, 0xC0, 0xD8, 0x67, 0x96, 0x7C, 0xE8, 0x4D,
		 0x16, 0xD4, 0xFB, 0xA9, 0x6F, 0x0F, 0xB2, 0xA7,
		 0x16, 0xA3, 0x19, 0x6A, 0x30, 0xFD, 0x6F, 0xFC,
		 0x16, 0x2B, 0xCE, 0xA4, 0x1B, 0x8E, 0x57, 0x48,
		 0x16, 0x51, 0xC6, 0x98, 0x0F, 0xE5, 0x08, 0x7B,
		 0x16, 0x4D, 0xFC, 0x59, 0xDD, 0xCF, 0x13, 0x1B,
		 0x16, 0x31, 0x0C, 0x5E, 0x3B, 0x98, 0xE1, 0xF4,
		 0x16, 0xC3, 0x41, 0xD7, 0xA2, 0x64, 0x5E, 0x16,
		 0x16, 0xF9, 0xEB, 0xAE, 0x20, 0xE9, 0x5D, 0x54,
		 0x16, 0xBD, 0x99, 0xD3, 0xA7, 0xC1, 0xD9, 0xE5,
		 0x16, 0x32, 0x22, 0xD6, 0x9F, 0x4F, 0xDD, 0x6B,
		 0x16, 0x3C, 0x6D, 0xE9, 0x4D, 0x96, 0x52, 0x11,
		 0x16, 0xDA, 0x23, 0x86, 0xBE, 0x01, 0xC4, 0x51,
		 0x16, 0xC2, 0x9C, 0xC6, 0xF5, 0x2F, 0x1F, 0xD0,
		 0x16, 0xF1, 0xF5, 0x57, 0x82, 0xFE, 0xCB, 0xFB,
		 0x16, 0x4A, 0xDF, 0x1D, 0x00, 0x46, 0xB8, 0xA7,
		 0x16, 0x3A, 0x56, 0x66, 0x08, 0x71, 0x4E, 0x47,
		 0x16, 0xF8, 0x27, 0x26, 0x5F, 0x6C, 0xD8, 0xC3,
		 0x16, 0x05, 0x99, 0x0A, 0x75, 0x8F, 0x4F, 0xC1,
		 0x16, 0x88, 0x72, 0xA0, 0x5A, 0x13, 0x08, 0xA3,
		 0x16, 0x82, 0x84, 0x2E, 0xCE, 0xB5, 0xA3, 0x46,
		 0x16, 0x05, 0xD6, 0x6A, 0x78, 0x56, 0x44, 0x23,
		 0x16, 0x86, 0xF2, 0xC9, 0x63, 0x08, 0x8B, 0xBD,
		 0x16, 0xEE, 0x56, 0xD4, 0x36, 0x1F, 0x37, 0x53,
		 0x16, 0x18, 0xE7, 0xDA, 0x1C, 0xFA, 0xD0, 0x05,
		 0x16, 0xD5, 0x5F, 0xE7, 0xB7, 0xAD, 0x36, 0x2B,
		 0x16, 0xCB, 0x06, 0xC0, 0x53, 0xF4, 0x32, 0xA8,
		 0x16, 0x75, 0x6F, 0xE3, 0xC9, 0xA1, 0xB0, 0xA6,
		 0x16, 0xE6, 0xC2, 0x41, 0x0F, 0x5D, 0x2E, 0x0A,
		 0x16, 0x64, 0x50, 0x46, 0x92, 0x49, 0x5B, 0x2D,
		 0x16, 0x00, 0x2E, 0xB5, 0x21, 0x3F, 0x0B, 0x4A,
		 0x16, 0x71, 0x96, 0x88, 0x84, 0x4C, 0x98, 0xAA,
		 0x16, 0x28, 0x23, 0xEB, 0xEF, 0x45, 0x5C, 0x62,
		 0x16, 0x78, 0xD6, 0xE4, 0xFB, 0x6D, 0xC3, 0xD9,
		 0x16, 0x35, 0x6C, 0xB9, 0x2A, 0xC6, 0x74, 0x71,
		 0x16, 0xC4, 0x0C, 0x65, 0x7C, 0xA3, 0xF9, 0x6E,
		 0x16, 0x2D, 0xB9, 0x86, 0xB0, 0x04, 0x63, 0x94,
		 0x16, 0xCF, 0x26, 0x7D, 0x9E, 0x1E, 0xF7, 0x99,
		 0x16, 0xDA, 0xE0, 0x8C, 0xDD, 0x86, 0xF3, 0xC8,
		 0x16, 0xF1, 0xC6, 0x4E, 0x15, 0x5D, 0xED, 0x34,
		 0x16, 0xBB, 0x90, 0xCD, 0xD6, 0x26, 0x09, 0x1E,
		 0x16, 0xF6, 0x23, 0x84, 0x51, 0xC1, 0xAE, 0x42,
		 0x16, 0x8F, 0x84, 0x96, 0xC9, 0x57, 0xAE, 0x16,
		 0x16, 0x36, 0x3A, 0x29, 0x87, 0x65, 0xB2, 0xBA,
		 0x16, 0x56, 0x96, 0xD2, 0xF5, 0x09, 0xEF, 0x30,
		 0x16, 0x4A, 0x0F, 0x62, 0x36, 0xFE, 0x00, 0x30,
		 0x16, 0xBD, 0x09, 0x1B, 0x50, 0xC3, 0x3C, 0x48,
		 0x16, 0xD7, 0x25, 0xE1, 0x8E, 0xB2, 0x6F, 0x4D,
		 0x16, 0x75, 0x2D, 0xAD, 0xC6, 0x1E, 0xBA, 0xFA,
		 0x16, 0x4F, 0x41, 0xAF, 0x7A, 0x6F, 0xA0, 0xA0,
		 0x16, 0x4F, 0xB6, 0x88, 0x34, 0x69, 0x8A, 0x9E,
		 0x16, 0x83, 0x7A, 0x60, 0xF3, 0xA8, 0x7E, 0x39,
		 0x16, 0x2A, 0x20, 0x9C, 0x32, 0x5E, 0x7D, 0xC4,
		 0x16, 0xAA, 0x97, 0xE6, 0x26, 0x35, 0x42, 0xA1,
		 0x16, 0xA0, 0xEF, 0x39, 0xB3, 0x1C, 0x27, 0x63,
		 0x16, 0xD2, 0x7F, 0x75, 0xC0, 0x1E, 0xB4, 0xFA,
		 0x16, 0x4D, 0x7A, 0x81, 0x81, 0x39, 0xE0, 0x79,
		 0x16, 0x2F, 0x94, 0xA5, 0x28, 0x3A, 0x43, 0x7E,
		 0x16, 0x97, 0xB5, 0x94, 0xAF, 0x2A, 0x10, 0x38,
		 0x16, 0x0A, 0x7F, 0x49, 0x91, 0xC0, 0x6C, 0x65,
		 0x16, 0x9A, 0xC6, 0xC9, 0x5D, 0xD5, 0x52, 0x46,
		 0x16, 0x98, 0x74, 0xAC, 0x93, 0xE4, 0x21, 0xB0,
		 0x16, 0xEB, 0x08, 0xFA, 0xF4, 0x41, 0x2E, 0xA6,
		 0x16, 0xF9, 0xC5, 0xED, 0xE3, 0x37, 0x98, 0xC5,
		 0x16, 0xDF, 0x52, 0x82, 0x41, 0xA2, 0xF2, 0x56,
		 0x16, 0x1A, 0xF3, 0xA4, 0xC6, 0x40, 0x8D, 0xB9,
		 0x16, 0x5F, 0xAA, 0x75, 0x1E, 0x15, 0x1E, 0x68,
		 0x16, 0x78, 0x2B, 0x2B, 0xF4, 0x3E, 0xC7, 0xCB,
		 0x16, 0xF3, 0x13, 0x60, 0xE0, 0xF4, 0x85, 0x79,
		 0x16, 0x88, 0x0C, 0x22, 0x75, 0x87, 0xB7, 0x51,
		 0x16, 0xE0, 0xD6, 0xE3, 0xA0, 0x92, 0xD3, 0xD7,
		 0x16, 0xE3, 0x6C, 0x5B, 0x3E, 0xB7, 0x80, 0xE7,
		 0x16, 0x48, 0xD6, 0xD9, 0x2F, 0x49, 0xCC, 0x75,
		 0x16, 0xA0, 0x04, 0xC9, 0x48, 0x88, 0xE9, 0xCC,
		 0x16, 0x32, 0x41, 0xAF, 0x30, 0xDE, 0xC6, 0xBC,
		 0x16, 0x9D, 0xF7, 0xFC, 0xFF, 0x69, 0x03, 0x50,
		 0x16, 0x58, 0xA1, 0xD6, 0xB8, 0x7B, 0x5E, 0x60,
		 0x16, 0xFC, 0xCC, 0x00, 0x14, 0xAF, 0x3A, 0x30,
		 0x16, 0x41, 0xB3, 0x4E, 0x63, 0x47, 0x95, 0xE4,
		 0x16, 0xBD, 0x53, 0x74, 0xD0, 0xF0, 0x02, 0xB4,
		 0x16, 0xFE, 0x48, 0x19, 0x6C, 0x3F, 0x23, 0xF7,
		 0x16, 0x9B, 0x44, 0x11, 0xF2, 0xC2, 0x45, 0xA6,
		 0x16, 0x37, 0x77, 0x6C, 0x10, 0x63, 0x0E, 0x1B,
		 0x16, 0xA7, 0xD1, 0x96, 0xCA, 0x0D, 0x4F, 0x5B,
		 0x16, 0x43, 0x51, 0xD6, 0x14, 0xB7, 0x23, 0xE7,
		 0x16, 0x99, 0xA4, 0x9F, 0x4C, 0x7D, 0xD7, 0xDD,
		 0x16, 0x08, 0x11, 0x84, 0x4D, 0x5C, 0xE9, 0x60,
		 0x16, 0x90, 0x04, 0x8B, 0x14, 0x90, 0xF0, 0x6F,
		 0x16, 0x26, 0x45, 0x0F, 0x20, 0x8C, 0xE3, 0x6F,
		 0x16, 0x46, 0x78, 0xEB, 0x12, 0xB4, 0x5E, 0xF0,
		 0x16, 0xDE, 0xEB, 0x22, 0x27, 0x62, 0x78, 0x42,
		 0x16, 0x93, 0xBC, 0xE8, 0x48, 0xC0, 0x88, 0xBD,
		 0x16, 0x0F, 0xDE, 0x23, 0x2B, 0xD1, 0x88, 0x0A,
		 0x16, 0xE2, 0xB4, 0x33, 0x8E, 0x61, 0x36, 0x43,
		 0x16, 0x58, 0x42, 0xAE, 0x6B, 0xD7, 0xF2, 0xFE,
		 0x16, 0x0A, 0xC1, 0x26, 0x94, 0x7A, 0xCE, 0x8C,
		 0x16, 0x3B, 0x43, 0x5A, 0x62, 0xEF, 0x70, 0x8A,
		 0x16, 0xFE, 0x4D, 0xD2, 0x37, 0xDB, 0xA1, 0xB1,
		 0x16, 0x06, 0x1B, 0x30, 0x17, 0x4C, 0xA0, 0x24,
		 0x16, 0x1E, 0xBE, 0xCB, 0x64, 0xE2, 0xCE, 0x13,
		 0x16, 0x5C, 0xD7, 0x05, 0xA6, 0x76, 0x39, 0x38,
		 0x16, 0xF3, 0x85, 0x2C, 0x16, 0x0E, 0xB3, 0xE2,
		 0x16, 0x3D, 0xFF, 0x79, 0x88, 0x0B, 0x93, 0xEF,
		 0x16, 0xAD, 0x55, 0xCD, 0xB4, 0xEF, 0x8F, 0xB8,
		 0x16, 0x16, 0x7A, 0x05, 0xC0, 0x5E, 0x92, 0x0F,
		 0x16, 0x4F, 0x98, 0x58, 0xD4, 0x22, 0xAD, 0x43,
		 0x16, 0x25, 0x31, 0x78, 0x52, 0xC6, 0x9A, 0xCA,
		 0x16, 0x5E, 0xA6, 0x4E, 0x79, 0x97, 0x9A, 0xBB,
		 0x16, 0xDF, 0x6D, 0xF1, 0xE2, 0xD0, 0xB3, 0xCA,
		 0x16, 0x2A, 0x5C, 0x46, 0x82, 0x5C, 0x1E, 0xDD,
		 0x16, 0xD0, 0xC5, 0x19, 0x89, 0x2B, 0x2C, 0xBD,
		 0x16, 0xC0, 0x84, 0xD9, 0x33, 0x39, 0x67, 0xE4,
		 0x16, 0xE4, 0x79, 0x26, 0xB6, 0x9D, 0x1C, 0x1D,
		 0x16, 0xE4, 0x70, 0xA5, 0xA7, 0x61, 0x89, 0x25,
		 0x16, 0x4A, 0x57, 0x33, 0x7D, 0x0D, 0xCA, 0xF3,
		 0x16, 0xCC, 0x22, 0xAA, 0xD7, 0xD9, 0xCB, 0xE6,
		 0x16, 0xB2, 0x96, 0x46, 0x15, 0x95, 0x68, 0xD8,
		 0x16, 0x0F, 0xDF, 0x6B, 0x36, 0xDA, 0x19, 0x82,
		 0x16, 0x16, 0xCE, 0x38, 0x4E, 0xCF, 0xF2, 0x36,
		 0x16, 0xC8, 0x80, 0x07, 0x53, 0x88, 0x04, 0x2F,
		 0x16, 0xB2, 0x14, 0x19, 0x5D, 0xC5, 0x6C, 0xEF,
		 0x16, 0x95, 0x9C, 0x60, 0x8B, 0x6A, 0xE4, 0xFC,
		 0x16, 0x9D, 0xB2, 0x9C, 0xED, 0x1D, 0x9C, 0x1B,
		 0x16, 0xCA, 0xA3, 0x26, 0xDD, 0x9C, 0x63, 0x5B,
		 0x16, 0x3B, 0x88, 0x2B, 0xBA, 0x22, 0x35, 0x24,
		 0x16, 0x01, 0x48, 0xEE, 0xA0, 0x4F, 0x6E, 0x96,
		 0x16, 0x4E, 0x29, 0x91, 0xAA, 0xAF, 0x56, 0x47,
		 0x16, 0xBD, 0x7B, 0xDD, 0xA1, 0x55, 0x99, 0xD8,
		 0x16, 0xB5, 0xA1, 0x47, 0x93, 0x7B, 0xCD, 0x7B,
		 0x16, 0xCF, 0x65, 0xDE, 0x50, 0x18, 0xF2, 0x05,
		 0x16, 0x49, 0xF1, 0x99, 0xD8, 0x94, 0x21, 0x3F,
		 0x16, 0x7D, 0x52, 0xC6, 0xB1, 0xB4, 0xE1, 0x9F,
		 0x16, 0xF0, 0x7E, 0x60, 0x64, 0x8B, 0x30, 0xE4,
		 0x16, 0xAD, 0x2C, 0x97, 0xFB, 0x47, 0xF7, 0x09,
		 0x16, 0x01, 0x04, 0x7B, 0xF4, 0xF7, 0xA7, 0xA8,
		 0x16, 0x04, 0xA5, 0x7F, 0x08, 0x58, 0x79, 0x6D,
		 0x16, 0x26, 0x27, 0x6A, 0xD0, 0xD9, 0xAF, 0xC1,
		 0x16, 0xC7, 0x12, 0x23, 0xE1, 0xAE, 0x98, 0xA4,
		 0x16, 0x0F, 0xBC, 0x1B, 0xFA, 0x9D, 0x91, 0x0B,
		 0x16, 0x15, 0x15, 0xA5, 0x24, 0x53, 0x1A, 0x13,
		 0x16, 0xE0, 0xC3, 0x00, 0x95, 0x38, 0x9C, 0x36,
		 0x16, 0x4C, 0xCF, 0xF6, 0xA9, 0xBC, 0xC1, 0x53,
		 0x16, 0x06, 0x04, 0xF4, 0x6F, 0xBF, 0x57, 0xE0,
		 0x16, 0xA6, 0x14, 0xA6, 0x49, 0x70, 0x7F, 0x39,
		 0x16, 0x2A, 0x4A, 0x5A, 0x59, 0x36, 0x33, 0xB9,
		 0x16, 0x0D, 0x47, 0x25, 0x39, 0x37, 0x04, 0x77,
		 0x16, 0x7C, 0x45, 0xAC, 0x19, 0x93, 0x25, 0x49,
		 0x16, 0xE0, 0x7A, 0x7B, 0xA2, 0xC6, 0x95, 0x76,
		 0x16, 0x8D, 0x3C, 0x79, 0xB1, 0xA7, 0xC3, 0x83,
		 0x16, 0x63, 0x03, 0x23, 0x47, 0xD7, 0xAC, 0xFB,
		 0x16, 0x84, 0x16, 0x6F, 0x22, 0x49, 0x0B, 0x97,
		 0x16, 0xAA, 0xD5, 0x38, 0x57, 0x5E, 0x2B, 0xBB,
		 0x16, 0xA7, 0x49, 0xED, 0xD2, 0xD5, 0x7A, 0x96,
		 0x16, 0xBE, 0x8D, 0xF5, 0xF9, 0x46, 0x56, 0xF5,
		 0x16, 0x2F, 0xA7, 0xA8, 0x7A, 0xFF, 0x3F, 0xE7,
		 0x16, 0xE8, 0x8C, 0xF1, 0x48, 0xE8, 0x46, 0xCB,
		 0x16, 0x4D, 0x25, 0xF9, 0x35, 0x93, 0x2F, 0xCE,
		 0x16, 0x8B, 0xB8, 0xA9, 0xC5, 0xD3, 0xD2, 0x27,
		 0x16, 0x71, 0x86, 0x6F, 0x72, 0xD9, 0xCA, 0x4E,
		 0x16, 0x90, 0xD3, 0x6D, 0xB1, 0x3C, 0xD3, 0xCB,
		 0x16, 0xC9, 0x30, 0x3A, 0x26, 0x45, 0x9D, 0x66,
		 0x16, 0x44, 0x5C, 0x5F, 0xD8, 0xE3, 0x90, 0x7C,
		 0x16, 0x1B, 0xD8, 0x82, 0xDD, 0xD3, 0x84, 0xD4,
		 0x16, 0xC6, 0x1B, 0x58, 0xBF, 0x02, 0xA5, 0x3B,
		 0x16, 0x10, 0x0A, 0x3E, 0xE3, 0x09, 0x94, 0x0B,
		 0x16, 0x99, 0x88, 0x2B, 0x47, 0xA7, 0x90, 0x89,
		 0x16, 0xC4, 0x48, 0x25, 0x36, 0xDB, 0x72, 0x31,
		 0x16, 0xAC, 0xF5, 0xA3, 0x01, 0x15, 0xD0, 0xE6,
		 0x16, 0x21, 0x61, 0xEB, 0x59, 0x72, 0xDC, 0x94,
		 0x15, 0x00, 0x00, 0x98, 0xF7, 0xB0, 0xF9, 0xFA,
		 0x16, 0xC1, 0x0A, 0x7E, 0xDC, 0x69, 0xCE, 0x90,
		 0x16, 0x5E, 0x82, 0x11, 0x0B, 0x97, 0xE2, 0x99,
		 0x16, 0x55, 0xA2, 0x3D, 0xFA, 0xEB, 0x88, 0xBC,
		 0x16, 0x4D, 0xC2, 0x54, 0x8D, 0x5F, 0xDE, 0xA3,
		 0x16, 0xE2, 0x48, 0x13, 0x20, 0x46, 0xC5, 0xA0,
		 0x16, 0x81, 0x04, 0xC4, 0x2B, 0x9A, 0x84, 0x15,
		 0x16, 0xB8, 0x9E, 0x9B, 0x62, 0xA1, 0xEC, 0x7D,
		 0x16, 0x08, 0x3C, 0xAD, 0x21, 0x4B, 0x89, 0xFC,
		 0x16, 0xC6, 0x96, 0x7C, 0x3A, 0x41, 0x35, 0x8A,
		 0x16, 0x13, 0xBD, 0x1B, 0x43, 0xBF, 0x36, 0x7A,
		 0x16, 0x4E, 0xCE, 0x70, 0x9E, 0x2A, 0xF6, 0x39,
		 0x16, 0x33, 0xC7, 0x33, 0x4B, 0x34, 0x7D, 0x2A,
		 0x16, 0x81, 0xFA, 0x25, 0x2E, 0xC5, 0xC4, 0xA1,
		 0x16, 0x28, 0x0E, 0xD5, 0x4D, 0x15, 0xE0, 0x69,
		 0x16, 0x12, 0x71, 0x19, 0xAA, 0xFF, 0x59, 0x48,
		 0x16, 0x81, 0x56, 0x53, 0xC9, 0x35, 0x12, 0x4D,
		 0x16, 0x84, 0x69, 0x91, 0x36, 0xD8, 0xAD, 0xF7,
		 0x16, 0x54, 0xD5, 0x8C, 0xF9, 0xC6, 0x84, 0x12,
		 0x16, 0x62, 0x22, 0xF1, 0xB9, 0x2B, 0x1D, 0xA5,
		 0x16, 0x7C, 0x56, 0x7A, 0x4D, 0x5A, 0xC4, 0xF0,
		 0x16, 0x9D, 0x8F, 0x5D, 0xB5, 0x9A, 0x7F, 0xE7,
		 0x16, 0xB7, 0xA8, 0x5D, 0x6D, 0x37, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0xE4, 0xF2, 0xEA, 0x7A, 0x73,
		 0x16, 0xF8, 0xFC, 0x67, 0x17, 0xF3, 0xD9, 0x60,
		 0x16, 0x09, 0x0E, 0x8B, 0x0F, 0xE2, 0xF9, 0x83,
		 0x16, 0x61, 0xDF, 0x53, 0x69, 0xD0, 0xEE, 0x42,
		 0x16, 0x51, 0xB5, 0x51, 0x48, 0x64, 0xF8, 0xDD,
		 0x16, 0x3E, 0xEE, 0xA7, 0x47, 0xF0, 0x7C, 0x4B,
		 0x16, 0xBB, 0x2B, 0x8E, 0xE2, 0x8B, 0x60, 0x57,
		 0x16, 0x63, 0x4B, 0x9B, 0xAA, 0x67, 0x63, 0xEA,
		 0x16, 0xA3, 0xD5, 0x7C, 0x43, 0x41, 0xA9, 0x54,
		 0x16, 0x74, 0xD2, 0x86, 0xC3, 0x11, 0x42, 0x69,
		 0x16, 0xC5, 0x09, 0x3E, 0x8F, 0x94, 0xAF, 0xC5,
		 0x16, 0x99, 0xBB, 0xBB, 0xAC, 0x61, 0x64, 0x61,
		 0x16, 0x01, 0xF2, 0xD3, 0x59, 0xB1, 0x41, 0x50,
		 0x16, 0x91, 0x16, 0x6C, 0xCC, 0x9B, 0xEC, 0x5C,
		 0x16, 0xFE, 0x3B, 0xB3, 0xEC, 0x6E, 0xD7, 0xF1,
		 0x16, 0x0E, 0x5A, 0x8A, 0x5F, 0x1D, 0xB0, 0xC5,
		 0x16, 0x76, 0x54, 0x26, 0x07, 0xBC, 0x66, 0xF0,
		 0x16, 0xED, 0x51, 0x9A, 0x1F, 0xE8, 0xF7, 0x51,
		 0x16, 0x58, 0x8E, 0x1E, 0x80, 0x99, 0x1F, 0xEE,
		 0x16, 0xD6, 0x43, 0xCC, 0xFA, 0x2F, 0xAE, 0x80,
		 0x16, 0xF2, 0xA8, 0xA8, 0xAE, 0x43, 0x7C, 0x80,
		 0x16, 0x76, 0xD4, 0x1A, 0xD4, 0x73, 0x74, 0x61,
		 0x16, 0xDF, 0xBF, 0x29, 0x6F, 0x56, 0x15, 0x93,
		 0x16, 0x07, 0x58, 0x92, 0xF1, 0x1D, 0xE8, 0x7B,
		 0x16, 0x68, 0xB2, 0x54, 0x20, 0x30, 0x01, 0x2D,
		 0x16, 0xC5, 0xD8, 0xFD, 0x61, 0x50, 0x14, 0x0F,
		 0x16, 0x58, 0x4C, 0x1A, 0x54, 0x00, 0x12, 0x7E,
		 0x16, 0x46, 0x99, 0x0C, 0x9D, 0xD1, 0xA3, 0x04,
		 0x16, 0xF1, 0x82, 0x17, 0xFE, 0xFC, 0x12, 0xE5,
		 0x16, 0x75, 0x81, 0xAF, 0xFF, 0x3D, 0x08, 0xD5,
		 0x16, 0x39, 0x87, 0x4A, 0x8E, 0xF0, 0x7A, 0xD4,
		 0x16, 0xD0, 0xD6, 0xCF, 0xA9, 0xD6, 0x59, 0x48,
		 0x16, 0x41, 0xC2, 0x68, 0xE3, 0xA4, 0x35, 0x45,
		 0x16, 0x8D, 0x14, 0x1A, 0xC4, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x44, 0x89, 0x2C, 0x63, 0xC8,
		 0x16, 0xAF, 0x7B, 0xAC, 0x35, 0x43, 0x27, 0xBE,
		 0x16, 0x7E, 0xCF, 0x56, 0x40, 0x3D, 0xA5, 0xAC,
		 0x16, 0x0F, 0x97, 0xCC, 0xD4, 0x6E, 0xD0, 0x31,
		 0x16, 0xD7, 0x14, 0x60, 0x45, 0xAE, 0xDF, 0x0A,
		 0x16, 0xAA, 0x33, 0xB3, 0x88, 0xE0, 0x1C, 0x26,
		 0x16, 0xDC, 0x00, 0xB8, 0x75, 0xC8, 0x67, 0x11,
		 0x16, 0xA1, 0xB5, 0x87, 0x71, 0xF9, 0x4A, 0x6A,
		 0x16, 0xEC, 0x3F, 0x0E, 0x41, 0x21, 0xC2, 0x4F,
		 0x16, 0x92, 0x8F, 0x17, 0x53, 0xEE, 0xD5, 0xEA,
		 0x16, 0x4F, 0x91, 0x75, 0x02, 0x59, 0x00, 0x00,
		 0x15, 0x00, 0x02, 0x94, 0xE4, 0xDA, 0x4A, 0xB3,
		 0x16, 0xAA, 0xA7, 0x2E, 0x9C, 0xC7, 0x80, 0x46,
		 0x16, 0x5E, 0xBD, 0x06, 0x33, 0x1D, 0xD8, 0x5D,
		 0x16, 0x9F, 0x5F, 0x77, 0x73, 0x0A, 0x7D, 0x38,
		 0x16, 0x6B, 0xA7, 0x0E, 0x8F, 0x4E, 0x7D, 0x01,
		 0x16, 0xDA, 0x44, 0x74, 0xD2, 0xF1, 0x7A, 0x2F,
		 0x16, 0x7F, 0xE1, 0xEC, 0xF1, 0xA5, 0x7D, 0x03,
		 0x16, 0x3B, 0x2F, 0x17, 0xB6, 0xE8, 0x0D, 0x33,
		 0x16, 0x3C, 0x21, 0x91, 0x91, 0x5B, 0x30, 0x2C,
		 0x16, 0x11, 0xC6, 0x58, 0x6A, 0xE4, 0x35, 0x1B,
		 0x16, 0xB5, 0xA8, 0x47, 0xB3, 0xFF, 0xD0, 0x96,
		 0x16, 0x0E, 0x48, 0x4E, 0x97, 0x37, 0x60, 0x12,
		 0x16, 0x04, 0xFF, 0xCB, 0xA5, 0xF5, 0x1D, 0x40,
		 0x16, 0x9C, 0xDF, 0x36, 0x12, 0x3D, 0xD9, 0x2A,
		 0x16, 0x72, 0xDA, 0xE8, 0x8B, 0xE4, 0x5B, 0xCF,
		 0x16, 0xE9, 0x38, 0x52, 0xEC, 0x2C, 0xA0, 0xF7,
		 0x16, 0x79, 0xAD, 0x20, 0x70, 0x59, 0x20, 0x62,
		 0x16, 0x73, 0x9C, 0xE3, 0x46, 0x09, 0xC9, 0x12,
		 0x16, 0xD4, 0x77, 0x55, 0x07, 0x4B, 0x6A, 0x26,
		 0x16, 0x1E, 0x5D, 0x07, 0x78, 0x10, 0x4E, 0x4A,
		 0x16, 0xDA, 0x5E, 0xF6, 0x3B, 0x9B, 0x8D, 0xFD,
		 0x16, 0x48, 0xD0, 0xBB, 0xAA, 0x21, 0x2E, 0xF5,
		 0x16, 0xDF, 0x85, 0x4C, 0xA7, 0x1D, 0x1A, 0x26,
		 0x16, 0x1B, 0xA0, 0x82, 0x86, 0x7F, 0x4B, 0x02,
		 0x16, 0xD2, 0xF6, 0x60, 0xC9, 0x86, 0x0C, 0x1D,
		 0x16, 0xBF, 0x73, 0x69, 0x86, 0x18, 0x4B, 0x44,
		 0x16, 0xBC, 0x74, 0xE5, 0x82, 0x17, 0x93, 0xB5,
		 0x16, 0x0A, 0x56, 0x08, 0xB7, 0x4A, 0x73, 0xB8,
		 0x16, 0x04, 0xD2, 0x14, 0x21, 0x5E, 0x2C, 0xA0,
		 0x16, 0xE0, 0xC2, 0x01, 0x5F, 0xDE, 0xCE, 0x64,
		 0x16, 0x2A, 0xD8, 0x65, 0x2B, 0xF0, 0x74, 0xE3,
		 0x16, 0x54, 0xBF, 0xA0, 0x9B, 0x50, 0xBA, 0x02,
		 0x16, 0x00, 0x2C, 0x95, 0xCE, 0x2A, 0x4F, 0xCF,
		 0x16, 0x2B, 0x2B, 0x0E, 0x9B, 0xDD, 0x8F, 0x67,
		 0x16, 0x5B, 0x54, 0xA1, 0x47, 0x2E, 0x84, 0x2E,
		 0x16, 0x24, 0xFA, 0x34, 0xE0, 0x5A, 0x10, 0x3B,
		 0x16, 0xCF, 0xAF, 0xE2, 0xED, 0x28, 0xD1, 0x17,
		 0x16, 0x6B, 0x9A, 0x1B, 0x49, 0x6C, 0xFC, 0xCB,
		 0x16, 0x7A, 0x74, 0x09, 0x2A, 0x41, 0x5A, 0xFF,
		 0x16, 0xA1, 0xF5, 0x98, 0xC6, 0x0C, 0xD2, 0x69,
		 0x16, 0x83, 0xD2, 0xC3, 0x69, 0x87, 0x5E, 0x7E,
		 0x16, 0xBB, 0xFC, 0xC0, 0xD1, 0xC1, 0x17, 0xD7,
		 0x16, 0x9B, 0xE1, 0x53, 0x70, 0xB7, 0x43, 0xD0,
		 0x16, 0x38, 0x25, 0x26, 0x49, 0x40, 0x5B, 0x57,
		 0x16, 0xBA, 0x49, 0x32, 0xAA, 0x9F, 0x39, 0xAA,
		 0x16, 0x8E, 0x73, 0x00, 0x85, 0x13, 0x79, 0x6D,
		 0x16, 0xF1, 0x91, 0x2F, 0x9E, 0xA3, 0xA0, 0x65,
		 0x16, 0x7C, 0x7D, 0x53, 0xB4, 0x70, 0x53, 0x01,
		 0x16, 0x6B, 0x92, 0x5F, 0x38, 0xF1, 0xD7, 0x3D,
		 0x16, 0x7A, 0xD6, 0x07, 0x72, 0x7A, 0xDB, 0xA1,
		 0x16, 0x65, 0xA5, 0x07, 0x41, 0x00, 0x4B, 0xEB,
		 0x16, 0xC5, 0xD0, 0x3B, 0xEB, 0x30, 0x61, 0x42,
		 0x16, 0x0D, 0x4B, 0xA3, 0xD8, 0x07, 0x8B, 0x12,
		 0x16, 0xF5, 0x89, 0x3D, 0x7C, 0xFB, 0x2E, 0x79,
		 0x16, 0xA7, 0xBC, 0xD5, 0xBF, 0x72, 0x9A, 0xD8,
		 0x16, 0x15, 0x39, 0xAD, 0x25, 0x70, 0xD1, 0x6C,
		 0x16, 0xB0, 0x5D, 0xBB, 0xF4, 0x3A, 0xF6, 0x60,
		 0x16, 0x56, 0xFA, 0xF2, 0xA5, 0x28, 0xAE, 0x0D,
		 0x16, 0x76, 0xB3, 0x79, 0xF1, 0x4B, 0xC7, 0x2E,
		 0x16, 0x6E, 0xB6, 0x61, 0x62, 0x22, 0xD9, 0xA7,
		 0x16, 0x30, 0x23, 0x45, 0x21, 0xDE, 0x47, 0x8C,
		 0x16, 0xEB, 0xE5, 0x4C, 0x8B, 0x4E, 0x79, 0xA0,
		 0x16, 0x9D, 0x95, 0xB3, 0x05, 0xAA, 0xAF, 0xEC,
		 0x16, 0xE6, 0x74, 0x73, 0xF0, 0xDC, 0x37, 0xAD,
		 0x16, 0x93, 0x3B, 0x20, 0x6D, 0xA1, 0xD8, 0xCF,
		 0x16, 0xF9, 0x7E, 0x9E, 0xC6, 0xBB, 0x40, 0x64,
		 0x16, 0x56, 0xA6, 0x18, 0x75, 0x28, 0xD2, 0xBA,
		 0x16, 0x78, 0x64, 0x5C, 0x48, 0x45, 0x70, 0x35,
		 0x16, 0x8C, 0x49, 0x9A, 0x45, 0x4A, 0x6D, 0xF2,
		 0x16, 0x9C, 0x8D, 0x48, 0x0A, 0x61, 0x2E, 0xE3,
		 0x16, 0xD4, 0xEE, 0xA8, 0x29, 0x40, 0x4B, 0x53,
		 0x16, 0xBB, 0x56, 0x39, 0xCE, 0x81, 0x6C, 0xFD,
		 0x16, 0x37, 0xA0, 0x79, 0x1C, 0xC7, 0x94, 0x17,
		 0x16, 0x6C, 0x37, 0xEA, 0x97, 0xF4, 0xD8, 0xD4,
		 0x16, 0x9F, 0x9F, 0x30, 0x4F, 0xE5, 0xA4, 0x08,
		 0x16, 0xB8, 0x6B, 0xAE, 0xB9, 0xBC, 0x4F, 0x61,
		 0x16, 0x20, 0x44, 0xDF, 0x92, 0xDB, 0x1E, 0x04,
		 0x16, 0x83, 0xC0, 0xA1, 0x2C, 0x09, 0xD8, 0xDF,
		 0x16, 0x21, 0xF0, 0x20, 0x04, 0x80, 0xAF, 0x73,
		 0x16, 0x91, 0xBC, 0x0E, 0xBA, 0xE4, 0xF7, 0x9B,
		 0x16, 0x36, 0x3C, 0x30, 0xF1, 0xB4, 0xBA, 0xDC,
		 0x16, 0xFA, 0x65, 0xF2, 0x2B, 0x1D, 0x18, 0x4E,
		 0x16, 0x16, 0x62, 0xD4, 0xAC, 0x8B, 0x21, 0xA5,
		 0x16, 0xA2, 0xF1, 0x32, 0xC3, 0xC9, 0x65, 0x63,
		 0x16, 0x2D, 0x31, 0x6B, 0xB8, 0x8F, 0xE1, 0x24,
		 0x16, 0x93, 0x87, 0x04, 0x99, 0xE6, 0xBD, 0xBA,
		 0x16, 0x28, 0x30, 0x63, 0xDA, 0xAC, 0xC7, 0x99,
		 0x16, 0x37, 0x8A, 0x86, 0x66, 0xB3, 0x44, 0xD5,
		 0x16, 0x84, 0xAA, 0xA1, 0x53, 0x42, 0xA0, 0x38,
		 0x16, 0x1E, 0x5D, 0xF7, 0x05, 0x29, 0xE7, 0xCA,
		 0x16, 0x2A, 0x0B, 0x6A, 0xAB, 0xCE, 0xF0, 0x3A,
		 0x16, 0xF3, 0x90, 0xE6, 0xD1, 0x25, 0xA1, 0x33,
		 0x16, 0x1C, 0x33, 0x99, 0x7D, 0x24, 0xD1, 0x74,
		 0x16, 0x23, 0xFC, 0x6F, 0x7D, 0xDB, 0xA7, 0xE9,
		 0x16, 0xC2, 0xDE, 0x17, 0x12, 0x2D, 0x1C, 0xB3,
		 0x16, 0x7E, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x03, 0x08, 0x75, 0x7D, 0x9A, 0x49,
		 0x16, 0x37, 0xAF, 0x60, 0x04, 0x7C, 0xBC, 0xD3,
		 0x16, 0x1C, 0x53, 0x70, 0x34, 0x97, 0xEB, 0xE1,
		 0x16, 0xCD, 0x30, 0x79, 0xA2, 0x86, 0x94, 0x58,
		 0x16, 0x5A, 0x99, 0xC2, 0x69, 0xD7, 0xB2, 0x32,
		 0x16, 0x62, 0x6C, 0x0A, 0x36, 0x69, 0xB1, 0x35,
		 0x16, 0x48, 0x41, 0xCE, 0x79, 0x96, 0x7A, 0x0D,
		 0x16, 0x2D, 0x33, 0xBF, 0x4D, 0x2F, 0xB8, 0xD8,
		 0x16, 0xB3, 0xFB, 0xE4, 0x71, 0x93, 0xB9, 0x18,
		 0x16, 0x0D, 0x51, 0xAB, 0xBB, 0x09, 0xD9, 0x0D,
		 0x16, 0xD7, 0x67, 0x1E, 0x47, 0x28, 0xC7, 0xF7,
		 0x16, 0xCE, 0x60, 0x58, 0x28, 0x23, 0x5E, 0x95,
		 0x16, 0xFC, 0x2B, 0xDB, 0xF9, 0x0D, 0x1F, 0xAB,
		 0x16, 0x49, 0xE6, 0xD0, 0xA7, 0x37, 0x79, 0x20,
		 0x16, 0xE4, 0xCF, 0x05, 0xE3, 0x64, 0x21, 0xAC,
		 0x16, 0xDF, 0xB1, 0xE8, 0xF9, 0xE0, 0x4C, 0x3B,
		 0x16, 0x5E, 0x89, 0x68, 0x2A, 0x48, 0xC5, 0x64,
		 0x16, 0x0E, 0xDB, 0xF1, 0x53, 0x8B, 0x1A, 0x2F,
		 0x16, 0xF6, 0x0C, 0x18, 0x9C, 0x52, 0x9B, 0x21,
		 0x16, 0x2E, 0x4A, 0xE7, 0xD6, 0xBB, 0xB7, 0x1A,
		 0x16, 0x0A, 0x22, 0xAB, 0x4A, 0xFD, 0xD3, 0x02,
		 0x16, 0x7D, 0x21, 0xFF, 0xB9, 0x0E, 0x0F, 0x29,
		 0x16, 0xAB, 0xAC, 0xF4, 0x44, 0x5E, 0x0F, 0xD5,
		 0x16, 0xF3, 0x57, 0xE5, 0x4F, 0x61, 0x72, 0x4E,
		 0x16, 0xBA, 0x55, 0x37, 0x8F, 0x9A, 0x1C, 0xD4,
		 0x16, 0xB8, 0x30, 0xAF, 0x0A, 0x95, 0x1A, 0x13,
		 0x16, 0x86, 0xD4, 0x0A, 0x83, 0x5C, 0x99, 0x1B,
		 0x16, 0x2B, 0xC0, 0x93, 0xF5, 0x13, 0xF5, 0xEA,
		 0x16, 0xFB, 0x6F, 0x75, 0x74, 0x6C, 0x2E, 0x77,
		 0x16, 0xC3, 0x44, 0xC5, 0x38, 0x62, 0xB9, 0xF5,
		 0x16, 0xAC, 0x58, 0xB4, 0x96, 0x6E, 0xA4, 0xA5,
		 0x16, 0x45, 0xB5, 0x1B, 0x7C, 0x9D, 0x21, 0x95,
		 0x16, 0x16, 0xEE, 0x29, 0x57, 0x20, 0x12, 0xBB,
		 0x16, 0xF8, 0x0A, 0x23, 0x25, 0xAC, 0x51, 0xFD,
		 0x16, 0x7A, 0xE0, 0x9D, 0x43, 0xB0, 0x27, 0x6F,
		 0x16, 0x2A, 0xDF, 0x04, 0x08, 0xD3, 0xF1, 0x1D,
		 0x16, 0x3C, 0x12, 0x8D, 0xAF, 0xF2, 0xD7, 0xB9,
		 0x16, 0x02, 0x9D, 0x46, 0xE3, 0xAB, 0xFF, 0x61,
		 0x16, 0xC8, 0x61, 0x2B, 0x19, 0xC8, 0xC1, 0xA1,
		 0x16, 0x6D, 0x0A, 0xA7, 0x44, 0xFA, 0xB5, 0xA8,
		 0x16, 0xD7, 0x1E, 0x53, 0x15, 0x6F, 0x7A, 0x48,
		 0x16, 0x41, 0xE9, 0x30, 0xB5, 0xAD, 0xE2, 0xF0,
		 0x16, 0x70, 0x40, 0x6A, 0xF3, 0x31, 0xDD, 0x19,
		 0x16, 0x50, 0xE5, 0xBC, 0xB4, 0x3D, 0x83, 0x9F,
		 0x16, 0xDF, 0xC8, 0x25, 0x27, 0x90, 0x40, 0x5B,
		 0x16, 0x32, 0x04, 0x47, 0x81, 0xFA, 0x53, 0xB4,
		 0x16, 0x0A, 0x40, 0x15, 0x7A, 0x74, 0x5B, 0xDB,
		 0x16, 0x24, 0xAB, 0x3A, 0xB7, 0x91, 0xE3, 0x44,
		 0x16, 0xB7, 0x47, 0x07, 0x39, 0x90, 0xD2, 0xF5,
		 0x16, 0xA9, 0x08, 0x46, 0x58, 0xDC, 0x32, 0x10,
		 0x16, 0xA3, 0x47, 0x32, 0x04, 0x45, 0x44, 0x13,
		 0x16, 0x71, 0xAC, 0x2E, 0xA7, 0xC9, 0x71, 0xD0,
		 0x16, 0xF9, 0x51, 0x7E, 0xCA, 0xE5, 0x09, 0xA8,
		 0x16, 0x1E, 0x77, 0x5B, 0x3A, 0x08, 0xAA, 0x43,
		 0x16, 0x1C, 0xD6, 0x8D, 0x60, 0x91, 0x46, 0x6D,
		 0x16, 0x64, 0x56, 0x9E, 0x16, 0x2E, 0xCE, 0xB3,
		 0x16, 0x99, 0xC8, 0xF6, 0x55, 0x27, 0x13, 0x84,
		 0x16, 0xBC, 0x8A, 0xB3, 0xC8, 0xF5, 0x1A, 0x72,
		 0x16, 0xF7, 0x6A, 0x0C, 0x46, 0x95, 0x2F, 0x4A,
		 0x16, 0x86, 0xB6, 0xD2, 0x98, 0x94, 0xF1, 0xC3,
		 0x16, 0x37, 0x0E, 0x0C, 0x87, 0x11, 0x56, 0x7E,
		 0x16, 0xAF, 0xDA, 0x22, 0x29, 0x6F, 0xEB, 0xFA,
		 0x16, 0xEC, 0x96, 0xE0, 0x27, 0x6B, 0x42, 0xA1,
		 0x16, 0x70, 0x09, 0x1A, 0xAD, 0x48, 0x88, 0xDA,
		 0x16, 0xFC, 0xE1, 0x3B, 0x62, 0x95, 0x28, 0x56,
		 0x16, 0x70, 0x28, 0x03, 0xB2, 0x58, 0x67, 0x8D,
		 0x16, 0x0A, 0xEA, 0x9A, 0x15, 0x95, 0x51, 0x5F,
		 0x16, 0x83, 0x07, 0x09, 0x20, 0xBF, 0x37, 0xAF,
		 0x16, 0xF7, 0x0A, 0x74, 0x3C, 0xA5, 0x52, 0xF1,
		 0x16, 0xE3, 0xF5, 0x58, 0x30, 0xE1, 0x17, 0xDE,
		 0x16, 0x98, 0xF1, 0x38, 0x7B, 0xF0, 0xAF, 0xBD,
		 0x16, 0x16, 0x59, 0x52, 0x99, 0x6C, 0x74, 0x70,
		 0x16, 0x48, 0x77, 0x14, 0xFF, 0x53, 0x41, 0x84,
		 0x16, 0xBC, 0xC5, 0x37, 0x2F, 0x71, 0x84, 0x3D,
		 0x16, 0xF5, 0x46, 0x7C, 0x63, 0xE0, 0x00, 0xA0,
		 0x16, 0x56, 0x07, 0xF7, 0x8C, 0x63, 0x57, 0xBE,
		 0x16, 0x54, 0x5C, 0xE1, 0xFD, 0xAC, 0x35, 0xFA,
		 0x16, 0xC2, 0xD5, 0xF2, 0x5A, 0xBE, 0x7C, 0x31,
		 0x16, 0x8E, 0xBD, 0xDB, 0xFE, 0x4D, 0x03, 0x6F,
		 0x16, 0x5E, 0xA6, 0x1F, 0x23, 0x2D, 0xCA, 0x68,
		 0x16, 0xF0, 0xC6, 0x14, 0xCC, 0xC3, 0x3E, 0xF0,
		 0x16, 0x21, 0xD4, 0x40, 0x2A, 0x72, 0xB6, 0x7E,
		 0x16, 0xE2, 0x85, 0xD6, 0x8A, 0xFB, 0x48, 0x51,
		 0x16, 0x27, 0x77, 0xE4, 0xCB, 0xCD, 0x2F, 0xF6,
		 0x16, 0xE1, 0xBC, 0xFE, 0xED, 0xA1, 0x14, 0x5F,
		 0x16, 0xE5, 0x32, 0xFC, 0xCF, 0xD9, 0xFB, 0x2F,
		 0x16, 0xE9, 0xAD, 0x7D, 0x2D, 0x68, 0xE7, 0x9A,
		 0x16, 0x15, 0x95, 0x6A, 0x4A, 0xE4, 0xAB, 0xE4,
		 0x16, 0xEB, 0xE0, 0x0D, 0x40, 0xBD, 0xEF, 0x8F,
		 0x16, 0xB9, 0x75, 0xB4, 0x39, 0x08, 0x6D, 0xC0,
		 0x16, 0x9F, 0x04, 0xFF, 0xCC, 0xDE, 0x13, 0x30,
		 0x16, 0x4E, 0xB6, 0xE4, 0xE0, 0xCB, 0x69, 0xE5,
		 0x16, 0xC6, 0x1C, 0x2F, 0x43, 0x6A, 0x63, 0x25,
		 0x16, 0x72, 0xD5, 0xDF, 0xBD, 0xDC, 0x0B, 0xE9,
		 0x16, 0x08, 0x9D, 0x3D, 0x26, 0x6F, 0xC3, 0x89,
		 0x16, 0xF8, 0x18, 0xAC, 0x42, 0xBF, 0x4E, 0x9D,
		 0x16, 0x5D, 0x28, 0xB0, 0x26, 0x41, 0x36, 0x76,
		 0x16, 0x8D, 0x86, 0x84, 0xFA, 0xD8, 0xD4, 0x67,
		 0x16, 0x58, 0x19, 0x69, 0x20, 0x2D, 0x35, 0xFE,
		 0x16, 0x09, 0xD9, 0x8C, 0xFD, 0xF9, 0x21, 0xA1,
		 0x16, 0x57, 0xDF, 0x17, 0xAE, 0x8E, 0xCB, 0xC9,
		 0x16, 0x7F, 0x26, 0x54, 0xDE, 0x10, 0x43, 0x72,
		 0x16, 0xDD, 0xBC, 0x18, 0xB9, 0x34, 0xF9, 0xAB,
		 0x16, 0x70, 0xF9, 0x74, 0x4D, 0x8E, 0x6D, 0x2A,
		 0x16, 0x33, 0x14, 0x06, 0xD0, 0x71, 0xE6, 0xAD,
		 0x16, 0xAA, 0xBE, 0x86, 0x2E, 0x9A, 0x8D, 0x87,
		 0x16, 0x88, 0xAF, 0x03, 0x9F, 0xCB, 0xF8, 0x78,
		 0x16, 0x9A, 0x66, 0x38, 0x09, 0xCD, 0xAE, 0x89,
		 0x16, 0xC2, 0xCC, 0xAF, 0x6A, 0x16, 0x14, 0x09,
		 0x16, 0x48, 0xAE, 0x9B, 0x55, 0xE4, 0x0F, 0xA5,
		 0x16, 0x86, 0xA1, 0x75, 0x7F, 0x7C, 0xEF, 0x0D,
		 0x16, 0xCB, 0x3A, 0xB3, 0x0D, 0x1F, 0x02, 0x00,
		 0x15, 0x00, 0x00, 0x0C, 0x80, 0x1F, 0xB4, 0xF4,
		 0x16, 0xE0, 0xA6, 0x41, 0xCC, 0x87, 0x00, 0x40,
		 0x16, 0x61, 0x43, 0xE7, 0xFC, 0xB4, 0x00, 0x00,
		 0x15, 0x00, 0x01, 0x24, 0xCA, 0x45, 0x34, 0x25,
		 0x16, 0x3C, 0x39, 0xFF, 0x09, 0x8C, 0x39, 0x85,
		 0x16, 0x5A, 0x5B, 0xCC, 0x27, 0x3C, 0xBD, 0x28,
		 0x16, 0x43, 0x86, 0x45, 0x17, 0x9A, 0x4E, 0x35,
		 0x16, 0x24, 0xA4, 0x23, 0xA2, 0xFD, 0xCA, 0x6C,
		 0x16, 0xD4, 0xFB, 0xBA, 0xE7, 0x41, 0xB3, 0xFB,
		 0x16, 0x7C, 0x55, 0x07, 0xB5, 0x6E, 0x3E, 0xB1,
		 0x16, 0x29, 0x72, 0xCC, 0x38, 0xEA, 0x27, 0x30,
		 0x16, 0x80, 0xB9, 0x8C, 0xB8, 0xEE, 0x54, 0xAB,
		 0x16, 0x3E, 0xDB, 0xDD, 0x06, 0xD0, 0x95, 0xEA,
		 0x16, 0x3E, 0x42, 0x88, 0x6B, 0xAE, 0x89, 0xC7,
		 0x16, 0xE8, 0x4C, 0x38, 0xB6, 0x93, 0xF6, 0xBE,
		 0x16, 0x4C, 0x20, 0x4A, 0x8C, 0xCE, 0x2B, 0x22,
		 0x16, 0xD2, 0x72, 0x49, 0x46, 0x18, 0x56, 0x80,
		 0x16, 0x70, 0x67, 0x5A, 0xFA, 0xC0, 0xCA, 0x6D,
		 0x16, 0x53, 0x21, 0xCA, 0xE3, 0x86, 0x68, 0x91,
		 0x16, 0xD3, 0x7C, 0xA9, 0xD5, 0xAD, 0x6A, 0x72,
		 0x16, 0xA1, 0xFE, 0x53, 0xE9, 0x40, 0x85, 0xEA,
		 0x16, 0x62, 0xA9, 0x63, 0x75, 0x3A, 0x2D, 0xEC,
		 0x16, 0x9B, 0xFE, 0x58, 0xD8, 0x73, 0x20, 0x52,
		 0x16, 0x10, 0x43, 0x5C, 0x2D, 0xB4, 0x21, 0xB9,
		 0x16, 0x96, 0x1F, 0x72, 0x6D, 0xBA, 0x42, 0xEA,
		 0x16, 0xF2, 0x85, 0xBE, 0x52, 0x12, 0xA7, 0xB1,
		 0x16, 0x3E, 0x2B, 0x89, 0xEF, 0x0F, 0x73, 0x05,
		 0x16, 0x7C, 0x99, 0xC3, 0xC5, 0x5F, 0x96, 0x53,
		 0x16, 0xF8, 0xAF, 0x9B, 0x7A, 0x49, 0xA0, 0x44,
		 0x16, 0x54, 0x60, 0x55, 0xF0, 0x10, 0x3A, 0x60,
		 0x16, 0x8D, 0x90, 0x50, 0x65, 0xAE, 0xF7, 0x79,
		 0x16, 0xDB, 0x2E, 0x08, 0xF9, 0xBB, 0xF2, 0xD2,
		 0x16, 0x78, 0xD0, 0x86, 0xB5, 0x94, 0xA1, 0x0E,
		 0x16, 0xB9, 0x81, 0x89, 0xB7, 0xF9, 0xC0, 0x43,
		 0x16, 0xE8, 0x8F, 0x38, 0x19, 0xDA, 0xED, 0x2F,
		 0x16, 0xA7, 0x5C, 0xDB, 0x01, 0xB3, 0x38, 0xCE,
		 0x16, 0xE6, 0xC3, 0xF2, 0xD5, 0xAA, 0x87, 0x9E,
		 0x16, 0x11, 0x6F, 0xD8, 0x05, 0xF0, 0x72, 0xAB,
		 0x16, 0xD9, 0xA1, 0x0F, 0xFF, 0x46, 0xE9, 0x4A,
		 0x16, 0x8C, 0x00, 0x93, 0xE9, 0x86, 0x6F, 0x6B,
		 0x16, 0x14, 0x70, 0xBE, 0xB1, 0xB8, 0x89, 0xC9,
		 0x16, 0xCC, 0x7D, 0x1A, 0x11, 0xD2, 0x79, 0xFB,
		 0x16, 0xD9, 0xD7, 0x24, 0x13, 0x94, 0x8F, 0x01,
		 0x16, 0x9C, 0x4B, 0x69, 0x33, 0x66, 0x01, 0x82,
		 0x16, 0x98, 0x88, 0xF8, 0x4C, 0x13, 0x31, 0x0F,
		 0x16, 0x58, 0xC1, 0x06, 0x11, 0x30, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0xB4, 0x89, 0x91, 0x34, 0x9B,
		 0x16, 0x89, 0xFC, 0x75, 0xCD, 0x11, 0xCA, 0x1A,
		 0x16, 0x6F, 0xFA, 0x71, 0xD6, 0x45, 0xE7, 0x0F,
		 0x16, 0xEB, 0x39, 0x09, 0xB3, 0x5A, 0x13, 0x1F,
		 0x16, 0xAA, 0x3A, 0x93, 0xCF, 0x8D, 0x6E, 0xCA,
		 0x16, 0xEC, 0x2C, 0x8E, 0xC5, 0x83, 0x1B, 0x5A,
		 0x16, 0xD6, 0xD1, 0x89, 0xAC, 0x02, 0x4F, 0xCB,
		 0x16, 0x0F, 0x25, 0x76, 0x96, 0xE0, 0x5D, 0x2C,
		 0x16, 0xFF, 0xA7, 0xEA, 0xEA, 0x92, 0xF1, 0x72,
		 0x16, 0x5B, 0xEE, 0x08, 0xD8, 0x84, 0x8A, 0xA9,
		 0x16, 0x59, 0xE3, 0x12, 0x77, 0xDA, 0xD6, 0xCA,
		 0x16, 0x4E, 0x36, 0x2D, 0x7C, 0xA4, 0x13, 0xD1,
		 0x16, 0xE8, 0x18, 0x31, 0x99, 0x02, 0x54, 0x0A,
		 0x16, 0xD0, 0x7A, 0x74, 0xA0, 0xAD, 0x2C, 0x83,
		 0x16, 0x4A, 0x6F, 0xF1, 0xB1, 0x50, 0x1B, 0x64,
		 0x16, 0x69, 0xE8, 0x84, 0x2F, 0x2C, 0xC8, 0xEB,
		 0x16, 0x95, 0x3D, 0xA5, 0x18, 0xC7, 0x4B, 0x82,
		 0x16, 0xFC, 0x88, 0xE1, 0xD3, 0x7B, 0x0E, 0xBE,
		 0x16, 0x10, 0xBA, 0x65, 0x02, 0x85, 0x9B, 0x46,
		 0x16, 0x9A, 0x37, 0x7A, 0x77, 0x4D, 0xC2, 0xC4,
		 0x16, 0x53, 0x30, 0x67, 0x91, 0x54, 0xF6, 0x3D,
		 0x16, 0x39, 0x44, 0x43, 0x42, 0x13, 0x2E, 0x09,
		 0x16, 0x29, 0xFD, 0x50, 0xA6, 0xDA, 0x94, 0xCE,
		 0x16, 0x86, 0x97, 0x10, 0x2B, 0x5C, 0x1C, 0x09,
		 0x16, 0xCD, 0x0F, 0xFC, 0x15, 0xDC, 0x54, 0x3B,
		 0x16, 0x53, 0xE1, 0x7C, 0xA7, 0xE1, 0xFD, 0x47,
		 0x16, 0xC2, 0xAF, 0x7E, 0xEA, 0x34, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x0C, 0x6F, 0xE6, 0x5C, 0x04,
		 0x16, 0x30, 0x6C, 0x84, 0xC7, 0x51, 0xE3, 0xB5,
		 0x16, 0x5F, 0x34, 0x9E, 0xDD, 0x05, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x0C, 0x1C, 0xD4, 0xBC, 0xFB,
		 0x16, 0xCD, 0x3A, 0xAE, 0xBC, 0x52, 0x92, 0x54,
		 0x16, 0x85, 0x2C, 0xED, 0x0F, 0xFB, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0xF8, 0x73, 0x10, 0x5D, 0xD8,
		 0x16, 0x1F, 0x06, 0xE0, 0xA1, 0x59, 0x26, 0xB4,
		 0x16, 0x39, 0x3F, 0xC1, 0x19, 0xF9, 0xD4, 0xBE,
		 0x16, 0x4F, 0xF4, 0x33, 0xEC, 0x3F, 0x3F, 0xFE,
		 0x16, 0x8F, 0x91, 0xD0, 0x44, 0xF2, 0x12, 0x78,
		 0x16, 0x90, 0x9E, 0x79, 0xA9, 0x27, 0xEE, 0x05,
		 0x16, 0xCB, 0x9F, 0x5A, 0x4B, 0x15, 0xDE, 0x67,
		 0x16, 0x39, 0x18, 0x1F, 0xE7, 0x3A, 0x0A, 0x41,
		 0x16, 0x98, 0xE7, 0xDE, 0xA7, 0x28, 0xA0, 0xD3,
		 0x16, 0x54, 0x66, 0x33, 0x79, 0xB5, 0x3A, 0x83,
		 0x16, 0x37, 0x5F, 0x25, 0x40, 0x70, 0x47, 0xB8,
		 0x16, 0x79, 0x6B, 0x62, 0x96, 0x3F, 0x48, 0xEA,
		 0x16, 0x9F, 0x6E, 0xCB, 0x35, 0xE1, 0x6F, 0x2D,
		 0x16, 0xC4, 0xC2, 0x4B, 0x9B, 0xA7, 0x4D, 0x05,
		 0x16, 0x79, 0x0E, 0x1C, 0xFE, 0x09, 0x5A, 0x9F,
		 0x16, 0x87, 0x22, 0x7A, 0x13, 0x1B, 0x9F, 0x99,
		 0x16, 0x4D, 0x05, 0xDB, 0x15, 0x73, 0xD8, 0x65,
		 0x16, 0xFE, 0x39, 0x5E, 0xA4, 0x43, 0x7B, 0x6C,
		 0x16, 0x79, 0xBD, 0x73, 0x91, 0x4C, 0x9B, 0x4C,
		 0x16, 0x94, 0x18, 0x87, 0xEA, 0x68, 0xA7, 0x44,
		 0x16, 0x9F, 0x5C, 0x36, 0x66, 0xFD, 0x41, 0x14,
		 0x16, 0x5E, 0xB1, 0x8E, 0xEB, 0x45, 0xDA, 0x77,
		 0x16, 0x0E, 0xE0, 0xEC, 0x5E, 0xF4, 0x0D, 0xBF,
		 0x16, 0x41, 0xC6, 0x48, 0xF0, 0x15, 0xD8, 0x60,
		 0x16, 0xF7, 0x40, 0x76, 0x23, 0x7B, 0x1C, 0xE5,
		 0x16, 0x59, 0x44, 0x50, 0x30, 0xCE, 0x06, 0x4E,
		 0x16, 0xC5, 0xA6, 0x70, 0xC3, 0x18, 0x17, 0xA2,
		 0x16, 0x37, 0xAC, 0xBF, 0x2C, 0x6F, 0xBC, 0x9B,
		 0x16, 0x3F, 0x58, 0x12, 0x11, 0x10, 0x39, 0x00,
		 0x16, 0x18, 0xDB, 0x7D, 0x0B, 0xD2, 0x2C, 0xEE,
		 0x16, 0x0A, 0xAF, 0x76, 0x94, 0x7A, 0xC1, 0x5C,
		 0x16, 0x21, 0xD2, 0x61, 0x9F, 0x1D, 0x7A, 0x96,
		 0x16, 0x95, 0xDF, 0xA4, 0x51, 0x81, 0xE6, 0x1B,
		 0x16, 0xD5, 0x7C, 0x36, 0x44, 0xF0, 0x60, 0xFF,
		 0x16, 0x3A, 0xF6, 0x32, 0xEC, 0x8F, 0xE0, 0x9A,
		 0x16, 0xC7, 0xE3, 0xBC, 0xAD, 0xEB, 0xA6, 0x94,
		 0x16, 0x71, 0x4B, 0x6D, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x38, 0x97, 0x4C, 0x36, 0xA2,
		 0x16, 0x75, 0xFF, 0xFB, 0x3F, 0xEB, 0x60, 0xE1,
		 0x16, 0x31, 0xB1, 0xBC, 0x32, 0x77, 0x6C, 0xBD,
		 0x16, 0x49, 0x93, 0x4B, 0xC2, 0x07, 0xBA, 0xF0,
		 0x16, 0x67, 0xFD, 0x68, 0xCA, 0xF5, 0xA4, 0xFF,
		 0x16, 0x2A, 0x5E, 0xE2, 0xBE, 0xB5, 0x69, 0xB2,
		 0x16, 0xA0, 0x63, 0x93, 0x1B, 0xB4, 0xBD, 0x46,
		 0x16, 0x12, 0xFA, 0xEE, 0x88, 0x5F, 0x46, 0xDF,
		 0x16, 0xB2, 0xBA, 0xE8, 0xBA, 0x54, 0x47, 0xEA,
		 0x15, 0x00, 0x00, 0x18, 0xFA, 0x08, 0x91, 0x77,
		 0x16, 0x9B, 0x1C, 0x87, 0x8B, 0x01, 0x70, 0x9E,
		 0x16, 0xC0, 0x05, 0x2B, 0xAA, 0xD7, 0xAF, 0x30,
		 0x16, 0xA8, 0x01, 0x8B, 0x28, 0xA0, 0xF5, 0x95,
		 0x16, 0x99, 0x32, 0x5F, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x08, 0xC4, 0xEF, 0x65, 0x45,
		 0x16, 0x3C, 0xC3, 0x6D, 0xEF, 0xB8, 0x34, 0x9D,
		 0x16, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x04, 0x66, 0x86, 0xF2, 0xBC,
		 0x16, 0x9D, 0x87, 0x97, 0xBE, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x08, 0xDD, 0x58, 0xDD, 0x53,
		 0x16, 0x0F, 0x7D, 0xEC, 0x93, 0x0B, 0xB9, 0x5B,
		 0x16, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x08, 0x76, 0x15, 0xDF, 0xC7,
		 0x16, 0x68, 0x2F, 0xA8, 0xF8, 0x4D, 0x33, 0x8F,
		 0x16, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x08, 0x84, 0xC3, 0xE8, 0xCB,
		 0x16, 0x9C, 0x71, 0x80, 0x09, 0xD7, 0x11, 0x63,
		 0x16, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x04, 0x0E, 0xC6, 0xF0, 0x50,
		 0x16, 0x9E, 0x0A, 0xA7, 0x99, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x14, 0x9A, 0x5A, 0xF9, 0xAA,
		 0x16, 0x5F, 0x06, 0xDF, 0x5C, 0x52, 0x37, 0x4B,
		 0x16, 0x39, 0x0C, 0x7E, 0x18, 0xC1, 0xAB, 0xD6,
		 0x16, 0x36, 0xF5, 0x78, 0xBD, 0x9F, 0x79, 0x00,
		 0x15, 0x00, 0x00, 0x0E, 0xF2, 0x33, 0x61, 0x0E,
		 0x16, 0xC3, 0x0B, 0x5A, 0x24, 0x02, 0x3F, 0x42,
		 0x16, 0x35, 0x3D, 0xA4, 0xAD, 0xC5, 0x30, 0x50,
		 0x15, 0x00, 0x00, 0x76, 0xE7, 0xE3, 0x45, 0x08,
		 0x16, 0x66, 0x18, 0x21, 0xEB, 0xDD, 0x14, 0x76,
		 0x16, 0xF8, 0xF1, 0x55, 0xE8, 0x3B, 0x9D, 0x8B,
		 0x16, 0x93, 0x92, 0xFF, 0xA7, 0x80, 0x34, 0x38,
		 0x16, 0xC2, 0xAD, 0x7C, 0xFF, 0xBD, 0x23, 0x2B,
		 0x16, 0x0B, 0x2C, 0x5F, 0xEA, 0xC0, 0x95, 0x00,
		 0x16, 0xFB, 0x8C, 0x37, 0x6B, 0x8A, 0x42, 0x91,
		 0x16, 0x3E, 0xEF, 0xD6, 0x51, 0x43, 0x21, 0x6F,
		 0x16, 0x80, 0x3E, 0xBD, 0xF2, 0xB3, 0x24, 0x07,
		 0x16, 0xA5, 0x92, 0x4A, 0x76, 0x51, 0x31, 0x72,
		 0x16, 0x35, 0x47, 0x25, 0xE7, 0xB9, 0xD0, 0xF4,
		 0x16, 0xC2, 0xDD, 0x52, 0x35, 0x3A, 0x23, 0xC4,
		 0x16, 0x16, 0xFA, 0x2A, 0x8D, 0x99, 0xD0, 0xB9,
		 0x16, 0x53, 0xC2, 0x12, 0x5C, 0x3F, 0xCE, 0x8D,
		 0x16, 0xDB, 0xD1, 0xC8, 0xD1, 0x59, 0xE5, 0x88,
		 0x16, 0xFF, 0x49, 0x11, 0xAB, 0xAB, 0x7B, 0xD1,
		 0x16, 0xF2, 0xB4, 0x37, 0x49, 0xA0, 0xB1, 0xFE,
		 0x16, 0xFE, 0x6C, 0x08, 0x76, 0x1D, 0x0B, 0x00,
		 0x15, 0x00, 0x00, 0x9A, 0xF4, 0xB1, 0x6D, 0xA0,
		 0x16, 0xF2, 0x20, 0xE4, 0x17, 0xA7, 0x4D, 0x85,
		 0x16, 0xB3, 0x8E, 0x7A, 0xCB, 0x87, 0x30, 0xAF,
		 0x16, 0x11, 0x90, 0x20, 0xA8, 0x19, 0xEA, 0x22,
		 0x16, 0x07, 0xFA, 0xC1, 0x4C, 0xE8, 0xFC, 0xA2,
		 0x16, 0x03, 0x8F, 0x2A, 0xC5, 0x36, 0xE4, 0xAF,
		 0x16, 0x66, 0x9B, 0xBA, 0x0A, 0xDD, 0x65, 0x90,
		 0x16, 0xDA, 0xD7, 0x27, 0x62, 0xD9, 0x19, 0x3B,
		 0x16, 0xAB, 0xF6, 0x66, 0x89, 0x2D, 0xA5, 0x30,
		 0x16, 0x70, 0xE9, 0xAA, 0xE2, 0xD9, 0xC1, 0x23,
		 0x16, 0x47, 0xFD, 0x9A, 0x25, 0x4A, 0x5F, 0x89,
		 0x16, 0x62, 0x97, 0x61, 0x4B, 0x91, 0xFC, 0x34,
		 0x16, 0x1B, 0xFC, 0x97, 0xB2, 0x7B, 0x87, 0xF4,
		 0x16, 0x54, 0xFC, 0xD6, 0x36, 0x48, 0xC2, 0x87,
		 0x16, 0x79, 0xA3, 0xC4, 0x8F, 0x42, 0xB1, 0x31,
		 0x16, 0x47, 0xDD, 0xE8, 0xD0, 0x0A, 0x71, 0x47,
		 0x16, 0x22, 0xF3, 0xF4, 0x9F, 0x28, 0x7A, 0x70,
		 0x16, 0x0C, 0xBC, 0x59, 0x30, 0xE0, 0xE4, 0x13,
		 0x16, 0x24, 0x65, 0xBD, 0x4C, 0x0E, 0x6D, 0x9E,
		 0x16, 0x4D, 0x15, 0x90, 0x19, 0x72, 0xC9, 0x28,
		 0x16, 0xB6, 0x95, 0x0E, 0x92, 0xF9, 0x79, 0x5C,
		 0x16, 0x64, 0xB9, 0xB9, 0x7B, 0xD7, 0xDC, 0xB4,
		 0x16, 0xB9, 0xB4, 0x96, 0x7F, 0x72, 0x55, 0xAE,
		 0x15, 0x00, 0x00, 0x1E, 0xB0, 0x02, 0x8E, 0x45,
		 0x16, 0xBD, 0xF0, 0xA5, 0x90, 0xB7, 0x30, 0x12,
		 0x16, 0x40, 0xB6, 0x40, 0x9C, 0xF1, 0x62, 0x63,
		 0x16, 0x72, 0x6D, 0xF0, 0xBA, 0x1A, 0xF6, 0xF0,
		 0x16, 0x40, 0x6A, 0x47, 0xA2, 0xFC, 0x9B, 0xD8,
		 0x16, 0x70, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x1A, 0xF5, 0x24, 0xF6, 0x4D,
		 0x16, 0x2F, 0x64, 0xFD, 0xF7, 0xC3, 0xFD, 0xA7,
		 0x16, 0x45, 0x5D, 0x94, 0x31, 0x8F, 0xD6, 0x9F,
		 0x16, 0x5D, 0x21, 0x66, 0x41, 0xD4, 0x39, 0x51,
		 0x16, 0xAF, 0x61, 0x8C, 0x1E, 0x9F, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x06, 0x11, 0xE9, 0x7A, 0x88,
		 0x16, 0x31, 0xE1, 0x26, 0xB6, 0x1C, 0x74, 0x00,
		 0x15, 0x00, 0x00, 0x06, 0xF5, 0x98, 0x35, 0x17,
		 0x16, 0x1A, 0xAB, 0x19, 0x3A, 0x8C, 0xC6, 0x00,
		 0x15, 0x00, 0x00, 0x0E, 0x7E, 0x14, 0xD0, 0x6E,
		 0x16, 0x44, 0x1C, 0x66, 0x61, 0x67, 0xF1, 0x8E,
		 0x16, 0x28, 0x72, 0x30, 0xD2, 0xBF, 0x7D, 0x6F,
		 0x15, 0x00, 0x00, 0x08, 0x17, 0x99, 0x62, 0xEE,
		 0x16, 0x78, 0x18, 0x54, 0x3A, 0xD5, 0x7F, 0x61,
		 0x16, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x10, 0x83, 0x3E, 0x2C, 0x92,
		 0x16, 0x4F, 0x5A, 0x98, 0x59, 0x97, 0xFB, 0x82,
		 0x16, 0x97, 0xAD, 0xC8, 0x73, 0xA2, 0x6C, 0x0D,
		 0x16, 0x06, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x0A, 0x69, 0xDA, 0xEB, 0x9E,
		 0x16, 0xF7, 0x67, 0x7F, 0xDE, 0xE8, 0x83, 0x0B,
		 0x16, 0x46, 0x5A, 0x3F, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x02, 0xB3, 0x60, 0x7F, 0xDC,
		 0x16, 0xA3, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x14, 0x8E, 0xCF, 0xA2, 0x65,
		 0x16, 0x72, 0xCE, 0x3E, 0x11, 0x39, 0x2D, 0x94,
		 0x16, 0x94, 0x47, 0x8E, 0xC7, 0x8C, 0x70, 0x6B,
		 0x16, 0x7C, 0x49, 0x8E, 0x3C, 0xD7, 0x4C, 0x00,
		 0x15, 0x00, 0x00, 0x02, 0xC8, 0x77, 0xA5, 0xFD,
		 0x16, 0xBA, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x0A, 0x1A, 0x1B, 0xD9, 0x4A,
		 0x16, 0x83, 0x03, 0xDF, 0xE2, 0x75, 0x6E, 0x28,
		 0x16, 0xD9, 0x63, 0x1F, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x02, 0x18, 0x27, 0x27, 0x8F,
		 0x16, 0x4B, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA9, 0x02}
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/patch_init.h';
      var-mem-desc-line = '23';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/patch_init.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'patch__ssb__compressed_8h';
  file-name = 'patch_ssb_compressed.h';
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'patch__ssb__compressed_8h_1aa53e4395accdd894bda0ffc72219f8cb';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
const PROGMEM uint16_t
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'cmd_0x15';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= {
   0,   128,  371,  374,  376,  378,  380,  383,  385,  388,  390,  392,  394, 396, 398, 400,
 402,   404,  593,  616,  650,  661,  757,  869,  872,  915,  942,  945,  948, 985, 994,
 999,  1002, 1004, 1007, 1010, 1013, 1015, 1019, 1022, 1040, 1063, 1069, 1074,
 1076, 1078, 1081, 1084, 1088, 1091, 1093, 1097, 1099, 1102, 1104}
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/patch_ssb_compressed.h';
      var-mem-desc-line = '54';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'patch__ssb__compressed_8h_1ac93dbb1ad937fa1d43e7f5589b2e997e';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
const PROGMEM byte
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'ssb_patch_content';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= {
 0x00, 0x03, 0x74, 0x0B, 0xD4, 0x84, 0x60,
 0x6F, 0xAE, 0x6C, 0xF9, 0xBB, 0x84, 0xA2,
 0x65, 0xB1, 0x4B, 0xF6, 0x72, 0x01, 0x1A,
 0x21, 0xE8, 0x5A, 0xD8, 0xD6, 0x04, 0x73,
 0x5E, 0x2C, 0x22, 0x6E, 0xC4, 0xE9, 0xB5,
 0x8B, 0x81, 0x9A, 0x1E, 0xE4, 0x87, 0xC9,
 0x9E, 0x7B, 0x17, 0x52, 0x6D, 0xAD, 0xE3,
 0xE5, 0x8B, 0x04, 0xA7, 0x2E, 0x99, 0x6A,
 0x32, 0xAA, 0x99, 0x97, 0xCC, 0xA6, 0x5B,
 0x15, 0x79, 0x56, 0x48, 0x01, 0x63, 0xB1,
 0xDF, 0x54, 0x27, 0x06, 0x57, 0x06, 0x53,
 0x8C, 0xA6, 0x27, 0xAA, 0x66, 0x89, 0x03,
 0x18, 0x51, 0x7E, 0xFB, 0x67, 0xD3, 0xCE,
 0xDD, 0x3F, 0xFD, 0x3D, 0x1F, 0x47, 0x84,
 0x01, 0xF3, 0x85, 0x6E, 0xF8, 0x3B, 0x79,
 0x2B, 0x0C, 0x90, 0x4B, 0x67, 0x46, 0x7D,
 0x54, 0x88, 0xFD, 0xD6, 0x12, 0xE5, 0xE7,
 0x48, 0xF2, 0x0E, 0xDB, 0x99, 0x4D, 0x71,
 0xA5, 0x40, 0x68, 0xD9, 0xC9, 0x59, 0x39,
 0xE4, 0x75, 0x20, 0x1C, 0xE9, 0xB1, 0xF5,
 0x01, 0x3C, 0x19, 0xBB, 0x60, 0xF7, 0xFA,
 0x6B, 0x1E, 0x68, 0x9F, 0x19, 0xB6, 0xED,
 0x14, 0x0F, 0x56, 0xBC, 0xC1, 0x34, 0xCB,
 0x00, 0x9D, 0x43, 0xD4, 0x0F, 0xF3, 0x62,
 0x9C, 0x9D, 0xF7, 0x8B, 0x9D, 0x53, 0x3A,
 0x8D, 0x2F, 0x3D, 0xDE, 0x3D, 0x38, 0x31,
 0x03, 0x9B, 0xC7, 0xC1, 0x59, 0xE9, 0xD1,
 0x75, 0x88, 0x8D, 0x36, 0x58, 0x86, 0x70,
 0x4E, 0x5B, 0x9E, 0xD0, 0xDB, 0xCB, 0xF7,
 0xEA, 0x1F, 0xDB, 0xA5, 0x3B, 0xB3, 0xBD,
 0x6B, 0xBC, 0xF3, 0x70, 0x65, 0xD5, 0x17,
 0x0F, 0x64, 0x15, 0x24, 0x20, 0xD5, 0xB8,
 0x7B, 0x0D, 0x27, 0x29, 0x85, 0x88, 0x1F,
 0x58, 0x22, 0x57, 0x4F, 0x09, 0xC0, 0x4D,
 0xD6, 0xE4, 0xC6, 0xB5, 0x3A, 0x37, 0x33,
 0x27, 0xBB, 0x6A, 0x14, 0x69, 0x03, 0x1B,
 0xED, 0xA8, 0xC3, 0x43, 0xE8, 0xEA, 0xDE,
 0x41, 0x06, 0x25, 0xC5, 0xC8, 0x3C, 0xBF,
 0x32, 0xB2, 0xA7, 0xDD, 0x22, 0xC2, 0xE9,
 0xCA, 0x84, 0xF2, 0xC0, 0x26, 0x7C, 0x78,
 0x01, 0xF7, 0xD5, 0xC6, 0x05, 0x33, 0xE4,
 0xC2, 0x78, 0xEC, 0x1B, 0xFD, 0xD2, 0x50,
 0x7D, 0x11, 0x29, 0x57, 0x99, 0xB0, 0xF1,
 0x55, 0x66, 0x74, 0xB4, 0x58, 0x23, 0xA0,
 0x6F, 0x2E, 0xD8, 0x9B, 0x08, 0xB3, 0x3E,
 0x53, 0xCF, 0x5E, 0xCC, 0x7A, 0xDF, 0x4E,
 0xED, 0x42, 0x16, 0x6A, 0x91, 0x88, 0x43,
 0x1B, 0x1D, 0x84, 0x5C, 0x52, 0x21, 0x66,
 0x58, 0x24, 0x36, 0x71, 0xC5, 0x6A, 0x0D,
 0x2C, 0x86, 0x9A, 0x23, 0x9D, 0xE0, 0x35,
 0x43, 0xC9, 0x7F, 0x41, 0xBD, 0x82, 0x99,
 0xED, 0x7A, 0x26, 0xB2, 0xD3, 0xA6, 0xCE,
 0x4F, 0x00, 0xE6, 0x87, 0xE3, 0xD7, 0x68,
 0x28, 0x86, 0xF7, 0xCE, 0xD2, 0xB3, 0xD3,
 0x1B, 0x04, 0x02, 0xB9, 0x78, 0xB3, 0xAD,
 0xE0, 0x3C, 0x53, 0xA6, 0x8A, 0x4A, 0x22,
 0xBE, 0x1F, 0xCE, 0xB1, 0x76, 0xF2, 0x2F,
 0x81, 0xA8, 0xC1, 0x78, 0x72, 0xB0, 0x15,
 0x65, 0x19, 0xE3, 0x32, 0xA7, 0x4D, 0x0C,
 0xD3, 0x00, 0xB9, 0xC3, 0x27, 0xBE, 0x74,
 0x4D, 0xD1, 0xE1, 0x0C, 0x36, 0xDD, 0x23,
 0xFB, 0xA7, 0x22, 0xD3, 0x44, 0xCA, 0xB3,
 0x08, 0x1B, 0xB4, 0x0D, 0x4B, 0xDF, 0x1A,
 0xA6, 0x90, 0x32, 0x92, 0x5C, 0x1A, 0xA7,
 0xCD, 0x85, 0x2E, 0x35, 0x11, 0x72, 0xF8,
 0x21, 0x35, 0x7D, 0x3F, 0xDB, 0x29, 0x8D,
 0x30, 0xB3, 0x4F, 0x45, 0x14, 0x77, 0xCF,
 0x99, 0x2F, 0xA3, 0x90, 0x81, 0xB0, 0xAE,
 0xE8, 0x45, 0xE6, 0x3A, 0xA9, 0xA2, 0x62,
 0xB7, 0xDB, 0xBE, 0x25, 0x39, 0xA5, 0xFC,
 0xEA, 0xC5, 0xBC, 0x3A, 0xEC, 0x90, 0xAE,
 0xA6, 0xFB, 0x12, 0xAA, 0xC7, 0x62, 0x22,
 0xAF, 0xA9, 0x84, 0xB9, 0x64, 0xB8, 0xFB,
 0x8D, 0xC1, 0x1C, 0xC3, 0xD0, 0x87, 0x6D,
 0x5C, 0xB4, 0xFE, 0x3F, 0xA4, 0xB8, 0xD8,
 0x89, 0xF4, 0x01, 0x59, 0xBB, 0x04, 0xA5,
 0x43, 0x44, 0x1A, 0xCB, 0x41, 0x30, 0xF7,
 0x5B, 0x9A, 0xEE, 0x28, 0xF4, 0x4C, 0x71,
 0x99, 0xCA, 0x4B, 0x7F, 0x2A, 0x13, 0xF0,
 0x4B, 0x54, 0xB3, 0xFC, 0x90, 0xED, 0xBE,
 0x48, 0x3F, 0xF1, 0x5E, 0x0D, 0xA1, 0xBB,
 0x1E, 0x59, 0x16, 0x15, 0xF0, 0x4B, 0x50,
 0x4C, 0x96, 0x86, 0x1B, 0xA9, 0xCC, 0xC2,
 0x69, 0x4E, 0x10, 0x03, 0xF0, 0xE9, 0x53,
 0xE5, 0xE2, 0xBB, 0x45, 0xE2, 0x8D, 0xAE,
 0x40, 0x71, 0x08, 0x86, 0x4D, 0x08, 0xF4,
 0x96, 0x90, 0x58, 0x53, 0x40, 0xA5, 0x8B,
 0x5B, 0x3C, 0xAD, 0x47, 0xB5, 0xD7, 0xE2,
 0x6A, 0x13, 0x78, 0xD4, 0xDC, 0xC9, 0xEC,
 0x0E, 0x93, 0xF0, 0xC0, 0x1D, 0x95, 0x36,
 0x76, 0xA4, 0x53, 0x85, 0xC9, 0xAC, 0xE4,
 0x71, 0x8D, 0xAF, 0x68, 0x61, 0x20, 0x9D,
 0xFF, 0x45, 0x35, 0x6E, 0x04, 0xD8, 0x27,
 0x32, 0xC3, 0xDA, 0xEE, 0xA2, 0x66, 0x04,
 0xB7, 0x21, 0x06, 0x52, 0x7F, 0x39, 0x8F,
 0xFD, 0xEE, 0x90, 0x74, 0xB6, 0x4F, 0xB6,
 0x24, 0x0E, 0x12, 0x48, 0xF0, 0xB2, 0x30,
 0xF2, 0xA5, 0x4C, 0x91, 0x52, 0xE3, 0xC6,
 0x48, 0x7B, 0x38, 0x96, 0x23, 0x9E, 0xD7,
 0x1B, 0x95, 0x15, 0x3A, 0xC9, 0x8B, 0x6F,
 0x63, 0x7D, 0x1D, 0xC9, 0xEA, 0x96, 0xE6,
 0x01, 0xD7, 0x85, 0xC0, 0xEA, 0x3D, 0xCA,
 0xD3, 0xB7, 0xFB, 0x07, 0x54, 0x3A, 0x00,
 0x31, 0x3D, 0x74, 0xE4, 0x12, 0x5B, 0xA2,
 0x38, 0x33, 0x5B, 0xBF, 0x1D, 0xDC, 0x4E,
 0xE8, 0x85, 0x10, 0x77, 0xAB, 0xEA, 0x65,
 0x79, 0xB0, 0xAA, 0x30, 0x61, 0xC6, 0xF6,
 0x3B, 0xCC, 0x95, 0xFC, 0x83, 0x7F, 0x8C,
 0x7B, 0xB5, 0x52, 0x05, 0xEB, 0xF7, 0x21,
 0xDE, 0x89, 0xB6, 0x6D, 0xEE, 0x31, 0x77,
 0x13, 0xAA, 0x93, 0x55, 0x96, 0x08, 0x6E,
 0x1C, 0x82, 0xB5, 0x7E, 0x95, 0xB9, 0x94,
 0xDD, 0x68, 0x42, 0x5C, 0x3A, 0x00, 0xC3,
 0x7B, 0x6F, 0x60, 0x6A, 0x2C, 0x07, 0xD7,
 0x6C, 0x82, 0xFB, 0xB2, 0x81, 0x25, 0x69,
 0xD6, 0x72, 0x0A, 0xD2, 0xE8, 0x50, 0x05,
 0x88, 0x49, 0x1B, 0x63, 0x72, 0x99, 0x6C,
 0xE3, 0x7A, 0xAE, 0xB0, 0x1B, 0x9E, 0xD4,
 0x25, 0x54, 0x25, 0x8A, 0x90, 0x17, 0x97,
 0xDF, 0x39, 0xB8, 0x7C, 0xEA, 0xF0, 0x82,
 0xDD, 0x25, 0xD2, 0xAD, 0xE7, 0xF6, 0x36,
 0x23, 0x84, 0xA9, 0xC9, 0x6A, 0x53, 0xF4,
 0x82, 0x2C, 0x1D, 0xEA, 0x06, 0xC6, 0x4F,
 0x70, 0x54, 0x37, 0x80, 0x2A, 0x6B, 0x63,
 0xDB, 0xCC, 0x86, 0xE6, 0x8C, 0x7F, 0x27,
 0x8C, 0x72, 0x54, 0x73, 0x9E, 0x1B, 0xD6,
 0x4C, 0xFA, 0x05, 0x82, 0x80, 0xD7, 0xB7,
 0x11, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x06, 0x98, 0x69, 0x15, 0x1C, 0xFC,
 0x86, 0x87, 0x74, 0x84, 0x5B, 0xD4, 0x0F,
 0xDB, 0xD7, 0x27, 0xC5, 0x4A, 0xB2, 0x8F,
 0x29, 0x7A, 0x4A, 0x23, 0x0A, 0xB8, 0x07,
 0xD0, 0x34, 0x70, 0x81, 0x8E, 0x53, 0xEF,
 0x43, 0x16, 0x3F, 0xA8, 0xA7, 0x9E, 0x5A,
 0x77, 0xC0, 0x91, 0xB7, 0x89, 0x15, 0x52,
 0x48, 0xC0, 0xB7, 0x62, 0xAB, 0xE1, 0x74,
 0x64, 0x10, 0xAA, 0x09, 0x6B, 0x97, 0x74,
 0x21, 0x79, 0x35, 0xA1, 0x97, 0x25, 0xFC,
 0x78, 0xC1, 0xEC, 0x6E, 0x87, 0x77, 0x40,
 0x87, 0x1A, 0x74, 0x82, 0x81, 0x56, 0xDD,
 0xEC, 0x37, 0xAD, 0xAF, 0x03, 0x31, 0xAC,
 0x47, 0x85, 0x74, 0xC0, 0x2A, 0x45, 0x9D,
 0xF4, 0x12, 0x0C, 0xF9, 0x86, 0xB0, 0x4A,
 0x16, 0xD8, 0x11, 0x6C, 0x46, 0xC4, 0x4A,
 0x67, 0x98, 0x8B, 0x1B, 0x42, 0xC2, 0xBE,
 0xBB, 0x0E, 0x48, 0x84, 0xF7, 0x08, 0xA6,
 0xC3, 0x8F, 0x8E, 0x8D, 0xAB, 0xC2, 0x9B,
 0x5D, 0x5C, 0x60, 0x28, 0x57, 0x8F, 0x0E,
 0xAD, 0x2E, 0xC1, 0x5E, 0x95, 0x29, 0x9A,
 0xF4, 0x8A, 0x27, 0xD4, 0x41, 0xBB, 0x4A,
 0xAC, 0x5D, 0xB2, 0x93, 0x26, 0xFD, 0x87,
 0x81, 0x3F, 0x27, 0x35, 0xA6, 0x42, 0x2C,
 0x15, 0x38, 0xAD, 0xF8, 0x02, 0x6F, 0x94,
 0xDA, 0x08, 0xEE, 0x19, 0xD8, 0x90, 0xFA,
 0x89, 0xC3, 0xAD, 0x89, 0xFE, 0xC6, 0x02,
 0x46, 0x81, 0x1D, 0x0C, 0x8D, 0x78, 0x2F,
 0xEE, 0xD3, 0xED, 0x6C, 0x7B, 0x95, 0x49,
 0x56, 0x87, 0xF4, 0xE2, 0x63, 0xDA, 0x39,
 0xCE, 0x68, 0x16, 0x18, 0xED, 0x98, 0xEE,
 0x86, 0xF3, 0xB3, 0xC1, 0x12, 0x1A, 0x51,
 0x9B, 0x57, 0x1D, 0x19, 0x9E, 0x98, 0x7E,
 0xD2, 0xFD, 0x3D, 0x2B, 0x59, 0x15, 0x46,
 0x74, 0x57, 0x79, 0x14, 0x81, 0x71, 0x89,
 0xD9, 0x22, 0xDD, 0x92, 0x10, 0xD9, 0x89,
 0x91, 0xDF, 0x67, 0x00, 0x6E, 0x53, 0xAF,
 0xDA, 0xB5, 0x28, 0x30, 0x1E, 0x47, 0xE6,
 0xB7, 0x05, 0x2D, 0x22, 0xCF, 0x7F, 0x6A,
 0xCD, 0x88, 0x90, 0x6B, 0x8C, 0x16, 0x36,
 0x88, 0x07, 0xA1, 0xB7, 0xAF, 0xF3, 0x31,
 0xC4, 0xDB, 0x76, 0x8B, 0x96, 0x9E, 0xF0,
 0x17, 0xA7, 0x3F, 0x84, 0x78, 0x91, 0xA8,
 0xCD, 0x3F, 0x8F, 0xA5, 0xDD, 0x52, 0x14,
 0xF9, 0x39, 0x5D, 0x0B, 0x56, 0x8E, 0x1C,
 0x5A, 0x5B, 0x89, 0xEE, 0x80, 0x9E, 0x33,
 0xBD, 0xB1, 0x45, 0x15, 0x42, 0x34, 0x59,
 0x78, 0x20, 0xFC, 0x2D, 0xDB, 0xC9, 0x2E,
 0x0F, 0x35, 0x26, 0xCF, 0x23, 0x9B, 0x3E,
 0x1D, 0x9F, 0x0F, 0x26, 0x0E, 0xB7, 0xB5,
 0x4E, 0xAC, 0xA2, 0x86, 0xD5, 0xDA, 0x36,
 0x04, 0x5A, 0x73, 0x46, 0x6A, 0x88, 0xC5,
 0x2A, 0xA0, 0x83, 0xE8, 0x8B, 0x5F, 0x3C,
 0xAF, 0x6A, 0x44, 0x4E, 0x75, 0x9B, 0x8F,
 0x93, 0x37, 0x35, 0x38, 0xBD, 0x02, 0x9A,
 0x1D, 0x84, 0x29, 0x64, 0x25, 0x97, 0xE0,
 0x7C, 0x2A, 0xB6, 0xCB, 0xC1, 0x66, 0x51,
 0x3C, 0xBC, 0x3B, 0xF3, 0x55, 0x2B, 0xB7,
 0xBD, 0x81, 0xEC, 0xF3, 0x49, 0xD5, 0xF8,
 0x03, 0xE0, 0xBD, 0xC6, 0x0C, 0xEE, 0xC0,
 0x19, 0x08, 0xFB, 0x4F, 0x8C, 0x94, 0x08,
 0x0E, 0xA5, 0x30, 0x37, 0xF0, 0xB8, 0x18,
 0x93, 0x73, 0x00, 0xBB, 0x52, 0x52, 0xB4,
 0x98, 0x0D, 0x4B, 0x45, 0xB9, 0x89, 0x0A,
 0x34, 0xE9, 0x1C, 0x24, 0x5A, 0x8F, 0xA8,
 0x9D, 0xC2, 0xD9, 0x27, 0xA9, 0xEE, 0xBF,
 0xC0, 0x80, 0x90, 0xBC, 0x2A, 0x93, 0x43,
 0xFB, 0x0A, 0xB3, 0x96, 0xD1, 0xAE, 0x13,
 0x41, 0x01, 0x68, 0xB9, 0x2C, 0x53, 0x53,
 0x7C, 0x00, 0xA5, 0x84, 0x41, 0xD6, 0x98,
 0x88, 0x98, 0xFE, 0xDE, 0xF7, 0xE2, 0x37,
 0x43, 0x62, 0x0E, 0x93, 0x83, 0xEE, 0x03,
 0x0A, 0x8D, 0xCA, 0x87, 0x59, 0x36, 0x6F,
 0x61, 0xF7, 0xF4, 0xD6, 0xAB, 0x8B, 0x0F,
 0x9C, 0x83, 0x96, 0xA4, 0x6C, 0x46, 0x43,
 0x80, 0x6B, 0xEA, 0x50, 0xDC, 0xD8, 0xCE,
 0xD4, 0xF4, 0xAE, 0x5B, 0xC6, 0x01, 0x43,
 0x85, 0x71, 0x8D, 0x0C, 0x39, 0x5E, 0xE4,
 0x3B, 0x2B, 0xC4, 0x88, 0xB2, 0xC5, 0x54,
 0x96, 0x0E, 0x87, 0x9A, 0x50, 0x93, 0xD6,
 0x9C, 0x91, 0xCA, 0x09, 0x64, 0x8B, 0x23,
 0xC4, 0x29, 0x44, 0x1A, 0x67, 0xE1, 0xDA,
 0xC7, 0x1B, 0x25, 0x17, 0x02, 0x2C, 0x8F,
 0x2A, 0x13, 0x3A, 0xCF, 0xD6, 0x65, 0x31,
 0x2B, 0x10, 0xF5, 0xB5, 0x96, 0xDF, 0x01,
 0x99, 0x7B, 0xAD, 0xD6, 0xB4, 0xC0, 0x35,
 0xA3, 0x48, 0xE3, 0xB0, 0x9E, 0xFE, 0x33,
 0x10, 0x1A, 0x09, 0xAE, 0x3C, 0x0A, 0xA1,
 0x72, 0x8F, 0x00, 0x51, 0xE1, 0x78, 0x23,
 0xF5, 0xE2, 0xBF, 0xA6, 0x46, 0x28, 0xB3,
 0x4B, 0x24, 0xB1, 0xA1, 0xDE, 0xB1, 0xC4,
 0x48, 0x6F, 0xED, 0x5A, 0xD4, 0x61, 0xF0,
 0xDB, 0xE1, 0x08, 0x5C, 0x64, 0xC0, 0xCA,
 0xE9, 0xA9, 0xDE, 0xDE, 0xEC, 0xC0, 0x68,
 0x5B, 0x6D, 0xBD, 0x43, 0x82, 0x8C, 0xCA,
 0x69, 0xB1, 0xA9, 0xC8, 0x71, 0x0D, 0x5D,
 0x6D, 0xA5, 0xAB, 0x1A, 0x67, 0x94, 0xEE,
 0x05, 0x93, 0xE3, 0x3F, 0xE8, 0x1A, 0xE6,
 0x0F, 0x7F, 0x79, 0xF2, 0xCB, 0xC5, 0x37,
 0x57, 0xDF, 0xFC, 0x4F, 0xB4, 0x60, 0xC7,
 0x97, 0x3C, 0x61, 0xB0, 0x0C, 0x46, 0x64,
 0xF4, 0x43, 0x92, 0xD2, 0xA5, 0xF0, 0xF3,
 0xB7, 0xDF, 0xAB, 0x20, 0xB1, 0xF5, 0x30,
 0x2A, 0xB3, 0xDC, 0x4B, 0x39, 0xB7, 0x85,
 0x3E, 0x1E, 0x1B, 0x94, 0x8C, 0x26, 0x28,
 0x80, 0x45, 0xD6, 0x01, 0x36, 0xD0, 0xEC,
 0x93, 0x46, 0x88, 0xD3, 0xD5, 0x89, 0x5D,
 0x7A, 0x82, 0x21, 0x3E, 0xC2, 0x40, 0xE3,
 0xB4, 0xDE, 0xF5, 0xA5, 0x69, 0xD5, 0x69,
 0x49, 0x5C, 0x89, 0xCD, 0xAE, 0x13, 0x70,
 0x70, 0xED, 0x69, 0x0C, 0xEC, 0xC6, 0xFE,
 0x75, 0xEB, 0x4E, 0xD6, 0xB3, 0xC8, 0x60,
 0xFB, 0x34, 0x1E, 0xF8, 0x64, 0x92, 0xD9,
 0x29, 0xA8, 0x13, 0x38, 0x3D, 0x79, 0xC4,
 0xBF, 0x21, 0x37, 0x9D, 0xE3, 0x4F, 0x21,
 0xE5, 0x3F, 0x2C, 0x5C, 0x5F, 0x41, 0xFF,
 0x14, 0x87, 0x91, 0xE0, 0x82, 0x04, 0x0B,
 0x1E, 0x55, 0x53, 0xDC, 0x56, 0x40, 0xA4,
 0x35, 0x78, 0xE2, 0x9B, 0x49, 0x22, 0x2E,
 0x09, 0xCD, 0x1F, 0x6F, 0x94, 0x83, 0xEE,
 0xEA, 0x8B, 0xC4, 0xC2, 0x10, 0xE0, 0x80,
 0xD9, 0xA5, 0x5F, 0x53, 0x34, 0x9C, 0x8C,
 0xEA, 0x95, 0x64, 0x87, 0x94, 0xD6, 0x32,
 0x1C, 0xEB, 0x93, 0xBF, 0xE3, 0x55, 0x83,
 0xC2, 0xF6, 0xFC, 0xC8, 0x85, 0xB2, 0x94,
 0x5C, 0x42, 0x5F, 0x6B, 0x8E, 0x3B, 0x97,
 0x79, 0x74, 0x7E, 0xE3, 0x5C, 0xC2, 0x63,
 0x1A, 0x22, 0xB1, 0x7F, 0x94, 0xCB, 0xE7,
 0xB7, 0xFF, 0x0E, 0x37, 0x95, 0xAF, 0x10,
 0x53, 0x17, 0x88, 0x12, 0x72, 0xDD, 0xCB,
 0xAB, 0x4B, 0x6B, 0x68, 0x24, 0xAC, 0xC9,
 0x5C, 0x72, 0x09, 0x4F, 0xF1, 0xFB, 0x1D,
 0xE7, 0xA2, 0x30, 0xE9, 0x20, 0x4B, 0xDA,
 0x70, 0x7C, 0x9E, 0xE2, 0x34, 0xEB, 0x6A,
 0x35, 0xC2, 0x33, 0xD7, 0x9D, 0x07, 0xB1,
 0xEF, 0xF6, 0x75, 0xF5, 0xFD, 0xAD, 0xC7,
 0x4B, 0xD0, 0xB7, 0xDD, 0xAE, 0x1E, 0x8D,
 0x1E, 0xC0, 0x39, 0x9C, 0xA7, 0x1C, 0xC5,
 0xCC, 0x39, 0x50, 0xC6, 0x6B, 0xC6, 0xDA,
 0x37, 0xC7, 0xE1, 0x20, 0xEB, 0x74, 0xA5,
 0x3D, 0xC0, 0x08, 0xFA, 0xC2, 0xDF, 0xF2,
 0x9E, 0x43, 0x2B, 0xF0, 0x77, 0x50, 0x49,
 0x8C, 0xC3, 0x2F, 0x68, 0xF3, 0x2A, 0x9B,
 0x83, 0x1A, 0xDC, 0x05, 0xD8, 0xB7, 0x7C,
 0x3C, 0x61, 0x11, 0x76, 0xEC, 0x2D, 0xFE,
 0x86, 0x08, 0x87, 0x15, 0xA3, 0xC0, 0x1C,
 0xB4, 0x6A, 0x8D, 0x9E, 0xBF, 0x9A, 0xD5,
 0xC8, 0x5B, 0x05, 0x18, 0x10, 0x15, 0xFB,
 0xC6, 0x3C, 0xEE, 0xC5, 0x52, 0x4B, 0x31,
 0x36, 0x07, 0xB9, 0x4C, 0x81, 0xEA, 0x83,
 0xD7, 0x82, 0xFE, 0xFC, 0x43, 0x59, 0x4E,
 0x20, 0xBD, 0xD3, 0x65, 0xCF, 0x1F, 0x5C,
 0x71, 0x1F, 0xBF, 0x26, 0xEC, 0x44, 0xEB,
 0x01, 0x74, 0x82, 0x3C, 0x8E, 0x60, 0xDF,
 0x47, 0x90, 0x31, 0x17, 0x7E, 0x16, 0xC0,
 0xEC, 0x1E, 0xC3, 0x3A, 0x7A, 0x59, 0x21,
 0xA2, 0x9B, 0x8E, 0x87, 0x25, 0xD3, 0xFE,
 0x85, 0xDD, 0x6D, 0xE6, 0xD8, 0xCA, 0x74,
 0xBA, 0xDB, 0x42, 0x30, 0x96, 0x3D, 0x86,
 0x22, 0x86, 0x6F, 0xDE, 0x37, 0x1A, 0x93,
 0x2F, 0x03, 0x2E, 0xE1, 0x6E, 0x16, 0x62,
 0xC1, 0xE1, 0x2D, 0xFE, 0xCB, 0xA8, 0xDF,
 0x64, 0x05, 0xEF, 0x23, 0xBC, 0x71, 0x61,
 0x7B, 0x1B, 0x60, 0x22, 0x27, 0xBD, 0xC6,
 0xA3, 0x72, 0x07, 0xAA, 0x09, 0xB0, 0x52,
 0xF2, 0x19, 0x15, 0x4D, 0xBE, 0xAF, 0x26,
 0x3B, 0x4D, 0x62, 0xA6, 0x3C, 0x41, 0x07,
 0x7A, 0x34, 0x25, 0x3C, 0xD6, 0xCD, 0xB6,
 0x55, 0x47, 0x87, 0x1E, 0xCB, 0xCF, 0xCE,
 0xD2, 0x0D, 0x95, 0xC0, 0xD8, 0x72, 0xA6,
 0xE0, 0x33, 0x24, 0x26, 0x51, 0x7E, 0x71,
 0xC7, 0x53, 0x3F, 0xD4, 0x67, 0x73, 0x52,
 0xCB, 0x78, 0x5A, 0x00, 0x11, 0x15, 0x71,
 0x5F, 0x8D, 0x3C, 0xCF, 0x40, 0xCD, 0xD9,
 0x74, 0x30, 0xD9, 0xA1, 0x3F, 0xC6, 0x58,
 0xBC, 0xBE, 0x78, 0x18, 0x31, 0x9A, 0x39,
 0x60, 0xBB, 0x8D, 0x7B, 0x34, 0x95, 0xA5,
 0xF1, 0x54, 0x3B, 0xB9, 0x85, 0x99, 0xAF,
 0xC4, 0x45, 0xEB, 0x64, 0xA7, 0x6E, 0x59,
 0x60, 0xEB, 0x1E, 0x7A, 0xFB, 0xFD, 0x92,
 0x43, 0x23, 0xF1, 0x27, 0xAC, 0x66, 0x12,
 0x66, 0x28, 0x8A, 0x5C, 0xF6, 0xC6, 0x3F,
 0x76, 0x04, 0xE8, 0x09, 0x27, 0xED, 0x05,
 0xAA, 0x26, 0xE5, 0xB4, 0xAD, 0x40, 0xBA,
 0xF7, 0xF4, 0x84, 0xCB, 0x7F, 0x07, 0x10,
 0x8D, 0xB6, 0xC7, 0xD4, 0x77, 0xEA, 0xBA,
 0x96, 0x2A, 0x98, 0xF0, 0x56, 0xD7, 0xFF,
 0x50, 0x4D, 0x59, 0x79, 0x3D, 0x41, 0xE0,
 0xFA, 0xA9, 0x9D, 0x3E, 0xA6, 0xD9, 0x79,
 0xC8, 0x0D, 0xD1, 0x56, 0xC5, 0xAD, 0xD7,
 0xFB, 0x70, 0x3C, 0xBD, 0xF3, 0xE9, 0x5D,
 0x1C, 0x53, 0x93, 0x33, 0x1D, 0xF8, 0x1B,
 0xEE, 0x9F, 0xB7, 0x50, 0xAC, 0x8F, 0x48,
 0x59, 0x61, 0xC9, 0x85, 0x9E, 0xC8, 0xB0,
 0xD2, 0x74, 0x39, 0xDF, 0x33, 0xF5, 0x28,
 0xE0, 0x63, 0x11, 0xA7, 0xC4, 0x05, 0xBD,
 0x3A, 0xD9, 0x34, 0xCA, 0xF9, 0xAA, 0xE2,
 0x00, 0xE6, 0xE6, 0x38, 0x57, 0x3E, 0xEC,
 0x19, 0x7C, 0x0D, 0x27, 0x45, 0xC5, 0x52,
 0xC4, 0xFF, 0xF4, 0x69, 0xC5, 0xF5, 0x73,
 0x73, 0x4F, 0xE3, 0x07, 0xC7, 0xCF, 0x38,
 0x23, 0x5B, 0x9C, 0x99, 0xA2, 0x6A, 0x72,
 0xB0, 0x35, 0x39, 0xC1, 0x0A, 0xC7, 0x1C,
 0x1A, 0x30, 0x60, 0x18, 0x1D, 0x2B, 0xF0,
 0xC8, 0xF1, 0x79, 0xA3, 0x94, 0xE3, 0x36,
 0x35, 0x93, 0x69, 0x05, 0x91, 0x07, 0x12,
 0x60, 0x44, 0xFD, 0xB6, 0xC6, 0xFF, 0xE0,
 0xCF, 0xA2, 0xCF, 0xC2, 0xA3, 0x58, 0xAC,
 0x32, 0xE3, 0x2E, 0xEC, 0x0D, 0x9D, 0x1B,
 0xFB, 0x05, 0x40, 0xBA, 0x67, 0x8E, 0xCB,
 0x38, 0xD7, 0x60, 0x9C, 0xFE, 0x9E, 0xA1,
 0x70, 0xCC, 0x40, 0x72, 0x8C, 0x8C, 0x50,
 0x71, 0x85, 0xDD, 0x84, 0x92, 0x5C, 0xEE,
 0x44, 0xB6, 0xE0, 0x80, 0x15, 0x32, 0xDD,
 0x1B, 0x4B, 0x8C, 0x6E, 0x8E, 0x39, 0x97,
 0xA5, 0xAF, 0xC6, 0xF4, 0x29, 0x85, 0xD3,
 0x85, 0x93, 0x85, 0xC8, 0x54, 0xE4, 0x59,
 0x1D, 0x4E, 0xA0, 0xFE, 0xC5, 0x07, 0xC1,
 0xF7, 0x32, 0x52, 0xF9, 0x4D, 0x45, 0x85,
 0xFC, 0xA0, 0xFA, 0x37, 0xB5, 0x9D, 0x47,
 0xE8, 0x52, 0x23, 0x8D, 0x92, 0x87, 0x43,
 0xB4, 0xB8, 0x4F, 0x95, 0x1B, 0x1E, 0x4F,
 0xE5, 0x45, 0xBF, 0xCE, 0xC8, 0x0C, 0xB2,
 0x7D, 0xE7, 0xD9, 0x2E, 0x88, 0xB7, 0x2A,
 0x61, 0xE1, 0x2D, 0xC4, 0x21, 0x2E, 0xB8,
 0x4D, 0xFD, 0x21, 0x87, 0x30, 0x25, 0x11,
 0xEC, 0x1F, 0x29, 0x94, 0x31, 0xD2, 0x92,
 0x85, 0x38, 0x17, 0xDA, 0x63, 0x4D, 0x8C,
 0xB4, 0x06, 0x55, 0x64, 0xB7, 0x6C, 0xFC,
 0xC2, 0x8D, 0x5D, 0x97, 0x86, 0x09, 0xD3,
 0x43, 0x69, 0xE8, 0x35, 0x77, 0xCC, 0xAF,
 0x91, 0x36, 0x3C, 0x7C, 0xA3, 0x6E, 0x4E,
 0x4A, 0xA2, 0xC9, 0x41, 0x50, 0xEA, 0xAB,
 0xDF, 0x87, 0x04, 0x70, 0x4F, 0x16, 0xF5,
 0xA0, 0x38, 0xF5, 0x60, 0x16, 0xCD, 0x0C,
 0xE5, 0xC7, 0xE3, 0xAD, 0x00, 0x12, 0x6B,
 0x12, 0x85, 0x3C, 0x5C, 0x7F, 0x76, 0xED,
 0x49, 0xF2, 0x9D, 0x8F, 0xDF, 0xAB, 0xE1,
 0xDD, 0x87, 0x01, 0xED, 0x2C, 0x1B, 0x4B,
 0x55, 0x11, 0x7F, 0xC3, 0x92, 0xD3, 0x91,
 0xC1, 0xD8, 0xA7, 0x37, 0xC7, 0xE5, 0x5B,
 0x48, 0x2B, 0xED, 0x31, 0xDE, 0xCE, 0xFB,
 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x08, 0xE3, 0x51, 0x84, 0x00,
 0x0B, 0x4D, 0x26, 0x73, 0x11, 0x8B, 0x1E,
 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x04, 0x04, 0x73, 0xE0, 0x72,
 0xFF, 0xE6, 0x59, 0xC9, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x04, 0x48, 0xBF, 0xAB, 0xF3,
 0x99, 0x87, 0x7C, 0x07, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x04, 0xFB, 0x33, 0xB1, 0x63,
 0x61, 0x61, 0x12, 0xAD, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x08, 0xAA, 0x30, 0xAC, 0x17,
 0x4D, 0x30, 0x86, 0xBF, 0x67, 0x13, 0xF1,
 0xA7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x04, 0x1B, 0x48, 0x42, 0x23,
 0x84, 0xBB, 0x7F, 0xB4, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x08, 0xA6, 0x9F, 0x43, 0x78,
 0x5C, 0xA1, 0x4E, 0x8B, 0xA6, 0xE6, 0x7C,
 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x01, 0xF7, 0x31, 0x5D, 0x27,
 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x01, 0x0B, 0x57, 0x0B, 0x79,
 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x02, 0x44, 0x33, 0xBB, 0xB4,
 0x5B, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x01, 0xAB, 0xE3, 0x01, 0xC2,
 0xD2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x01, 0x7A, 0x07, 0x9E, 0xAD,
 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x02, 0xF1, 0xEE, 0xF7, 0xD8,
 0x29, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x01, 0x2C, 0x35, 0x54, 0x3A,
 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x01, 0xC9, 0x3D, 0x66, 0x6A,
 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x05, 0x24, 0x7A, 0xF7, 0x1C, 0x24,
 0x40, 0xEB, 0xA2, 0x4D, 0xC2, 0x66, 0xC8,
 0x37, 0x2C, 0x03, 0x0F, 0xF3, 0x01, 0x06,
 0x6D, 0x9A, 0x42, 0xF0, 0x94, 0x8F, 0xED,
 0xBF, 0xE3, 0x28, 0x3B, 0x72, 0x69, 0x37,
 0x75, 0xB4, 0xA0, 0x9A, 0x6E, 0x31, 0xFD,
 0x66, 0x5B, 0xCB, 0xF3, 0xBA, 0x8C, 0xA4,
 0x31, 0xFF, 0xBA, 0x7C, 0x24, 0x54, 0xD3,
 0xC6, 0x63, 0x89, 0x93, 0xE4, 0xED, 0xDA,
 0x58, 0x47, 0x4E, 0xB5, 0x8F, 0xD7, 0x93,
 0xFD, 0xAF, 0x31, 0xEA, 0xB4, 0xEC, 0xC9,
 0x05, 0x7D, 0x2B, 0x15, 0x96, 0xC1, 0x00,
 0x7E, 0x80, 0xE6, 0xF7, 0x47, 0xCD, 0x6A,
 0x77, 0xF1, 0x0E, 0x59, 0x13, 0xAA, 0x5C,
 0x83, 0x88, 0x70, 0xDC, 0xC4, 0x52, 0x52,
 0x20, 0xB6, 0x69, 0x2D, 0x6C, 0x6C, 0x8B,
 0x66, 0x2A, 0xCD, 0x5A, 0x41, 0x30, 0xD6,
 0xFB, 0x7B, 0xA0, 0xEC, 0x7A, 0x22, 0x88,
 0x7C, 0x71, 0x6E, 0xAF, 0x62, 0x06, 0xF4,
 0xA8, 0xC6, 0x88, 0x85, 0x76, 0x36, 0xC5,
 0xC0, 0xD8, 0x67, 0x96, 0x7C, 0xE8, 0x4D,
 0xD4, 0xFB, 0xA9, 0x6F, 0x0F, 0xB2, 0xA7,
 0xA3, 0x19, 0x6A, 0x30, 0xFD, 0x6F, 0xFC,
 0x2B, 0xCE, 0xA4, 0x1B, 0x8E, 0x57, 0x48,
 0x51, 0xC6, 0x98, 0x0F, 0xE5, 0x08, 0x7B,
 0x4D, 0xFC, 0x59, 0xDD, 0xCF, 0x13, 0x1B,
 0x31, 0x0C, 0x5E, 0x3B, 0x98, 0xE1, 0xF4,
 0xC3, 0x41, 0xD7, 0xA2, 0x64, 0x5E, 0x16,
 0xF9, 0xEB, 0xAE, 0x20, 0xE9, 0x5D, 0x54,
 0xBD, 0x99, 0xD3, 0xA7, 0xC1, 0xD9, 0xE5,
 0x32, 0x22, 0xD6, 0x9F, 0x4F, 0xDD, 0x6B,
 0x3C, 0x6D, 0xE9, 0x4D, 0x96, 0x52, 0x11,
 0xDA, 0x23, 0x86, 0xBE, 0x01, 0xC4, 0x51,
 0xC2, 0x9C, 0xC6, 0xF5, 0x2F, 0x1F, 0xD0,
 0xF1, 0xF5, 0x57, 0x82, 0xFE, 0xCB, 0xFB,
 0x4A, 0xDF, 0x1D, 0x00, 0x46, 0xB8, 0xA7,
 0x3A, 0x56, 0x66, 0x08, 0x71, 0x4E, 0x47,
 0xF8, 0x27, 0x26, 0x5F, 0x6C, 0xD8, 0xC3,
 0x05, 0x99, 0x0A, 0x75, 0x8F, 0x4F, 0xC1,
 0x88, 0x72, 0xA0, 0x5A, 0x13, 0x08, 0xA3,
 0x82, 0x84, 0x2E, 0xCE, 0xB5, 0xA3, 0x46,
 0x05, 0xD6, 0x6A, 0x78, 0x56, 0x44, 0x23,
 0x86, 0xF2, 0xC9, 0x63, 0x08, 0x8B, 0xBD,
 0xEE, 0x56, 0xD4, 0x36, 0x1F, 0x37, 0x53,
 0x18, 0xE7, 0xDA, 0x1C, 0xFA, 0xD0, 0x05,
 0xD5, 0x5F, 0xE7, 0xB7, 0xAD, 0x36, 0x2B,
 0xCB, 0x06, 0xC0, 0x53, 0xF4, 0x32, 0xA8,
 0x75, 0x6F, 0xE3, 0xC9, 0xA1, 0xB0, 0xA6,
 0xE6, 0xC2, 0x41, 0x0F, 0x5D, 0x2E, 0x0A,
 0x64, 0x50, 0x46, 0x92, 0x49, 0x5B, 0x2D,
 0x00, 0x2E, 0xB5, 0x21, 0x3F, 0x0B, 0x4A,
 0x71, 0x96, 0x88, 0x84, 0x4C, 0x98, 0xAA,
 0x28, 0x23, 0xEB, 0xEF, 0x45, 0x5C, 0x62,
 0x78, 0xD6, 0xE4, 0xFB, 0x6D, 0xC3, 0xD9,
 0x35, 0x6C, 0xB9, 0x2A, 0xC6, 0x74, 0x71,
 0xC4, 0x0C, 0x65, 0x7C, 0xA3, 0xF9, 0x6E,
 0x2D, 0xB9, 0x86, 0xB0, 0x04, 0x63, 0x94,
 0xCF, 0x26, 0x7D, 0x9E, 0x1E, 0xF7, 0x99,
 0xDA, 0xE0, 0x8C, 0xDD, 0x86, 0xF3, 0xC8,
 0xF1, 0xC6, 0x4E, 0x15, 0x5D, 0xED, 0x34,
 0xBB, 0x90, 0xCD, 0xD6, 0x26, 0x09, 0x1E,
 0xF6, 0x23, 0x84, 0x51, 0xC1, 0xAE, 0x42,
 0x8F, 0x84, 0x96, 0xC9, 0x57, 0xAE, 0x16,
 0x36, 0x3A, 0x29, 0x87, 0x65, 0xB2, 0xBA,
 0x56, 0x96, 0xD2, 0xF5, 0x09, 0xEF, 0x30,
 0x4A, 0x0F, 0x62, 0x36, 0xFE, 0x00, 0x30,
 0xBD, 0x09, 0x1B, 0x50, 0xC3, 0x3C, 0x48,
 0xD7, 0x25, 0xE1, 0x8E, 0xB2, 0x6F, 0x4D,
 0x75, 0x2D, 0xAD, 0xC6, 0x1E, 0xBA, 0xFA,
 0x4F, 0x41, 0xAF, 0x7A, 0x6F, 0xA0, 0xA0,
 0x4F, 0xB6, 0x88, 0x34, 0x69, 0x8A, 0x9E,
 0x83, 0x7A, 0x60, 0xF3, 0xA8, 0x7E, 0x39,
 0x2A, 0x20, 0x9C, 0x32, 0x5E, 0x7D, 0xC4,
 0xAA, 0x97, 0xE6, 0x26, 0x35, 0x42, 0xA1,
 0xA0, 0xEF, 0x39, 0xB3, 0x1C, 0x27, 0x63,
 0xD2, 0x7F, 0x75, 0xC0, 0x1E, 0xB4, 0xFA,
 0x4D, 0x7A, 0x81, 0x81, 0x39, 0xE0, 0x79,
 0x2F, 0x94, 0xA5, 0x28, 0x3A, 0x43, 0x7E,
 0x97, 0xB5, 0x94, 0xAF, 0x2A, 0x10, 0x38,
 0x0A, 0x7F, 0x49, 0x91, 0xC0, 0x6C, 0x65,
 0x9A, 0xC6, 0xC9, 0x5D, 0xD5, 0x52, 0x46,
 0x98, 0x74, 0xAC, 0x93, 0xE4, 0x21, 0xB0,
 0xEB, 0x08, 0xFA, 0xF4, 0x41, 0x2E, 0xA6,
 0xF9, 0xC5, 0xED, 0xE3, 0x37, 0x98, 0xC5,
 0xDF, 0x52, 0x82, 0x41, 0xA2, 0xF2, 0x56,
 0x1A, 0xF3, 0xA4, 0xC6, 0x40, 0x8D, 0xB9,
 0x5F, 0xAA, 0x75, 0x1E, 0x15, 0x1E, 0x68,
 0x78, 0x2B, 0x2B, 0xF4, 0x3E, 0xC7, 0xCB,
 0xF3, 0x13, 0x60, 0xE0, 0xF4, 0x85, 0x79,
 0x88, 0x0C, 0x22, 0x75, 0x87, 0xB7, 0x51,
 0xE0, 0xD6, 0xE3, 0xA0, 0x92, 0xD3, 0xD7,
 0xE3, 0x6C, 0x5B, 0x3E, 0xB7, 0x80, 0xE7,
 0x48, 0xD6, 0xD9, 0x2F, 0x49, 0xCC, 0x75,
 0xA0, 0x04, 0xC9, 0x48, 0x88, 0xE9, 0xCC,
 0x32, 0x41, 0xAF, 0x30, 0xDE, 0xC6, 0xBC,
 0x9D, 0xF7, 0xFC, 0xFF, 0x69, 0x03, 0x50,
 0x58, 0xA1, 0xD6, 0xB8, 0x7B, 0x5E, 0x60,
 0xFC, 0xCC, 0x00, 0x14, 0xAF, 0x3A, 0x30,
 0x41, 0xB3, 0x4E, 0x63, 0x47, 0x95, 0xE4,
 0xBD, 0x53, 0x74, 0xD0, 0xF0, 0x02, 0xB4,
 0xFE, 0x48, 0x19, 0x6C, 0x3F, 0x23, 0xF7,
 0x9B, 0x44, 0x11, 0xF2, 0xC2, 0x45, 0xA6,
 0x37, 0x77, 0x6C, 0x10, 0x63, 0x0E, 0x1B,
 0xA7, 0xD1, 0x96, 0xCA, 0x0D, 0x4F, 0x5B,
 0x43, 0x51, 0xD6, 0x14, 0xB7, 0x23, 0xE7,
 0x99, 0xA4, 0x9F, 0x4C, 0x7D, 0xD7, 0xDD,
 0x08, 0x11, 0x84, 0x4D, 0x5C, 0xE9, 0x60,
 0x90, 0x04, 0x8B, 0x14, 0x90, 0xF0, 0x6F,
 0x26, 0x45, 0x0F, 0x20, 0x8C, 0xE3, 0x6F,
 0x46, 0x78, 0xEB, 0x12, 0xB4, 0x5E, 0xF0,
 0xDE, 0xEB, 0x22, 0x27, 0x62, 0x78, 0x42,
 0x93, 0xBC, 0xE8, 0x48, 0xC0, 0x88, 0xBD,
 0x0F, 0xDE, 0x23, 0x2B, 0xD1, 0x88, 0x0A,
 0xE2, 0xB4, 0x33, 0x8E, 0x61, 0x36, 0x43,
 0x58, 0x42, 0xAE, 0x6B, 0xD7, 0xF2, 0xFE,
 0x0A, 0xC1, 0x26, 0x94, 0x7A, 0xCE, 0x8C,
 0x3B, 0x43, 0x5A, 0x62, 0xEF, 0x70, 0x8A,
 0xFE, 0x4D, 0xD2, 0x37, 0xDB, 0xA1, 0xB1,
 0x06, 0x1B, 0x30, 0x17, 0x4C, 0xA0, 0x24,
 0x1E, 0xBE, 0xCB, 0x64, 0xE2, 0xCE, 0x13,
 0x5C, 0xD7, 0x05, 0xA6, 0x76, 0x39, 0x38,
 0xF3, 0x85, 0x2C, 0x16, 0x0E, 0xB3, 0xE2,
 0x3D, 0xFF, 0x79, 0x88, 0x0B, 0x93, 0xEF,
 0xAD, 0x55, 0xCD, 0xB4, 0xEF, 0x8F, 0xB8,
 0x16, 0x7A, 0x05, 0xC0, 0x5E, 0x92, 0x0F,
 0x4F, 0x98, 0x58, 0xD4, 0x22, 0xAD, 0x43,
 0x25, 0x31, 0x78, 0x52, 0xC6, 0x9A, 0xCA,
 0x5E, 0xA6, 0x4E, 0x79, 0x97, 0x9A, 0xBB,
 0xDF, 0x6D, 0xF1, 0xE2, 0xD0, 0xB3, 0xCA,
 0x2A, 0x5C, 0x46, 0x82, 0x5C, 0x1E, 0xDD,
 0xD0, 0xC5, 0x19, 0x89, 0x2B, 0x2C, 0xBD,
 0xC0, 0x84, 0xD9, 0x33, 0x39, 0x67, 0xE4,
 0xE4, 0x79, 0x26, 0xB6, 0x9D, 0x1C, 0x1D,
 0xE4, 0x70, 0xA5, 0xA7, 0x61, 0x89, 0x25,
 0x4A, 0x57, 0x33, 0x7D, 0x0D, 0xCA, 0xF3,
 0xCC, 0x22, 0xAA, 0xD7, 0xD9, 0xCB, 0xE6,
 0xB2, 0x96, 0x46, 0x15, 0x95, 0x68, 0xD8,
 0x0F, 0xDF, 0x6B, 0x36, 0xDA, 0x19, 0x82,
 0x16, 0xCE, 0x38, 0x4E, 0xCF, 0xF2, 0x36,
 0xC8, 0x80, 0x07, 0x53, 0x88, 0x04, 0x2F,
 0xB2, 0x14, 0x19, 0x5D, 0xC5, 0x6C, 0xEF,
 0x95, 0x9C, 0x60, 0x8B, 0x6A, 0xE4, 0xFC,
 0x9D, 0xB2, 0x9C, 0xED, 0x1D, 0x9C, 0x1B,
 0xCA, 0xA3, 0x26, 0xDD, 0x9C, 0x63, 0x5B,
 0x3B, 0x88, 0x2B, 0xBA, 0x22, 0x35, 0x24,
 0x01, 0x48, 0xEE, 0xA0, 0x4F, 0x6E, 0x96,
 0x4E, 0x29, 0x91, 0xAA, 0xAF, 0x56, 0x47,
 0xBD, 0x7B, 0xDD, 0xA1, 0x55, 0x99, 0xD8,
 0xB5, 0xA1, 0x47, 0x93, 0x7B, 0xCD, 0x7B,
 0xCF, 0x65, 0xDE, 0x50, 0x18, 0xF2, 0x05,
 0x49, 0xF1, 0x99, 0xD8, 0x94, 0x21, 0x3F,
 0x7D, 0x52, 0xC6, 0xB1, 0xB4, 0xE1, 0x9F,
 0xF0, 0x7E, 0x60, 0x64, 0x8B, 0x30, 0xE4,
 0xAD, 0x2C, 0x97, 0xFB, 0x47, 0xF7, 0x09,
 0x01, 0x04, 0x7B, 0xF4, 0xF7, 0xA7, 0xA8,
 0x04, 0xA5, 0x7F, 0x08, 0x58, 0x79, 0x6D,
 0x26, 0x27, 0x6A, 0xD0, 0xD9, 0xAF, 0xC1,
 0xC7, 0x12, 0x23, 0xE1, 0xAE, 0x98, 0xA4,
 0x0F, 0xBC, 0x1B, 0xFA, 0x9D, 0x91, 0x0B,
 0x15, 0x15, 0xA5, 0x24, 0x53, 0x1A, 0x13,
 0xE0, 0xC3, 0x00, 0x95, 0x38, 0x9C, 0x36,
 0x4C, 0xCF, 0xF6, 0xA9, 0xBC, 0xC1, 0x53,
 0x06, 0x04, 0xF4, 0x6F, 0xBF, 0x57, 0xE0,
 0xA6, 0x14, 0xA6, 0x49, 0x70, 0x7F, 0x39,
 0x2A, 0x4A, 0x5A, 0x59, 0x36, 0x33, 0xB9,
 0x0D, 0x47, 0x25, 0x39, 0x37, 0x04, 0x77,
 0x7C, 0x45, 0xAC, 0x19, 0x93, 0x25, 0x49,
 0xE0, 0x7A, 0x7B, 0xA2, 0xC6, 0x95, 0x76,
 0x8D, 0x3C, 0x79, 0xB1, 0xA7, 0xC3, 0x83,
 0x63, 0x03, 0x23, 0x47, 0xD7, 0xAC, 0xFB,
 0x84, 0x16, 0x6F, 0x22, 0x49, 0x0B, 0x97,
 0xAA, 0xD5, 0x38, 0x57, 0x5E, 0x2B, 0xBB,
 0xA7, 0x49, 0xED, 0xD2, 0xD5, 0x7A, 0x96,
 0xBE, 0x8D, 0xF5, 0xF9, 0x46, 0x56, 0xF5,
 0x2F, 0xA7, 0xA8, 0x7A, 0xFF, 0x3F, 0xE7,
 0xE8, 0x8C, 0xF1, 0x48, 0xE8, 0x46, 0xCB,
 0x4D, 0x25, 0xF9, 0x35, 0x93, 0x2F, 0xCE,
 0x8B, 0xB8, 0xA9, 0xC5, 0xD3, 0xD2, 0x27,
 0x71, 0x86, 0x6F, 0x72, 0xD9, 0xCA, 0x4E,
 0x90, 0xD3, 0x6D, 0xB1, 0x3C, 0xD3, 0xCB,
 0xC9, 0x30, 0x3A, 0x26, 0x45, 0x9D, 0x66,
 0x44, 0x5C, 0x5F, 0xD8, 0xE3, 0x90, 0x7C,
 0x1B, 0xD8, 0x82, 0xDD, 0xD3, 0x84, 0xD4,
 0xC6, 0x1B, 0x58, 0xBF, 0x02, 0xA5, 0x3B,
 0x10, 0x0A, 0x3E, 0xE3, 0x09, 0x94, 0x0B,
 0x99, 0x88, 0x2B, 0x47, 0xA7, 0x90, 0x89,
 0xC4, 0x48, 0x25, 0x36, 0xDB, 0x72, 0x31,
 0xAC, 0xF5, 0xA3, 0x01, 0x15, 0xD0, 0xE6,
 0x21, 0x61, 0xEB, 0x59, 0x72, 0xDC, 0x94,
 0x00, 0x00, 0x98, 0xF7, 0xB0, 0xF9, 0xFA,
 0xC1, 0x0A, 0x7E, 0xDC, 0x69, 0xCE, 0x90,
 0x5E, 0x82, 0x11, 0x0B, 0x97, 0xE2, 0x99,
 0x55, 0xA2, 0x3D, 0xFA, 0xEB, 0x88, 0xBC,
 0x4D, 0xC2, 0x54, 0x8D, 0x5F, 0xDE, 0xA3,
 0xE2, 0x48, 0x13, 0x20, 0x46, 0xC5, 0xA0,
 0x81, 0x04, 0xC4, 0x2B, 0x9A, 0x84, 0x15,
 0xB8, 0x9E, 0x9B, 0x62, 0xA1, 0xEC, 0x7D,
 0x08, 0x3C, 0xAD, 0x21, 0x4B, 0x89, 0xFC,
 0xC6, 0x96, 0x7C, 0x3A, 0x41, 0x35, 0x8A,
 0x13, 0xBD, 0x1B, 0x43, 0xBF, 0x36, 0x7A,
 0x4E, 0xCE, 0x70, 0x9E, 0x2A, 0xF6, 0x39,
 0x33, 0xC7, 0x33, 0x4B, 0x34, 0x7D, 0x2A,
 0x81, 0xFA, 0x25, 0x2E, 0xC5, 0xC4, 0xA1,
 0x28, 0x0E, 0xD5, 0x4D, 0x15, 0xE0, 0x69,
 0x12, 0x71, 0x19, 0xAA, 0xFF, 0x59, 0x48,
 0x81, 0x56, 0x53, 0xC9, 0x35, 0x12, 0x4D,
 0x84, 0x69, 0x91, 0x36, 0xD8, 0xAD, 0xF7,
 0x54, 0xD5, 0x8C, 0xF9, 0xC6, 0x84, 0x12,
 0x62, 0x22, 0xF1, 0xB9, 0x2B, 0x1D, 0xA5,
 0x7C, 0x56, 0x7A, 0x4D, 0x5A, 0xC4, 0xF0,
 0x9D, 0x8F, 0x5D, 0xB5, 0x9A, 0x7F, 0xE7,
 0xB7, 0xA8, 0x5D, 0x6D, 0x37, 0x00, 0x00,
 0x00, 0x00, 0xE4, 0xF2, 0xEA, 0x7A, 0x73,
 0xF8, 0xFC, 0x67, 0x17, 0xF3, 0xD9, 0x60,
 0x09, 0x0E, 0x8B, 0x0F, 0xE2, 0xF9, 0x83,
 0x61, 0xDF, 0x53, 0x69, 0xD0, 0xEE, 0x42,
 0x51, 0xB5, 0x51, 0x48, 0x64, 0xF8, 0xDD,
 0x3E, 0xEE, 0xA7, 0x47, 0xF0, 0x7C, 0x4B,
 0xBB, 0x2B, 0x8E, 0xE2, 0x8B, 0x60, 0x57,
 0x63, 0x4B, 0x9B, 0xAA, 0x67, 0x63, 0xEA,
 0xA3, 0xD5, 0x7C, 0x43, 0x41, 0xA9, 0x54,
 0x74, 0xD2, 0x86, 0xC3, 0x11, 0x42, 0x69,
 0xC5, 0x09, 0x3E, 0x8F, 0x94, 0xAF, 0xC5,
 0x99, 0xBB, 0xBB, 0xAC, 0x61, 0x64, 0x61,
 0x01, 0xF2, 0xD3, 0x59, 0xB1, 0x41, 0x50,
 0x91, 0x16, 0x6C, 0xCC, 0x9B, 0xEC, 0x5C,
 0xFE, 0x3B, 0xB3, 0xEC, 0x6E, 0xD7, 0xF1,
 0x0E, 0x5A, 0x8A, 0x5F, 0x1D, 0xB0, 0xC5,
 0x76, 0x54, 0x26, 0x07, 0xBC, 0x66, 0xF0,
 0xED, 0x51, 0x9A, 0x1F, 0xE8, 0xF7, 0x51,
 0x58, 0x8E, 0x1E, 0x80, 0x99, 0x1F, 0xEE,
 0xD6, 0x43, 0xCC, 0xFA, 0x2F, 0xAE, 0x80,
 0xF2, 0xA8, 0xA8, 0xAE, 0x43, 0x7C, 0x80,
 0x76, 0xD4, 0x1A, 0xD4, 0x73, 0x74, 0x61,
 0xDF, 0xBF, 0x29, 0x6F, 0x56, 0x15, 0x93,
 0x07, 0x58, 0x92, 0xF1, 0x1D, 0xE8, 0x7B,
 0x68, 0xB2, 0x54, 0x20, 0x30, 0x01, 0x2D,
 0xC5, 0xD8, 0xFD, 0x61, 0x50, 0x14, 0x0F,
 0x58, 0x4C, 0x1A, 0x54, 0x00, 0x12, 0x7E,
 0x46, 0x99, 0x0C, 0x9D, 0xD1, 0xA3, 0x04,
 0xF1, 0x82, 0x17, 0xFE, 0xFC, 0x12, 0xE5,
 0x75, 0x81, 0xAF, 0xFF, 0x3D, 0x08, 0xD5,
 0x39, 0x87, 0x4A, 0x8E, 0xF0, 0x7A, 0xD4,
 0xD0, 0xD6, 0xCF, 0xA9, 0xD6, 0x59, 0x48,
 0x41, 0xC2, 0x68, 0xE3, 0xA4, 0x35, 0x45,
 0x8D, 0x14, 0x1A, 0xC4, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x44, 0x89, 0x2C, 0x63, 0xC8,
 0xAF, 0x7B, 0xAC, 0x35, 0x43, 0x27, 0xBE,
 0x7E, 0xCF, 0x56, 0x40, 0x3D, 0xA5, 0xAC,
 0x0F, 0x97, 0xCC, 0xD4, 0x6E, 0xD0, 0x31,
 0xD7, 0x14, 0x60, 0x45, 0xAE, 0xDF, 0x0A,
 0xAA, 0x33, 0xB3, 0x88, 0xE0, 0x1C, 0x26,
 0xDC, 0x00, 0xB8, 0x75, 0xC8, 0x67, 0x11,
 0xA1, 0xB5, 0x87, 0x71, 0xF9, 0x4A, 0x6A,
 0xEC, 0x3F, 0x0E, 0x41, 0x21, 0xC2, 0x4F,
 0x92, 0x8F, 0x17, 0x53, 0xEE, 0xD5, 0xEA,
 0x4F, 0x91, 0x75, 0x02, 0x59, 0x00, 0x00,
 0x00, 0x02, 0x94, 0xE4, 0xDA, 0x4A, 0xB3,
 0xAA, 0xA7, 0x2E, 0x9C, 0xC7, 0x80, 0x46,
 0x5E, 0xBD, 0x06, 0x33, 0x1D, 0xD8, 0x5D,
 0x9F, 0x5F, 0x77, 0x73, 0x0A, 0x7D, 0x38,
 0x6B, 0xA7, 0x0E, 0x8F, 0x4E, 0x7D, 0x01,
 0xDA, 0x44, 0x74, 0xD2, 0xF1, 0x7A, 0x2F,
 0x7F, 0xE1, 0xEC, 0xF1, 0xA5, 0x7D, 0x03,
 0x3B, 0x2F, 0x17, 0xB6, 0xE8, 0x0D, 0x33,
 0x3C, 0x21, 0x91, 0x91, 0x5B, 0x30, 0x2C,
 0x11, 0xC6, 0x58, 0x6A, 0xE4, 0x35, 0x1B,
 0xB5, 0xA8, 0x47, 0xB3, 0xFF, 0xD0, 0x96,
 0x0E, 0x48, 0x4E, 0x97, 0x37, 0x60, 0x12,
 0x04, 0xFF, 0xCB, 0xA5, 0xF5, 0x1D, 0x40,
 0x9C, 0xDF, 0x36, 0x12, 0x3D, 0xD9, 0x2A,
 0x72, 0xDA, 0xE8, 0x8B, 0xE4, 0x5B, 0xCF,
 0xE9, 0x38, 0x52, 0xEC, 0x2C, 0xA0, 0xF7,
 0x79, 0xAD, 0x20, 0x70, 0x59, 0x20, 0x62,
 0x73, 0x9C, 0xE3, 0x46, 0x09, 0xC9, 0x12,
 0xD4, 0x77, 0x55, 0x07, 0x4B, 0x6A, 0x26,
 0x1E, 0x5D, 0x07, 0x78, 0x10, 0x4E, 0x4A,
 0xDA, 0x5E, 0xF6, 0x3B, 0x9B, 0x8D, 0xFD,
 0x48, 0xD0, 0xBB, 0xAA, 0x21, 0x2E, 0xF5,
 0xDF, 0x85, 0x4C, 0xA7, 0x1D, 0x1A, 0x26,
 0x1B, 0xA0, 0x82, 0x86, 0x7F, 0x4B, 0x02,
 0xD2, 0xF6, 0x60, 0xC9, 0x86, 0x0C, 0x1D,
 0xBF, 0x73, 0x69, 0x86, 0x18, 0x4B, 0x44,
 0xBC, 0x74, 0xE5, 0x82, 0x17, 0x93, 0xB5,
 0x0A, 0x56, 0x08, 0xB7, 0x4A, 0x73, 0xB8,
 0x04, 0xD2, 0x14, 0x21, 0x5E, 0x2C, 0xA0,
 0xE0, 0xC2, 0x01, 0x5F, 0xDE, 0xCE, 0x64,
 0x2A, 0xD8, 0x65, 0x2B, 0xF0, 0x74, 0xE3,
 0x54, 0xBF, 0xA0, 0x9B, 0x50, 0xBA, 0x02,
 0x00, 0x2C, 0x95, 0xCE, 0x2A, 0x4F, 0xCF,
 0x2B, 0x2B, 0x0E, 0x9B, 0xDD, 0x8F, 0x67,
 0x5B, 0x54, 0xA1, 0x47, 0x2E, 0x84, 0x2E,
 0x24, 0xFA, 0x34, 0xE0, 0x5A, 0x10, 0x3B,
 0xCF, 0xAF, 0xE2, 0xED, 0x28, 0xD1, 0x17,
 0x6B, 0x9A, 0x1B, 0x49, 0x6C, 0xFC, 0xCB,
 0x7A, 0x74, 0x09, 0x2A, 0x41, 0x5A, 0xFF,
 0xA1, 0xF5, 0x98, 0xC6, 0x0C, 0xD2, 0x69,
 0x83, 0xD2, 0xC3, 0x69, 0x87, 0x5E, 0x7E,
 0xBB, 0xFC, 0xC0, 0xD1, 0xC1, 0x17, 0xD7,
 0x9B, 0xE1, 0x53, 0x70, 0xB7, 0x43, 0xD0,
 0x38, 0x25, 0x26, 0x49, 0x40, 0x5B, 0x57,
 0xBA, 0x49, 0x32, 0xAA, 0x9F, 0x39, 0xAA,
 0x8E, 0x73, 0x00, 0x85, 0x13, 0x79, 0x6D,
 0xF1, 0x91, 0x2F, 0x9E, 0xA3, 0xA0, 0x65,
 0x7C, 0x7D, 0x53, 0xB4, 0x70, 0x53, 0x01,
 0x6B, 0x92, 0x5F, 0x38, 0xF1, 0xD7, 0x3D,
 0x7A, 0xD6, 0x07, 0x72, 0x7A, 0xDB, 0xA1,
 0x65, 0xA5, 0x07, 0x41, 0x00, 0x4B, 0xEB,
 0xC5, 0xD0, 0x3B, 0xEB, 0x30, 0x61, 0x42,
 0x0D, 0x4B, 0xA3, 0xD8, 0x07, 0x8B, 0x12,
 0xF5, 0x89, 0x3D, 0x7C, 0xFB, 0x2E, 0x79,
 0xA7, 0xBC, 0xD5, 0xBF, 0x72, 0x9A, 0xD8,
 0x15, 0x39, 0xAD, 0x25, 0x70, 0xD1, 0x6C,
 0xB0, 0x5D, 0xBB, 0xF4, 0x3A, 0xF6, 0x60,
 0x56, 0xFA, 0xF2, 0xA5, 0x28, 0xAE, 0x0D,
 0x76, 0xB3, 0x79, 0xF1, 0x4B, 0xC7, 0x2E,
 0x6E, 0xB6, 0x61, 0x62, 0x22, 0xD9, 0xA7,
 0x30, 0x23, 0x45, 0x21, 0xDE, 0x47, 0x8C,
 0xEB, 0xE5, 0x4C, 0x8B, 0x4E, 0x79, 0xA0,
 0x9D, 0x95, 0xB3, 0x05, 0xAA, 0xAF, 0xEC,
 0xE6, 0x74, 0x73, 0xF0, 0xDC, 0x37, 0xAD,
 0x93, 0x3B, 0x20, 0x6D, 0xA1, 0xD8, 0xCF,
 0xF9, 0x7E, 0x9E, 0xC6, 0xBB, 0x40, 0x64,
 0x56, 0xA6, 0x18, 0x75, 0x28, 0xD2, 0xBA,
 0x78, 0x64, 0x5C, 0x48, 0x45, 0x70, 0x35,
 0x8C, 0x49, 0x9A, 0x45, 0x4A, 0x6D, 0xF2,
 0x9C, 0x8D, 0x48, 0x0A, 0x61, 0x2E, 0xE3,
 0xD4, 0xEE, 0xA8, 0x29, 0x40, 0x4B, 0x53,
 0xBB, 0x56, 0x39, 0xCE, 0x81, 0x6C, 0xFD,
 0x37, 0xA0, 0x79, 0x1C, 0xC7, 0x94, 0x17,
 0x6C, 0x37, 0xEA, 0x97, 0xF4, 0xD8, 0xD4,
 0x9F, 0x9F, 0x30, 0x4F, 0xE5, 0xA4, 0x08,
 0xB8, 0x6B, 0xAE, 0xB9, 0xBC, 0x4F, 0x61,
 0x20, 0x44, 0xDF, 0x92, 0xDB, 0x1E, 0x04,
 0x83, 0xC0, 0xA1, 0x2C, 0x09, 0xD8, 0xDF,
 0x21, 0xF0, 0x20, 0x04, 0x80, 0xAF, 0x73,
 0x91, 0xBC, 0x0E, 0xBA, 0xE4, 0xF7, 0x9B,
 0x36, 0x3C, 0x30, 0xF1, 0xB4, 0xBA, 0xDC,
 0xFA, 0x65, 0xF2, 0x2B, 0x1D, 0x18, 0x4E,
 0x16, 0x62, 0xD4, 0xAC, 0x8B, 0x21, 0xA5,
 0xA2, 0xF1, 0x32, 0xC3, 0xC9, 0x65, 0x63,
 0x2D, 0x31, 0x6B, 0xB8, 0x8F, 0xE1, 0x24,
 0x93, 0x87, 0x04, 0x99, 0xE6, 0xBD, 0xBA,
 0x28, 0x30, 0x63, 0xDA, 0xAC, 0xC7, 0x99,
 0x37, 0x8A, 0x86, 0x66, 0xB3, 0x44, 0xD5,
 0x84, 0xAA, 0xA1, 0x53, 0x42, 0xA0, 0x38,
 0x1E, 0x5D, 0xF7, 0x05, 0x29, 0xE7, 0xCA,
 0x2A, 0x0B, 0x6A, 0xAB, 0xCE, 0xF0, 0x3A,
 0xF3, 0x90, 0xE6, 0xD1, 0x25, 0xA1, 0x33,
 0x1C, 0x33, 0x99, 0x7D, 0x24, 0xD1, 0x74,
 0x23, 0xFC, 0x6F, 0x7D, 0xDB, 0xA7, 0xE9,
 0xC2, 0xDE, 0x17, 0x12, 0x2D, 0x1C, 0xB3,
 0x7E, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x03, 0x08, 0x75, 0x7D, 0x9A, 0x49,
 0x37, 0xAF, 0x60, 0x04, 0x7C, 0xBC, 0xD3,
 0x1C, 0x53, 0x70, 0x34, 0x97, 0xEB, 0xE1,
 0xCD, 0x30, 0x79, 0xA2, 0x86, 0x94, 0x58,
 0x5A, 0x99, 0xC2, 0x69, 0xD7, 0xB2, 0x32,
 0x62, 0x6C, 0x0A, 0x36, 0x69, 0xB1, 0x35,
 0x48, 0x41, 0xCE, 0x79, 0x96, 0x7A, 0x0D,
 0x2D, 0x33, 0xBF, 0x4D, 0x2F, 0xB8, 0xD8,
 0xB3, 0xFB, 0xE4, 0x71, 0x93, 0xB9, 0x18,
 0x0D, 0x51, 0xAB, 0xBB, 0x09, 0xD9, 0x0D,
 0xD7, 0x67, 0x1E, 0x47, 0x28, 0xC7, 0xF7,
 0xCE, 0x60, 0x58, 0x28, 0x23, 0x5E, 0x95,
 0xFC, 0x2B, 0xDB, 0xF9, 0x0D, 0x1F, 0xAB,
 0x49, 0xE6, 0xD0, 0xA7, 0x37, 0x79, 0x20,
 0xE4, 0xCF, 0x05, 0xE3, 0x64, 0x21, 0xAC,
 0xDF, 0xB1, 0xE8, 0xF9, 0xE0, 0x4C, 0x3B,
 0x5E, 0x89, 0x68, 0x2A, 0x48, 0xC5, 0x64,
 0x0E, 0xDB, 0xF1, 0x53, 0x8B, 0x1A, 0x2F,
 0xF6, 0x0C, 0x18, 0x9C, 0x52, 0x9B, 0x21,
 0x2E, 0x4A, 0xE7, 0xD6, 0xBB, 0xB7, 0x1A,
 0x0A, 0x22, 0xAB, 0x4A, 0xFD, 0xD3, 0x02,
 0x7D, 0x21, 0xFF, 0xB9, 0x0E, 0x0F, 0x29,
 0xAB, 0xAC, 0xF4, 0x44, 0x5E, 0x0F, 0xD5,
 0xF3, 0x57, 0xE5, 0x4F, 0x61, 0x72, 0x4E,
 0xBA, 0x55, 0x37, 0x8F, 0x9A, 0x1C, 0xD4,
 0xB8, 0x30, 0xAF, 0x0A, 0x95, 0x1A, 0x13,
 0x86, 0xD4, 0x0A, 0x83, 0x5C, 0x99, 0x1B,
 0x2B, 0xC0, 0x93, 0xF5, 0x13, 0xF5, 0xEA,
 0xFB, 0x6F, 0x75, 0x74, 0x6C, 0x2E, 0x77,
 0xC3, 0x44, 0xC5, 0x38, 0x62, 0xB9, 0xF5,
 0xAC, 0x58, 0xB4, 0x96, 0x6E, 0xA4, 0xA5,
 0x45, 0xB5, 0x1B, 0x7C, 0x9D, 0x21, 0x95,
 0x16, 0xEE, 0x29, 0x57, 0x20, 0x12, 0xBB,
 0xF8, 0x0A, 0x23, 0x25, 0xAC, 0x51, 0xFD,
 0x7A, 0xE0, 0x9D, 0x43, 0xB0, 0x27, 0x6F,
 0x2A, 0xDF, 0x04, 0x08, 0xD3, 0xF1, 0x1D,
 0x3C, 0x12, 0x8D, 0xAF, 0xF2, 0xD7, 0xB9,
 0x02, 0x9D, 0x46, 0xE3, 0xAB, 0xFF, 0x61,
 0xC8, 0x61, 0x2B, 0x19, 0xC8, 0xC1, 0xA1,
 0x6D, 0x0A, 0xA7, 0x44, 0xFA, 0xB5, 0xA8,
 0xD7, 0x1E, 0x53, 0x15, 0x6F, 0x7A, 0x48,
 0x41, 0xE9, 0x30, 0xB5, 0xAD, 0xE2, 0xF0,
 0x70, 0x40, 0x6A, 0xF3, 0x31, 0xDD, 0x19,
 0x50, 0xE5, 0xBC, 0xB4, 0x3D, 0x83, 0x9F,
 0xDF, 0xC8, 0x25, 0x27, 0x90, 0x40, 0x5B,
 0x32, 0x04, 0x47, 0x81, 0xFA, 0x53, 0xB4,
 0x0A, 0x40, 0x15, 0x7A, 0x74, 0x5B, 0xDB,
 0x24, 0xAB, 0x3A, 0xB7, 0x91, 0xE3, 0x44,
 0xB7, 0x47, 0x07, 0x39, 0x90, 0xD2, 0xF5,
 0xA9, 0x08, 0x46, 0x58, 0xDC, 0x32, 0x10,
 0xA3, 0x47, 0x32, 0x04, 0x45, 0x44, 0x13,
 0x71, 0xAC, 0x2E, 0xA7, 0xC9, 0x71, 0xD0,
 0xF9, 0x51, 0x7E, 0xCA, 0xE5, 0x09, 0xA8,
 0x1E, 0x77, 0x5B, 0x3A, 0x08, 0xAA, 0x43,
 0x1C, 0xD6, 0x8D, 0x60, 0x91, 0x46, 0x6D,
 0x64, 0x56, 0x9E, 0x16, 0x2E, 0xCE, 0xB3,
 0x99, 0xC8, 0xF6, 0x55, 0x27, 0x13, 0x84,
 0xBC, 0x8A, 0xB3, 0xC8, 0xF5, 0x1A, 0x72,
 0xF7, 0x6A, 0x0C, 0x46, 0x95, 0x2F, 0x4A,
 0x86, 0xB6, 0xD2, 0x98, 0x94, 0xF1, 0xC3,
 0x37, 0x0E, 0x0C, 0x87, 0x11, 0x56, 0x7E,
 0xAF, 0xDA, 0x22, 0x29, 0x6F, 0xEB, 0xFA,
 0xEC, 0x96, 0xE0, 0x27, 0x6B, 0x42, 0xA1,
 0x70, 0x09, 0x1A, 0xAD, 0x48, 0x88, 0xDA,
 0xFC, 0xE1, 0x3B, 0x62, 0x95, 0x28, 0x56,
 0x70, 0x28, 0x03, 0xB2, 0x58, 0x67, 0x8D,
 0x0A, 0xEA, 0x9A, 0x15, 0x95, 0x51, 0x5F,
 0x83, 0x07, 0x09, 0x20, 0xBF, 0x37, 0xAF,
 0xF7, 0x0A, 0x74, 0x3C, 0xA5, 0x52, 0xF1,
 0xE3, 0xF5, 0x58, 0x30, 0xE1, 0x17, 0xDE,
 0x98, 0xF1, 0x38, 0x7B, 0xF0, 0xAF, 0xBD,
 0x16, 0x59, 0x52, 0x99, 0x6C, 0x74, 0x70,
 0x48, 0x77, 0x14, 0xFF, 0x53, 0x41, 0x84,
 0xBC, 0xC5, 0x37, 0x2F, 0x71, 0x84, 0x3D,
 0xF5, 0x46, 0x7C, 0x63, 0xE0, 0x00, 0xA0,
 0x56, 0x07, 0xF7, 0x8C, 0x63, 0x57, 0xBE,
 0x54, 0x5C, 0xE1, 0xFD, 0xAC, 0x35, 0xFA,
 0xC2, 0xD5, 0xF2, 0x5A, 0xBE, 0x7C, 0x31,
 0x8E, 0xBD, 0xDB, 0xFE, 0x4D, 0x03, 0x6F,
 0x5E, 0xA6, 0x1F, 0x23, 0x2D, 0xCA, 0x68,
 0xF0, 0xC6, 0x14, 0xCC, 0xC3, 0x3E, 0xF0,
 0x21, 0xD4, 0x40, 0x2A, 0x72, 0xB6, 0x7E,
 0xE2, 0x85, 0xD6, 0x8A, 0xFB, 0x48, 0x51,
 0x27, 0x77, 0xE4, 0xCB, 0xCD, 0x2F, 0xF6,
 0xE1, 0xBC, 0xFE, 0xED, 0xA1, 0x14, 0x5F,
 0xE5, 0x32, 0xFC, 0xCF, 0xD9, 0xFB, 0x2F,
 0xE9, 0xAD, 0x7D, 0x2D, 0x68, 0xE7, 0x9A,
 0x15, 0x95, 0x6A, 0x4A, 0xE4, 0xAB, 0xE4,
 0xEB, 0xE0, 0x0D, 0x40, 0xBD, 0xEF, 0x8F,
 0xB9, 0x75, 0xB4, 0x39, 0x08, 0x6D, 0xC0,
 0x9F, 0x04, 0xFF, 0xCC, 0xDE, 0x13, 0x30,
 0x4E, 0xB6, 0xE4, 0xE0, 0xCB, 0x69, 0xE5,
 0xC6, 0x1C, 0x2F, 0x43, 0x6A, 0x63, 0x25,
 0x72, 0xD5, 0xDF, 0xBD, 0xDC, 0x0B, 0xE9,
 0x08, 0x9D, 0x3D, 0x26, 0x6F, 0xC3, 0x89,
 0xF8, 0x18, 0xAC, 0x42, 0xBF, 0x4E, 0x9D,
 0x5D, 0x28, 0xB0, 0x26, 0x41, 0x36, 0x76,
 0x8D, 0x86, 0x84, 0xFA, 0xD8, 0xD4, 0x67,
 0x58, 0x19, 0x69, 0x20, 0x2D, 0x35, 0xFE,
 0x09, 0xD9, 0x8C, 0xFD, 0xF9, 0x21, 0xA1,
 0x57, 0xDF, 0x17, 0xAE, 0x8E, 0xCB, 0xC9,
 0x7F, 0x26, 0x54, 0xDE, 0x10, 0x43, 0x72,
 0xDD, 0xBC, 0x18, 0xB9, 0x34, 0xF9, 0xAB,
 0x70, 0xF9, 0x74, 0x4D, 0x8E, 0x6D, 0x2A,
 0x33, 0x14, 0x06, 0xD0, 0x71, 0xE6, 0xAD,
 0xAA, 0xBE, 0x86, 0x2E, 0x9A, 0x8D, 0x87,
 0x88, 0xAF, 0x03, 0x9F, 0xCB, 0xF8, 0x78,
 0x9A, 0x66, 0x38, 0x09, 0xCD, 0xAE, 0x89,
 0xC2, 0xCC, 0xAF, 0x6A, 0x16, 0x14, 0x09,
 0x48, 0xAE, 0x9B, 0x55, 0xE4, 0x0F, 0xA5,
 0x86, 0xA1, 0x75, 0x7F, 0x7C, 0xEF, 0x0D,
 0xCB, 0x3A, 0xB3, 0x0D, 0x1F, 0x02, 0x00,
 0x00, 0x00, 0x0C, 0x80, 0x1F, 0xB4, 0xF4,
 0xE0, 0xA6, 0x41, 0xCC, 0x87, 0x00, 0x40,
 0x61, 0x43, 0xE7, 0xFC, 0xB4, 0x00, 0x00,
 0x00, 0x01, 0x24, 0xCA, 0x45, 0x34, 0x25,
 0x3C, 0x39, 0xFF, 0x09, 0x8C, 0x39, 0x85,
 0x5A, 0x5B, 0xCC, 0x27, 0x3C, 0xBD, 0x28,
 0x43, 0x86, 0x45, 0x17, 0x9A, 0x4E, 0x35,
 0x24, 0xA4, 0x23, 0xA2, 0xFD, 0xCA, 0x6C,
 0xD4, 0xFB, 0xBA, 0xE7, 0x41, 0xB3, 0xFB,
 0x7C, 0x55, 0x07, 0xB5, 0x6E, 0x3E, 0xB1,
 0x29, 0x72, 0xCC, 0x38, 0xEA, 0x27, 0x30,
 0x80, 0xB9, 0x8C, 0xB8, 0xEE, 0x54, 0xAB,
 0x3E, 0xDB, 0xDD, 0x06, 0xD0, 0x95, 0xEA,
 0x3E, 0x42, 0x88, 0x6B, 0xAE, 0x89, 0xC7,
 0xE8, 0x4C, 0x38, 0xB6, 0x93, 0xF6, 0xBE,
 0x4C, 0x20, 0x4A, 0x8C, 0xCE, 0x2B, 0x22,
 0xD2, 0x72, 0x49, 0x46, 0x18, 0x56, 0x80,
 0x70, 0x67, 0x5A, 0xFA, 0xC0, 0xCA, 0x6D,
 0x53, 0x21, 0xCA, 0xE3, 0x86, 0x68, 0x91,
 0xD3, 0x7C, 0xA9, 0xD5, 0xAD, 0x6A, 0x72,
 0xA1, 0xFE, 0x53, 0xE9, 0x40, 0x85, 0xEA,
 0x62, 0xA9, 0x63, 0x75, 0x3A, 0x2D, 0xEC,
 0x9B, 0xFE, 0x58, 0xD8, 0x73, 0x20, 0x52,
 0x10, 0x43, 0x5C, 0x2D, 0xB4, 0x21, 0xB9,
 0x96, 0x1F, 0x72, 0x6D, 0xBA, 0x42, 0xEA,
 0xF2, 0x85, 0xBE, 0x52, 0x12, 0xA7, 0xB1,
 0x3E, 0x2B, 0x89, 0xEF, 0x0F, 0x73, 0x05,
 0x7C, 0x99, 0xC3, 0xC5, 0x5F, 0x96, 0x53,
 0xF8, 0xAF, 0x9B, 0x7A, 0x49, 0xA0, 0x44,
 0x54, 0x60, 0x55, 0xF0, 0x10, 0x3A, 0x60,
 0x8D, 0x90, 0x50, 0x65, 0xAE, 0xF7, 0x79,
 0xDB, 0x2E, 0x08, 0xF9, 0xBB, 0xF2, 0xD2,
 0x78, 0xD0, 0x86, 0xB5, 0x94, 0xA1, 0x0E,
 0xB9, 0x81, 0x89, 0xB7, 0xF9, 0xC0, 0x43,
 0xE8, 0x8F, 0x38, 0x19, 0xDA, 0xED, 0x2F,
 0xA7, 0x5C, 0xDB, 0x01, 0xB3, 0x38, 0xCE,
 0xE6, 0xC3, 0xF2, 0xD5, 0xAA, 0x87, 0x9E,
 0x11, 0x6F, 0xD8, 0x05, 0xF0, 0x72, 0xAB,
 0xD9, 0xA1, 0x0F, 0xFF, 0x46, 0xE9, 0x4A,
 0x8C, 0x00, 0x93, 0xE9, 0x86, 0x6F, 0x6B,
 0x14, 0x70, 0xBE, 0xB1, 0xB8, 0x89, 0xC9,
 0xCC, 0x7D, 0x1A, 0x11, 0xD2, 0x79, 0xFB,
 0xD9, 0xD7, 0x24, 0x13, 0x94, 0x8F, 0x01,
 0x9C, 0x4B, 0x69, 0x33, 0x66, 0x01, 0x82,
 0x98, 0x88, 0xF8, 0x4C, 0x13, 0x31, 0x0F,
 0x58, 0xC1, 0x06, 0x11, 0x30, 0x00, 0x00,
 0x00, 0x00, 0xB4, 0x89, 0x91, 0x34, 0x9B,
 0x89, 0xFC, 0x75, 0xCD, 0x11, 0xCA, 0x1A,
 0x6F, 0xFA, 0x71, 0xD6, 0x45, 0xE7, 0x0F,
 0xEB, 0x39, 0x09, 0xB3, 0x5A, 0x13, 0x1F,
 0xAA, 0x3A, 0x93, 0xCF, 0x8D, 0x6E, 0xCA,
 0xEC, 0x2C, 0x8E, 0xC5, 0x83, 0x1B, 0x5A,
 0xD6, 0xD1, 0x89, 0xAC, 0x02, 0x4F, 0xCB,
 0x0F, 0x25, 0x76, 0x96, 0xE0, 0x5D, 0x2C,
 0xFF, 0xA7, 0xEA, 0xEA, 0x92, 0xF1, 0x72,
 0x5B, 0xEE, 0x08, 0xD8, 0x84, 0x8A, 0xA9,
 0x59, 0xE3, 0x12, 0x77, 0xDA, 0xD6, 0xCA,
 0x4E, 0x36, 0x2D, 0x7C, 0xA4, 0x13, 0xD1,
 0xE8, 0x18, 0x31, 0x99, 0x02, 0x54, 0x0A,
 0xD0, 0x7A, 0x74, 0xA0, 0xAD, 0x2C, 0x83,
 0x4A, 0x6F, 0xF1, 0xB1, 0x50, 0x1B, 0x64,
 0x69, 0xE8, 0x84, 0x2F, 0x2C, 0xC8, 0xEB,
 0x95, 0x3D, 0xA5, 0x18, 0xC7, 0x4B, 0x82,
 0xFC, 0x88, 0xE1, 0xD3, 0x7B, 0x0E, 0xBE,
 0x10, 0xBA, 0x65, 0x02, 0x85, 0x9B, 0x46,
 0x9A, 0x37, 0x7A, 0x77, 0x4D, 0xC2, 0xC4,
 0x53, 0x30, 0x67, 0x91, 0x54, 0xF6, 0x3D,
 0x39, 0x44, 0x43, 0x42, 0x13, 0x2E, 0x09,
 0x29, 0xFD, 0x50, 0xA6, 0xDA, 0x94, 0xCE,
 0x86, 0x97, 0x10, 0x2B, 0x5C, 0x1C, 0x09,
 0xCD, 0x0F, 0xFC, 0x15, 0xDC, 0x54, 0x3B,
 0x53, 0xE1, 0x7C, 0xA7, 0xE1, 0xFD, 0x47,
 0xC2, 0xAF, 0x7E, 0xEA, 0x34, 0x00, 0x00,
 0x00, 0x00, 0x0C, 0x6F, 0xE6, 0x5C, 0x04,
 0x30, 0x6C, 0x84, 0xC7, 0x51, 0xE3, 0xB5,
 0x5F, 0x34, 0x9E, 0xDD, 0x05, 0x00, 0x00,
 0x00, 0x00, 0x0C, 0x1C, 0xD4, 0xBC, 0xFB,
 0xCD, 0x3A, 0xAE, 0xBC, 0x52, 0x92, 0x54,
 0x85, 0x2C, 0xED, 0x0F, 0xFB, 0x00, 0x00,
 0x00, 0x00, 0xF8, 0x73, 0x10, 0x5D, 0xD8,
 0x1F, 0x06, 0xE0, 0xA1, 0x59, 0x26, 0xB4,
 0x39, 0x3F, 0xC1, 0x19, 0xF9, 0xD4, 0xBE,
 0x4F, 0xF4, 0x33, 0xEC, 0x3F, 0x3F, 0xFE,
 0x8F, 0x91, 0xD0, 0x44, 0xF2, 0x12, 0x78,
 0x90, 0x9E, 0x79, 0xA9, 0x27, 0xEE, 0x05,
 0xCB, 0x9F, 0x5A, 0x4B, 0x15, 0xDE, 0x67,
 0x39, 0x18, 0x1F, 0xE7, 0x3A, 0x0A, 0x41,
 0x98, 0xE7, 0xDE, 0xA7, 0x28, 0xA0, 0xD3,
 0x54, 0x66, 0x33, 0x79, 0xB5, 0x3A, 0x83,
 0x37, 0x5F, 0x25, 0x40, 0x70, 0x47, 0xB8,
 0x79, 0x6B, 0x62, 0x96, 0x3F, 0x48, 0xEA,
 0x9F, 0x6E, 0xCB, 0x35, 0xE1, 0x6F, 0x2D,
 0xC4, 0xC2, 0x4B, 0x9B, 0xA7, 0x4D, 0x05,
 0x79, 0x0E, 0x1C, 0xFE, 0x09, 0x5A, 0x9F,
 0x87, 0x22, 0x7A, 0x13, 0x1B, 0x9F, 0x99,
 0x4D, 0x05, 0xDB, 0x15, 0x73, 0xD8, 0x65,
 0xFE, 0x39, 0x5E, 0xA4, 0x43, 0x7B, 0x6C,
 0x79, 0xBD, 0x73, 0x91, 0x4C, 0x9B, 0x4C,
 0x94, 0x18, 0x87, 0xEA, 0x68, 0xA7, 0x44,
 0x9F, 0x5C, 0x36, 0x66, 0xFD, 0x41, 0x14,
 0x5E, 0xB1, 0x8E, 0xEB, 0x45, 0xDA, 0x77,
 0x0E, 0xE0, 0xEC, 0x5E, 0xF4, 0x0D, 0xBF,
 0x41, 0xC6, 0x48, 0xF0, 0x15, 0xD8, 0x60,
 0xF7, 0x40, 0x76, 0x23, 0x7B, 0x1C, 0xE5,
 0x59, 0x44, 0x50, 0x30, 0xCE, 0x06, 0x4E,
 0xC5, 0xA6, 0x70, 0xC3, 0x18, 0x17, 0xA2,
 0x37, 0xAC, 0xBF, 0x2C, 0x6F, 0xBC, 0x9B,
 0x3F, 0x58, 0x12, 0x11, 0x10, 0x39, 0x00,
 0x18, 0xDB, 0x7D, 0x0B, 0xD2, 0x2C, 0xEE,
 0x0A, 0xAF, 0x76, 0x94, 0x7A, 0xC1, 0x5C,
 0x21, 0xD2, 0x61, 0x9F, 0x1D, 0x7A, 0x96,
 0x95, 0xDF, 0xA4, 0x51, 0x81, 0xE6, 0x1B,
 0xD5, 0x7C, 0x36, 0x44, 0xF0, 0x60, 0xFF,
 0x3A, 0xF6, 0x32, 0xEC, 0x8F, 0xE0, 0x9A,
 0xC7, 0xE3, 0xBC, 0xAD, 0xEB, 0xA6, 0x94,
 0x71, 0x4B, 0x6D, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x38, 0x97, 0x4C, 0x36, 0xA2,
 0x75, 0xFF, 0xFB, 0x3F, 0xEB, 0x60, 0xE1,
 0x31, 0xB1, 0xBC, 0x32, 0x77, 0x6C, 0xBD,
 0x49, 0x93, 0x4B, 0xC2, 0x07, 0xBA, 0xF0,
 0x67, 0xFD, 0x68, 0xCA, 0xF5, 0xA4, 0xFF,
 0x2A, 0x5E, 0xE2, 0xBE, 0xB5, 0x69, 0xB2,
 0xA0, 0x63, 0x93, 0x1B, 0xB4, 0xBD, 0x46,
 0x12, 0xFA, 0xEE, 0x88, 0x5F, 0x46, 0xDF,
 0xB2, 0xBA, 0xE8, 0xBA, 0x54, 0x47, 0xEA,
 0x00, 0x00, 0x18, 0xFA, 0x08, 0x91, 0x77,
 0x9B, 0x1C, 0x87, 0x8B, 0x01, 0x70, 0x9E,
 0xC0, 0x05, 0x2B, 0xAA, 0xD7, 0xAF, 0x30,
 0xA8, 0x01, 0x8B, 0x28, 0xA0, 0xF5, 0x95,
 0x99, 0x32, 0x5F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x08, 0xC4, 0xEF, 0x65, 0x45,
 0x3C, 0xC3, 0x6D, 0xEF, 0xB8, 0x34, 0x9D,
 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x04, 0x66, 0x86, 0xF2, 0xBC,
 0x9D, 0x87, 0x97, 0xBE, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x08, 0xDD, 0x58, 0xDD, 0x53,
 0x0F, 0x7D, 0xEC, 0x93, 0x0B, 0xB9, 0x5B,
 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x08, 0x76, 0x15, 0xDF, 0xC7,
 0x68, 0x2F, 0xA8, 0xF8, 0x4D, 0x33, 0x8F,
 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x08, 0x84, 0xC3, 0xE8, 0xCB,
 0x9C, 0x71, 0x80, 0x09, 0xD7, 0x11, 0x63,
 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x04, 0x0E, 0xC6, 0xF0, 0x50,
 0x9E, 0x0A, 0xA7, 0x99, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x14, 0x9A, 0x5A, 0xF9, 0xAA,
 0x5F, 0x06, 0xDF, 0x5C, 0x52, 0x37, 0x4B,
 0x39, 0x0C, 0x7E, 0x18, 0xC1, 0xAB, 0xD6,
 0x36, 0xF5, 0x78, 0xBD, 0x9F, 0x79, 0x00,
 0x00, 0x00, 0x0E, 0xF2, 0x33, 0x61, 0x0E,
 0xC3, 0x0B, 0x5A, 0x24, 0x02, 0x3F, 0x42,
 0x35, 0x3D, 0xA4, 0xAD, 0xC5, 0x30, 0x50,
 0x00, 0x00, 0x76, 0xE7, 0xE3, 0x45, 0x08,
 0x66, 0x18, 0x21, 0xEB, 0xDD, 0x14, 0x76,
 0xF8, 0xF1, 0x55, 0xE8, 0x3B, 0x9D, 0x8B,
 0x93, 0x92, 0xFF, 0xA7, 0x80, 0x34, 0x38,
 0xC2, 0xAD, 0x7C, 0xFF, 0xBD, 0x23, 0x2B,
 0x0B, 0x2C, 0x5F, 0xEA, 0xC0, 0x95, 0x00,
 0xFB, 0x8C, 0x37, 0x6B, 0x8A, 0x42, 0x91,
 0x3E, 0xEF, 0xD6, 0x51, 0x43, 0x21, 0x6F,
 0x80, 0x3E, 0xBD, 0xF2, 0xB3, 0x24, 0x07,
 0xA5, 0x92, 0x4A, 0x76, 0x51, 0x31, 0x72,
 0x35, 0x47, 0x25, 0xE7, 0xB9, 0xD0, 0xF4,
 0xC2, 0xDD, 0x52, 0x35, 0x3A, 0x23, 0xC4,
 0x16, 0xFA, 0x2A, 0x8D, 0x99, 0xD0, 0xB9,
 0x53, 0xC2, 0x12, 0x5C, 0x3F, 0xCE, 0x8D,
 0xDB, 0xD1, 0xC8, 0xD1, 0x59, 0xE5, 0x88,
 0xFF, 0x49, 0x11, 0xAB, 0xAB, 0x7B, 0xD1,
 0xF2, 0xB4, 0x37, 0x49, 0xA0, 0xB1, 0xFE,
 0xFE, 0x6C, 0x08, 0x76, 0x1D, 0x0B, 0x00,
 0x00, 0x00, 0x9A, 0xF4, 0xB1, 0x6D, 0xA0,
 0xF2, 0x20, 0xE4, 0x17, 0xA7, 0x4D, 0x85,
 0xB3, 0x8E, 0x7A, 0xCB, 0x87, 0x30, 0xAF,
 0x11, 0x90, 0x20, 0xA8, 0x19, 0xEA, 0x22,
 0x07, 0xFA, 0xC1, 0x4C, 0xE8, 0xFC, 0xA2,
 0x03, 0x8F, 0x2A, 0xC5, 0x36, 0xE4, 0xAF,
 0x66, 0x9B, 0xBA, 0x0A, 0xDD, 0x65, 0x90,
 0xDA, 0xD7, 0x27, 0x62, 0xD9, 0x19, 0x3B,
 0xAB, 0xF6, 0x66, 0x89, 0x2D, 0xA5, 0x30,
 0x70, 0xE9, 0xAA, 0xE2, 0xD9, 0xC1, 0x23,
 0x47, 0xFD, 0x9A, 0x25, 0x4A, 0x5F, 0x89,
 0x62, 0x97, 0x61, 0x4B, 0x91, 0xFC, 0x34,
 0x1B, 0xFC, 0x97, 0xB2, 0x7B, 0x87, 0xF4,
 0x54, 0xFC, 0xD6, 0x36, 0x48, 0xC2, 0x87,
 0x79, 0xA3, 0xC4, 0x8F, 0x42, 0xB1, 0x31,
 0x47, 0xDD, 0xE8, 0xD0, 0x0A, 0x71, 0x47,
 0x22, 0xF3, 0xF4, 0x9F, 0x28, 0x7A, 0x70,
 0x0C, 0xBC, 0x59, 0x30, 0xE0, 0xE4, 0x13,
 0x24, 0x65, 0xBD, 0x4C, 0x0E, 0x6D, 0x9E,
 0x4D, 0x15, 0x90, 0x19, 0x72, 0xC9, 0x28,
 0xB6, 0x95, 0x0E, 0x92, 0xF9, 0x79, 0x5C,
 0x64, 0xB9, 0xB9, 0x7B, 0xD7, 0xDC, 0xB4,
 0xB9, 0xB4, 0x96, 0x7F, 0x72, 0x55, 0xAE,
 0x00, 0x00, 0x1E, 0xB0, 0x02, 0x8E, 0x45,
 0xBD, 0xF0, 0xA5, 0x90, 0xB7, 0x30, 0x12,
 0x40, 0xB6, 0x40, 0x9C, 0xF1, 0x62, 0x63,
 0x72, 0x6D, 0xF0, 0xBA, 0x1A, 0xF6, 0xF0,
 0x40, 0x6A, 0x47, 0xA2, 0xFC, 0x9B, 0xD8,
 0x70, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x1A, 0xF5, 0x24, 0xF6, 0x4D,
 0x2F, 0x64, 0xFD, 0xF7, 0xC3, 0xFD, 0xA7,
 0x45, 0x5D, 0x94, 0x31, 0x8F, 0xD6, 0x9F,
 0x5D, 0x21, 0x66, 0x41, 0xD4, 0x39, 0x51,
 0xAF, 0x61, 0x8C, 0x1E, 0x9F, 0x00, 0x00,
 0x00, 0x00, 0x06, 0x11, 0xE9, 0x7A, 0x88,
 0x31, 0xE1, 0x26, 0xB6, 0x1C, 0x74, 0x00,
 0x00, 0x00, 0x06, 0xF5, 0x98, 0x35, 0x17,
 0x1A, 0xAB, 0x19, 0x3A, 0x8C, 0xC6, 0x00,
 0x00, 0x00, 0x0E, 0x7E, 0x14, 0xD0, 0x6E,
 0x44, 0x1C, 0x66, 0x61, 0x67, 0xF1, 0x8E,
 0x28, 0x72, 0x30, 0xD2, 0xBF, 0x7D, 0x6F,
 0x00, 0x00, 0x08, 0x17, 0x99, 0x62, 0xEE,
 0x78, 0x18, 0x54, 0x3A, 0xD5, 0x7F, 0x61,
 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x10, 0x83, 0x3E, 0x2C, 0x92,
 0x4F, 0x5A, 0x98, 0x59, 0x97, 0xFB, 0x82,
 0x97, 0xAD, 0xC8, 0x73, 0xA2, 0x6C, 0x0D,
 0x06, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x0A, 0x69, 0xDA, 0xEB, 0x9E,
 0xF7, 0x67, 0x7F, 0xDE, 0xE8, 0x83, 0x0B,
 0x46, 0x5A, 0x3F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x02, 0xB3, 0x60, 0x7F, 0xDC,
 0xA3, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x14, 0x8E, 0xCF, 0xA2, 0x65,
 0x72, 0xCE, 0x3E, 0x11, 0x39, 0x2D, 0x94,
 0x94, 0x47, 0x8E, 0xC7, 0x8C, 0x70, 0x6B,
 0x7C, 0x49, 0x8E, 0x3C, 0xD7, 0x4C, 0x00,
 0x00, 0x00, 0x02, 0xC8, 0x77, 0xA5, 0xFD,
 0xBA, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x0A, 0x1A, 0x1B, 0xD9, 0x4A,
 0x83, 0x03, 0xDF, 0xE2, 0x75, 0x6E, 0x28,
 0xD9, 0x63, 0x1F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x02, 0x18, 0x27, 0x27, 0x8F,
 0x4B, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xA9, 0x02}
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/patch_ssb_compressed.h';
      var-mem-desc-line = '60';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/patch_ssb_compressed.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = '_s_i4735_8cpp';
  file-name = 'SI4735.cpp';
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = '_s_i4735_8h';
  file-name = 'SI4735.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3d0f9d1b446b57f1f425654b6030fe02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP_FM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '26';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SI4735 ARDUINO LIBRARY.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
\iline 2 

\ilinebr\ilinebr This is an Arduino library for the SI473X and SI474X, BROADCAST AM/FM/SW RADIO RECEIVER, IC from Silicon Labs for the
\ilinebr\ilinebr Arduino development environment
\ilinebr\ilinebr The communication used by this library is I2C.
\ilinebr\ilinebr This file contains: const (#define), Defined Data type and Methods declarations
\ilinebr\ilinebr You can see a complete documentation on <https://github.com/pu2clr/SI4735>
\ilinebr\ilinebr The are more than 30 examples on <https://github.com/pu2clr/SI4735/tree/master/examples>

@see <a href="https://pu2clr.github.io/SI4735/" >General Documentation</a>
@see <a href="https://pu2clr.github.io/SI4735/extras/schematic/" >Schematics</a>
@see Si47XX PROGRAMMING GUIDE AN332 (Rev 1.0): https://www.silabs.com/documents/public/application-notes/AN332.pdf
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES

@author PU2CLR - Ricardo Lima Caratti
@date  2019-2022
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a1c63dbfe18d80af288cc79a5da666993';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP_AM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '27';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3adae4f49b7284531f4a9f74e64aae1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP_WB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '28';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2e49c8fada1fbb8a01ad5a0adad2b559';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_PATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '29';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a501219f4a661e7aee098f263cba5d2a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ADDR_SEN_LOW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '32';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a16a01f9b53951b9796f59e48eb28c435';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ADDR_SEN_HIGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x63
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '33';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1abf6b929a6f72c48fdb78218394541db2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '35';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9fbb31eec68a8b17895fd18640296013';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GET_REV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '36';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aad04e0c9afdeec307d5b9cb2062d784d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_DOWN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '37';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a92cfecd26935c8864d65bbdc6031acb0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SET_PROPERTY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '38';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1acf7a3971c551fcdf7ae16bb0f31c149d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GET_PROPERTY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab34642df1357e9ee8ecd90913bdae01f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GET_INT_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '40';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aa9acf37dc2ae6e26a01780d6d4e6dcc1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x20
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '43';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a25ef5653fc9206ab83d8215c209e9922';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_START';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x21
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '44';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a1c2be0c09ef2120b4e7b6d050a4a7735';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x22
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac5bbf51a4a4b25c538375567c2f4c8dc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x27
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '46';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a805bf3e7373f81190388810992fa17ae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x28
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '47';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9b58aeaeabdad7b1525ccc31f5d0d201';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x23
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac37ef03bb47367289779f5f9bc00b18f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x24
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a4c03a2d5603fb8c20d665ca2970a66df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_DETECT_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1900
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '51';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab3287830ac7ffa34372c528718895cc3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_INTERVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1901
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac8c0fc66f42d75830c0f5a5e2a701a4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1902
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a89dc1f32bbc85c08ab1f7c4b8435cb4d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_IIR_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1903
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '54';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad928830f26b8c05e93c3926ebf0760fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_DELAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1904
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8b7e6ccffb54cef940f3bd78d255bc36';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_INT_SOURCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1500
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afdc3800cf259f4c1acb254d1ad61f21b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_INT_FIFO_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1501
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '59';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afbaa25e11748b1bd64456d3eae79fdee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_CONFIG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1502
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6651f2bcc216c9b0950999f70bf2be44';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_CONFIDENCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1503
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9fe700fb45d6e08e177da6fdc208fa05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_DEEMPHASIS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '63';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a83ad68095d43d1a6d7b27941ef5b7f42';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1105
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '64';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8cad5bb93cc48ad53d80ccbb35228cbd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1106
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1abf0ee031cf6bb27b0211709117cfcaf0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_RSSI_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1800
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '66';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8f62bfa609e4deb9febe3a25aae3c6bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_RSSI_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1801
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a95851f3d5c99cdbb6ec4c605868dea8d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_SNR_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1804
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a29369a40b1406afc79b772ed939dab45';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_SNR_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1805
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a89a1ff203b89d700e362d30059a13963';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_MULTIPATH_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1808
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a775be7c1521bbdd8d33fdecc34772c1f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_MULTIPATH_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1809
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afbd0f546e5ae1646846a50f158e2f20e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_CHANNEL_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1102
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8befb9228ad41e2baa0e69411e0f5108';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SOFT_MUTE_MAX_ATTENUATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a17c1d20d698569b77c2d00fb03fc905a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_BAND_BOTTOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1400
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae8f8164aecb98eb67811957866f7173a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_BAND_TOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1401
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac5a0322f265c6a26f2eaa67b137a4e1e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_FREQ_SPACING';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1402
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aa252fd7579dcf146a8b33544c76d0e93';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_TUNE_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1403
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a960bbbda65e9a333eec9ad65a5d32af5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_TUNE_RSSI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1404
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a357f7497b6223fcd4a12503c70adbc3a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x50
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '83';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6fe25ebe601c278451f6c04271508198';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x52
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a67aab397bc97b0088bb5431fdbcf0d04';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x53
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac6c56c06b2658d67e2821f3ec3049d4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x57
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '86';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a69345cff1713682fe7d18017aacf6b52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x58
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a40829e3d25effd5d3db274d26a6b0104';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_MAX_TUNE_ERROR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5108
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1af297afebc4cdc3bf5c269d3c896b1d19';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_INT_SOURCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6f3c26bda79e601fcfc8d4367d4abaa4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_SNR_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a7e9a2026f3286eda50506896a4f3c7f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_SNR_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '94';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aea5f5a414b0313058756bd6bacefeae4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_RSSI_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5203
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '95';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a83644de2c7b22ba090798461a16a7768';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_RSSI_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5204
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '96';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a7b58779dff47163f36cf145497539d47';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_VALID_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5403
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '97';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0d81d4f32ba27c04821a0b28b0497b98';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_VALID_RSSI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5404
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5c3e83244b4ab4a76d9c5c1ed86f3a54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x40
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '101';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad6a22dca7973aef0bd45ed7adbd72a35';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_START';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x41
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '102';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae08ea65cd9de522d012b7867da9ded6b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x42
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '103';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a54146d0cab2573ea21cf4e95d2317fcb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x43
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '104';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0a7dcdb2acffb213a5c11abd3ed96297';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x47
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2b26f91fc9564254afd58904239f7645';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x48
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac4ede73dbac84ceab4a5bc876104bc20';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPIO_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aee1a56baeb6b8457fb722fd36dad5bbf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPIO_SET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x81
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '108';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab74735968edb90553a802c24ff568614';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x40
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '112';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad1f18cf2de7dc536a84a03d2152d718d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x42
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '113';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a22906edd0b4fc07bf508547fac5218a2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x43
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '114';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a09d9c252c276ecbcefede258a0246b28';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x47
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '115';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab7e181e3a172ee8e798cd5bd59566ce9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x48
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '116';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0031abcfb4699f5db24b7a8c1ec7ba82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_DEEMPHASIS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '120';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a4a220091c92c619ac986d574a616b2cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_CHANNEL_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3102
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '121';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3375102015ee9e764639093c878f764e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AUTOMATIC_VOLUME_CONTROL_MAX_GAIN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3103
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '122';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9ee081d06ef0cdb3098cf762a7128ef3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_MODE_AFC_SW_PULL_IN_RANGE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3104
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '123';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a58e12f82db7a81eccf75d4490c44115d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_MODE_AFC_SW_LOCK_IN_RANGE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3105
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8e6ffbd2ef006ca66d8d665d0778767b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_INTERRUPTS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '125';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aba5b2234f0511541a31c570b7174d697';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_SNR_HIGH_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '126';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3b36333a8e4d89d74dffc7e49a2cad62';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_SNR_LOW_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6d42dbe4fca531b64addfd693393263f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_RSSI_HIGH_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3203
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '128';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a080a16332ef646146908f397ebf30ab8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_RSSI_LOW_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3204
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '129';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab99cdb1908b382e8398decd8fb455fa8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '130';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2d531456d92913b07a7c60b9080a691a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_SLOPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3301
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '131';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a57030e143a5efa06b9b9cc21b63d0b70';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_MAX_ATTENUATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '132';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab089c66d524223acdad68bfd970603cc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3303
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adafa43d9bd0141c5f486dc86712df3db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3304
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '134';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1abb6141bfa732621e16579ccd167b60a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3305
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '135';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1af58375b1c0d63c805c0e0302d3b21dec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_BAND_BOTTOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3400
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a286e6d75f19118140fb195d843533a9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_BAND_TOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3401
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '137';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5a42cce20a54aaf19bca033f337b857e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_FREQ_SPACING';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3402
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '138';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a40276eb2a5324bf475b621fdb740e084';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3403
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aafd79dd6f3ecf16693f037306df552c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_RSSI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3404
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '140';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae666699a32a73aa42b896e14f397de0d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3702
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '141';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a801f8c099cb01c460ea967582d24257a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3703
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '142';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5d08e0a70499dcdfb14908c93c537eae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_FRONTEND_AGC_CONTROL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3705
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '143';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a246c2a5d194238315c8a11e1ce0cab41';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_DETECT_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3900
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a33559dd526d6129ca961d439d2666e27';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_INTERVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3901
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '145';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a836d43df398f26634c47466325c5c7b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3902
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '146';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aab0c7e7860e4125cfeb21f80d8e21ca3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_IIR_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3903
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '147';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2fb502c3bf4cdcfca3e8a137d94ca2b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_DELAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3904
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '148';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aeb1de40ffb7cb51cf4a151f5d1b746d7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RX_VOLUME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '150';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5d8cbc8d5c6630e874f1f8b14b897be2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RX_HARD_MUTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '151';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a16b9c6d556c2db79e8742267daf63c83';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPO_IEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '156';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a23bef04406610ba7a5e2ae8c90126248';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_BFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '157';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a232ca41189bd93729bf9139c61e612f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '158';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1acc58d23f469da25fd41ea155b7881f57';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_INTERRUPTS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '159';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a4cf19f6f3bf71f4379bfaa64bdcf5454';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_SNR_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '160';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adcca6da5b85c30212ae37ff9ad4d376c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_SNR_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '161';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae39274a8fd021005801097d34fe910bf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_RSSI_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3203
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '162';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a63a00c41ed12e4f5ca589989d32f692e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_RSSI_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3204
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '163';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1af94a06f82ac4e6760f2cffdb485f26bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_SOFT_MUTE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '164';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adde1eb5f88b07d793cfea70d7fe3266f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_SOFT_MUTE_MAX_ATTENUATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '165';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9d13509e672ac034bf05727a1bf86483';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_SOFT_MUTE_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3303
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '166';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3f0f97b4eb1221d0d9e098fec51598a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3700
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '167';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5a63b197bde5107c033b2f46636017e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3701
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '168';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6f15c34efd3b10497b1d4fcb01768f32';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_IF_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3703
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '169';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8171c8f6d4571d5e81fa7117480035ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_IF_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3702
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '170';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aa17a96499141a4e8f7487044e123d721';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_IF_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3702
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '173';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3cc8a8e7a441d49ad45f56f75544c6e7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_IF_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3703
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6c1cf039ba7ea7e5c0cce10943a18e3b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LSB_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a551c8ca21f0924d285ffba7169674775';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'USB_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '178';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a792719d21b8eef8c5b8ec952c3587e88';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_RDS_OUTPUT_ONLY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b00000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '181';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afd6b0255af56b3deee67ef1fe14d2fd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ANALOG_AUDIO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b00000101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '182';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0755e3202d03916bbe34391406406d97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_DIGITAL_AUDIO1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b00001011
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '183';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad6bd5d9d7f42b6a6a0594f74515224f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_DIGITAL_AUDIO2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b10110000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5492499e6d7c01e2a503882112b96b5b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ANALOG_DIGITAL_AUDIO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b10110101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '185';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9c2e283ffdf9f900c3e35bc90f25a8ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DIGITAL_OUTPUT_FORMAT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0102
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '188';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8c9168f6aa8868f2595020555380514a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DIGITAL_OUTPUT_SAMPLE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0104
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '189';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adb330b20b383f5f664a9b107edef0036';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REFCLK_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '190';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6b615b86f7870b616243b25cb5091933';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REFCLK_PRESCALE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '191';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aca16710d5708c296b0aee577ac4dbe12';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '194';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3c1a90b99ac7623ed1c7375c419f91db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '195';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad884de6a9db83f089883aaf52e5efc77';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '196';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a532eb0bcb71f6af702c41b93c27b119a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '197';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6af70605e17fdcdeea166d59672d2a54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SEEK_UP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '199';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a73871eb4fd3cf8830e9e23b44c0d9e71';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SEEK_DOWN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '200';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3d77e4d0458eed0b6ba584c737e8df21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_DELAY_AFTER_SET_FREQUENCY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
30
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '202';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a921cafdf244d2d7db9eeffa524e11663';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_DELAY_AFTER_POWERUP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '203';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a166d7b31e78d530aba242e50dd903de4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIN_DELAY_WAIT_SEND_LOOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '204';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1acc98e8d3badddd21bc528451bb718f82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_SEEK_TIME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '205';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a35d886cf426a77fedcb8b9784b821199';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DEFAULT_CURRENT_AVC_AM_MAX_GAIN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
36
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '207';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a33a17dceb88b2b05d8032714a1998368';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XOSCEN_CRYSTAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '209';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9d2a0e22f5a37d3911eef36581225dd2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XOSCEN_RCLK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/src/SI4735.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
